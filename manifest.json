{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.9.4", "generated_at": "2025-05-17T21:25:23.264203Z", "invocation_id": "4a4c0aeb-4b0d-4ab6-8835-7727ea084e39", "env": {}, "project_name": "restaurant_data_analytics", "project_id": "25a88e09e1962edee6b99f51f1472122", "user_id": "eea84d38-2fcb-4422-a81f-835496465552", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.restaurant_data_analytics.dim_menu_items": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "dim_menu_items", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "marts\\core\\dim_menu_items.sql", "original_file_path": "models\\marts\\core\\dim_menu_items.sql", "unique_id": "model.restaurant_data_analytics.dim_menu_items", "fqn": ["restaurant_data_analytics", "marts", "core", "dim_menu_items"], "alias": "dim_menu_items", "checksum": {"name": "sha256", "checksum": "c7e611550fc51a5b1ed47f700bbcede9272396e688193eaff160ed5d40c7b3dd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "A unified, analytics-ready menu dimension that consolidates all staging menu sources (a_la_carte, cocktails_and_beer, dessert, wine).\n", "columns": {"item_uuid": {"name": "item_uuid", "description": "Unique identifier for the menu item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_name": {"name": "item_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "category": {"name": "category", "description": "Category of the menu item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "description": {"name": "description", "description": "A description of the item. In menus where the original column was 'desc', it is aliased to 'description'. For the wine menu, a null is explicitly cast as a string.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "The price of the item as a float. Non-numeric values are handled using SAFE_CAST (or custom logic) so that invalid values (e.g., \"Market price\") become NULL.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_priced_per_weight": {"name": "is_priced_per_weight", "description": "Boolean flag indicating if the item is priced per weight (only applicable for a_la_carte).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "origin_region": {"name": "origin_region", "description": "The region of origin (only applicable for wine items).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "origin_country": {"name": "origin_country", "description": "The country of origin (only applicable for wine items).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "serving_size": {"name": "serving_size", "description": "The serving size (only applicable for wine items).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "menu_source": {"name": "menu_source", "description": "A label indicating the source menu (e.g., a_la_carte, cocktails_and_beer, dessert, wine).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "restaurant_data_analytics://models\\marts\\core\\dim_menu_items.yml", "build_path": null, "unrendered_config": {}, "created_at": 1747516848.940841, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`dim_menu_items`", "raw_code": "with a_la_carte as (\r\n    select\r\n        item_uuid,\r\n        item_name,\r\n        category,\r\n        description,  \r\n        coalesce(safe_cast(price as float64), 0.0) as price,\r\n        is_priced_per_weight,\r\n        ' ' as origin_region,\r\n        ' ' as origin_country,\r\n        null as serving_size,\r\n        'a_la_carte' as menu_source\r\n    from {{ ref('stg_a_la_carte_menu') }}\r\n),\r\ncocktails_and_beer as (\r\n    select\r\n        item_uuid,\r\n        item_name,\r\n        category,\r\n        description,\r\n        coalesce(safe_cast(price as float64), 0.0) as price,\r\n        false as is_priced_per_weight,\r\n        ' ' as origin_region,\r\n        ' ' as origin_country,\r\n        null as serving_size,\r\n        'cocktails_and_beer' as menu_source\r\n    from {{ ref('stg_cocktails_and_beer_menu') }}\r\n),\r\ndessert as (\r\n    select\r\n        item_uuid,\r\n        item_name,\r\n        category,\r\n        description,\r\n        coalesce(safe_cast(price as float64), 0.0) as price,\r\n        false as is_priced_per_weight,\r\n        ' ' as origin_region,\r\n        ' ' as origin_country,\r\n        null as serving_size,\r\n        'dessert' as menu_source\r\n    from {{ ref('stg_dessert_menu') }}\r\n),\r\nwine as (\r\n    select\r\n        item_uuid,\r\n        item_name,\r\n        category,\r\n        ' ' as description,   \r\n        coalesce(safe_cast(price as float64), 0.0) as price,\r\n        false  as is_priced_per_weight,\r\n        origin_region,\r\n        origin_country,\r\n        serving_size,         \r\n        'wine' as menu_source\r\n    from {{ ref('stg_wine_menu') }}\r\n)\r\n\r\nselect *\r\nfrom a_la_carte\r\n\r\nunion all\r\n\r\nselect *\r\nfrom cocktails_and_beer\r\n\r\nunion all\r\n\r\nselect *\r\nfrom dessert\r\n\r\nunion all\r\n\r\nselect *\r\nfrom wine", "language": "sql", "refs": [{"name": "stg_a_la_carte_menu", "package": null, "version": null}, {"name": "stg_cocktails_and_beer_menu", "package": null, "version": null}, {"name": "stg_dessert_menu", "package": null, "version": null}, {"name": "stg_wine_menu", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.restaurant_data_analytics.stg_a_la_carte_menu", "model.restaurant_data_analytics.stg_cocktails_and_beer_menu", "model.restaurant_data_analytics.stg_dessert_menu", "model.restaurant_data_analytics.stg_wine_menu"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\dim_menu_items.sql", "compiled": true, "compiled_code": "with a_la_carte as (\n    select\n        item_uuid,\n        item_name,\n        category,\n        description,  \n        coalesce(safe_cast(price as float64), 0.0) as price,\n        is_priced_per_weight,\n        ' ' as origin_region,\n        ' ' as origin_country,\n        null as serving_size,\n        'a_la_carte' as menu_source\n    from `annular-mesh-453913-r6`.`dbt_`.`stg_a_la_carte_menu`\n),\ncocktails_and_beer as (\n    select\n        item_uuid,\n        item_name,\n        category,\n        description,\n        coalesce(safe_cast(price as float64), 0.0) as price,\n        false as is_priced_per_weight,\n        ' ' as origin_region,\n        ' ' as origin_country,\n        null as serving_size,\n        'cocktails_and_beer' as menu_source\n    from `annular-mesh-453913-r6`.`dbt_`.`stg_cocktails_and_beer_menu`\n),\ndessert as (\n    select\n        item_uuid,\n        item_name,\n        category,\n        description,\n        coalesce(safe_cast(price as float64), 0.0) as price,\n        false as is_priced_per_weight,\n        ' ' as origin_region,\n        ' ' as origin_country,\n        null as serving_size,\n        'dessert' as menu_source\n    from `annular-mesh-453913-r6`.`dbt_`.`stg_dessert_menu`\n),\nwine as (\n    select\n        item_uuid,\n        item_name,\n        category,\n        ' ' as description,   \n        coalesce(safe_cast(price as float64), 0.0) as price,\n        false  as is_priced_per_weight,\n        origin_region,\n        origin_country,\n        serving_size,         \n        'wine' as menu_source\n    from `annular-mesh-453913-r6`.`dbt_`.`stg_wine_menu`\n)\n\nselect *\nfrom a_la_carte\n\nunion all\n\nselect *\nfrom cocktails_and_beer\n\nunion all\n\nselect *\nfrom dessert\n\nunion all\n\nselect *\nfrom wine", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["item_uuid"], "time_spine": null}, "model.restaurant_data_analytics.fct_orders": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "fct_orders", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "marts\\core\\fct_orders.sql", "original_file_path": "models\\marts\\core\\fct_orders.sql", "unique_id": "model.restaurant_data_analytics.fct_orders", "fqn": ["restaurant_data_analytics", "marts", "core", "fct_orders"], "alias": "fct_orders", "checksum": {"name": "sha256", "checksum": "7eb31d0a3ee3b6bd6e15f495839e8b283626aedde627f26a2fb5b1eb0d9b2d30"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "A fact table representing all items ordered during restaurant service, enriched with menu metadata and time-based breakdowns. Each row represents a single item ordered as part of a group order. Includes calculated revenue and extracted datetime dimensions for analysis.\n", "columns": {"item_ordered_id": {"name": "item_ordered_id", "description": "A surrogate key uniquely identifying an individual item within a group order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "table_no": {"name": "table_no", "description": "The table number associated with the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_uuid": {"name": "item_uuid", "description": "The UUID of the ordered menu item, used to join with dim_menu_items.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "datetime_ordered": {"name": "datetime_ordered", "description": "Timestamp when the order was placed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "production_department": {"name": "production_department", "description": "Department responsible for preparing the item (e.g., kitchen, bar).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_uuid": {"name": "order_uuid", "description": "Identifier for the group of items placed as part of the same order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity": {"name": "quantity", "description": "Number of identical items ordered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_date": {"name": "order_date", "description": "Date extracted from datetime_ordered, used for aggregations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_hour": {"name": "order_hour", "description": "Hour of the day (0\u201323) when the item was ordered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_weekday": {"name": "order_weekday", "description": "Day of the week (e.g., Monday, Tuesday) when the item was ordered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_name": {"name": "item_name", "description": "Human-readable name of the ordered item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "category": {"name": "category", "description": "Category of the ordered item (e.g., Starters, Red Wines, Cocktails).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "Unit price of the ordered item at the time of ordering.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "menu_source": {"name": "menu_source", "description": "The menu source the item belongs to (e.g., a_la_carte, wine, dessert, cocktails_and_beer).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_item_revenue": {"name": "total_item_revenue", "description": "Total revenue for this item line, calculated as quantity \u00d7 price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "restaurant_data_analytics://models\\marts\\core\\fct_orders.yml", "build_path": null, "unrendered_config": {}, "created_at": 1747516849.110003, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`fct_orders`", "raw_code": "with base_orders as (\r\n    select *\r\n    from {{ ref('stg_orders') }}\r\n),\r\n\r\nmenu_lookup as (\r\n    select *\r\n    from {{ ref('dim_menu_items') }}\r\n)\r\n\r\nselect\r\n    o.item_ordered_id,\r\n    o.table_no,\r\n    o.item_uuid,\r\n    o.datetime_ordered,\r\n    o.production_department,\r\n    o.order_uuid,\r\n    o.quantity,\r\n\r\n    -- Date/time breakdown\r\n    date(o.datetime_ordered) as order_date,\r\n    extract(hour from o.datetime_ordered) as order_hour,\r\n    format_date('%A', date(o.datetime_ordered)) as order_weekday,\r\n\r\n    -- Menu info\r\n    m.item_name,\r\n    m.category,\r\n    m.price,\r\n    m.menu_source,\r\n\r\n    -- Revenue\r\n    o.quantity * m.price as total_item_revenue\r\n\r\nfrom base_orders o\r\nleft join menu_lookup m\r\n  on o.item_uuid = m.item_uuid", "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}, {"name": "dim_menu_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.restaurant_data_analytics.stg_orders", "model.restaurant_data_analytics.dim_menu_items"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\fct_orders.sql", "compiled": true, "compiled_code": "with base_orders as (\n    select *\n    from `annular-mesh-453913-r6`.`dbt_`.`stg_orders`\n),\n\nmenu_lookup as (\n    select *\n    from `annular-mesh-453913-r6`.`dbt_`.`dim_menu_items`\n)\n\nselect\n    o.item_ordered_id,\n    o.table_no,\n    o.item_uuid,\n    o.datetime_ordered,\n    o.production_department,\n    o.order_uuid,\n    o.quantity,\n\n    -- Date/time breakdown\n    date(o.datetime_ordered) as order_date,\n    extract(hour from o.datetime_ordered) as order_hour,\n    format_date('%A', date(o.datetime_ordered)) as order_weekday,\n\n    -- Menu info\n    m.item_name,\n    m.category,\n    m.price,\n    m.menu_source,\n\n    -- Revenue\n    o.quantity * m.price as total_item_revenue\n\nfrom base_orders o\nleft join menu_lookup m\n  on o.item_uuid = m.item_uuid", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["item_ordered_id"], "time_spine": null}, "model.restaurant_data_analytics.agg_customer_counts": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "agg_customer_counts", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "marts\\core\\customers\\agg_customer_counts.sql", "original_file_path": "models\\marts\\core\\customers\\agg_customer_counts.sql", "unique_id": "model.restaurant_data_analytics.agg_customer_counts", "fqn": ["restaurant_data_analytics", "marts", "core", "customers", "agg_customer_counts"], "alias": "agg_customer_counts", "checksum": {"name": "sha256", "checksum": "d3e567ee25927dbf172f9602043050459a58b0c8368ed5d1287779ead3bd6627"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516848.7204363, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`agg_customer_counts`", "raw_code": "with base as (\r\n    select\r\n        datetime_trunc(datetime_ordered, hour) as order_hour_dt,\r\n        date(datetime_ordered) as order_date,\r\n        category\r\n    from {{ ref('fct_orders') }}\r\n    where production_department = 'kitchen'\r\n),\r\n\r\nhourly as (\r\n    select\r\n        order_hour_dt,\r\n        order_date,\r\n        count(*) as total_mains_ordered_per_hour\r\n    from base\r\n    where category in ('Mains', 'Large Cuts', 'Steaks')\r\n    group by order_hour_dt, order_date\r\n)\r\n\r\nselect\r\n    order_hour_dt,\r\n    order_date,\r\n    total_mains_ordered_per_hour\r\n    \r\nfrom hourly", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\customers\\agg_customer_counts.sql", "compiled": true, "compiled_code": "with base as (\n    select\n        datetime_trunc(datetime_ordered, hour) as order_hour_dt,\n        date(datetime_ordered) as order_date,\n        category\n    from `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\n    where production_department = 'kitchen'\n),\n\nhourly as (\n    select\n        order_hour_dt,\n        order_date,\n        count(*) as total_mains_ordered_per_hour\n    from base\n    where category in ('Mains', 'Large Cuts', 'Steaks')\n    group by order_hour_dt, order_date\n)\n\nselect\n    order_hour_dt,\n    order_date,\n    total_mains_ordered_per_hour\n    \nfrom hourly", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.restaurant_data_analytics.agg_category_performance": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "agg_category_performance", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "marts\\core\\performance\\agg_category_performance.sql", "original_file_path": "models\\marts\\core\\performance\\agg_category_performance.sql", "unique_id": "model.restaurant_data_analytics.agg_category_performance", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "agg_category_performance"], "alias": "agg_category_performance", "checksum": {"name": "sha256", "checksum": "d04412b44aea4273c90b0faa0fd686bd7b2755955b324ba50c64340e1005e156"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["performance", "category_summary"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["performance", "category_summary"], "description": "Aggregated performance metrics by category and menu source. Includes total performance, as well as metrics from the past 30 and 7 days.\n", "columns": {"category": {"name": "category", "description": "Menu item category (e.g., Starters, Red Wines).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "menu_source": {"name": "menu_source", "description": "Origin menu for the item (a_la_carte, wine, etc.).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_units_sold": {"name": "total_units_sold", "description": "Total quantity of items sold in this category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_revenue": {"name": "total_revenue", "description": "Total revenue generated by this category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_price": {"name": "avg_price", "description": "Average price of items in this category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_price_per_unit": {"name": "avg_price_per_unit", "description": "Average revenue per unit sold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_units_sold_30d": {"name": "total_units_sold_30d", "description": "Total units sold in the last 30 days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_revenue_30d": {"name": "total_revenue_30d", "description": "Total revenue in the last 30 days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_units_sold_7d": {"name": "total_units_sold_7d", "description": "Total units sold in the last 7 days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_revenue_7d": {"name": "total_revenue_7d", "description": "Total revenue in the last 7 days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "restaurant_data_analytics://models\\marts\\core\\performance\\performance.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["performance", "category_summary"]}, "created_at": 1747516849.2076142, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`agg_category_performance`", "raw_code": "with enriched_orders as (\n    select\n        o.item_uuid,\n        o.quantity,\n        o.total_item_revenue,\n        m.category,\n        m.menu_source,\n        m.price,\n        date(o.datetime_ordered) as order_date\n    from {{ ref('fct_orders') }} o\n    join {{ ref('dim_menu_items') }} m using (item_uuid)\n),\n\ncategory_metrics as (\n    select\n        category,\n        menu_source,\n        sum(quantity) as total_units_sold,\n        sum(total_item_revenue) as total_revenue,\n        avg(price) as avg_price,\n        round(sum(total_item_revenue) / nullif(sum(quantity), 0), 2) as avg_price_per_unit\n    from enriched_orders\n    group by category, menu_source\n),\n\ncategory_metrics_last_30_days as (\n    select\n        category,\n        menu_source,\n        sum(quantity) as total_units_sold_30d,\n        sum(total_item_revenue) as total_revenue_30d\n    from enriched_orders\n    where order_date >= current_date - interval 30 day\n    group by category, menu_source\n),\n\ncategory_metrics_last_7_days as (\n    select\n        category,\n        menu_source,\n        sum(quantity) as total_units_sold_7d,\n        sum(total_item_revenue) as total_revenue_7d\n    from enriched_orders\n    where order_date >= current_date - interval 7 day\n    group by category, menu_source\n)\n\nselect\n    cm.*,\n    coalesce(cm30.total_units_sold_30d, 0) as total_units_sold_30d,\n    coalesce(cm30.total_revenue_30d, 0.0) as total_revenue_30d,\n    coalesce(cm7.total_units_sold_7d, 0) as total_units_sold_7d,\n    coalesce(cm7.total_revenue_7d, 0.0) as total_revenue_7d\nfrom category_metrics cm\nleft join category_metrics_last_30_days cm30 using (category, menu_source)\nleft join category_metrics_last_7_days cm7 using (category, menu_source)\norder by cm.total_revenue desc", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "dim_menu_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.restaurant_data_analytics.fct_orders", "model.restaurant_data_analytics.dim_menu_items"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\agg_category_performance.sql", "compiled": true, "compiled_code": "with enriched_orders as (\n    select\n        o.item_uuid,\n        o.quantity,\n        o.total_item_revenue,\n        m.category,\n        m.menu_source,\n        m.price,\n        date(o.datetime_ordered) as order_date\n    from `annular-mesh-453913-r6`.`dbt_`.`fct_orders` o\n    join `annular-mesh-453913-r6`.`dbt_`.`dim_menu_items` m using (item_uuid)\n),\n\ncategory_metrics as (\n    select\n        category,\n        menu_source,\n        sum(quantity) as total_units_sold,\n        sum(total_item_revenue) as total_revenue,\n        avg(price) as avg_price,\n        round(sum(total_item_revenue) / nullif(sum(quantity), 0), 2) as avg_price_per_unit\n    from enriched_orders\n    group by category, menu_source\n),\n\ncategory_metrics_last_30_days as (\n    select\n        category,\n        menu_source,\n        sum(quantity) as total_units_sold_30d,\n        sum(total_item_revenue) as total_revenue_30d\n    from enriched_orders\n    where order_date >= current_date - interval 30 day\n    group by category, menu_source\n),\n\ncategory_metrics_last_7_days as (\n    select\n        category,\n        menu_source,\n        sum(quantity) as total_units_sold_7d,\n        sum(total_item_revenue) as total_revenue_7d\n    from enriched_orders\n    where order_date >= current_date - interval 7 day\n    group by category, menu_source\n)\n\nselect\n    cm.*,\n    coalesce(cm30.total_units_sold_30d, 0) as total_units_sold_30d,\n    coalesce(cm30.total_revenue_30d, 0.0) as total_revenue_30d,\n    coalesce(cm7.total_units_sold_7d, 0) as total_units_sold_7d,\n    coalesce(cm7.total_revenue_7d, 0.0) as total_revenue_7d\nfrom category_metrics cm\nleft join category_metrics_last_30_days cm30 using (category, menu_source)\nleft join category_metrics_last_7_days cm7 using (category, menu_source)\norder by cm.total_revenue desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.restaurant_data_analytics.agg_item_performance_mo": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "agg_item_performance_mo", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "marts\\core\\performance\\agg_item_performance_mo.sql", "original_file_path": "models\\marts\\core\\performance\\agg_item_performance_mo.sql", "unique_id": "model.restaurant_data_analytics.agg_item_performance_mo", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "agg_item_performance_mo"], "alias": "agg_item_performance_mo", "checksum": {"name": "sha256", "checksum": "7ef6389eeedb5bb93d74663ee89dea83f7ee85e768a8f414dc6bc0181610e103"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["performance", "monthly"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["performance", "monthly"], "description": "Same structure as total, scoped to the past 30 days.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "restaurant_data_analytics://models\\marts\\core\\performance\\performance.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["performance", "monthly"]}, "created_at": 1747516849.2016082, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`agg_item_performance_mo`", "raw_code": "with base as (\r\n    select *, format_date('%Y-%m', order_date) as order_month\r\n    from {{ ref('fct_orders') }}\r\n),\r\n\r\nmenu as (\r\n    select *\r\n    from {{ ref('dim_menu_items') }}\r\n),\r\n\r\nrevenue_totals as (\r\n    select\r\n        order_month,\r\n        sum(total_item_revenue) as total_revenue_all\r\n    from base\r\n    group by order_month\r\n),\r\n\r\naggregated_items as (\r\n    select\r\n        o.item_uuid,\r\n        m.item_name,\r\n        m.category as item_category,\r\n        m.menu_source,\r\n        m.price as item_price,\r\n        o.order_month,\r\n\r\n        sum(o.quantity) as total_units_sold,\r\n        sum(o.total_item_revenue) as total_revenue,\r\n\r\n        round(avg(extract(hour from o.datetime_ordered)), 2) as avg_order_hour,\r\n        round(sum(o.total_item_revenue) / t.total_revenue_all, 4) as percent_of_total_sales,\r\n        round(sum(o.total_item_revenue) / nullif(sum(o.quantity), 0), 2) as avg_price_per_unit,\r\n\r\n        case\r\n            when sum(o.quantity) < 10 or (sum(o.total_item_revenue) / t.total_revenue_all) < 0.01\r\n              then true else false\r\n        end as is_underperformer,\r\n\r\n        case\r\n            when (sum(o.total_item_revenue) / t.total_revenue_all) > 0.10\r\n              then true else false\r\n        end as is_top_seller,\r\n\r\n        case\r\n            when sum(o.quantity) < 10 and (sum(o.total_item_revenue) / t.total_revenue_all) < 0.01\r\n              then 'Low units & low revenue share'\r\n            when sum(o.quantity) < 10 then 'Low units sold'\r\n            when (sum(o.total_item_revenue) / t.total_revenue_all) < 0.01 then 'Low revenue share'\r\n            else null\r\n        end as underperformance_reason,\r\n\r\n        case\r\n            when (sum(o.total_item_revenue) / t.total_revenue_all) > 0.10 then 'Top Seller'\r\n            when sum(o.quantity) < 10 or (sum(o.total_item_revenue) / t.total_revenue_all) < 0.01 then 'Underperformer'\r\n            else 'Standard Performer'\r\n        end as performance_tier,\r\n\r\n        dense_rank() over (partition by o.order_month order by sum(o.total_item_revenue) desc) as item_revenue_rank\r\n\r\n    from base o\r\n    left join menu m on o.item_uuid = m.item_uuid\r\n    left join revenue_totals t on o.order_month = t.order_month\r\n    group by\r\n        o.item_uuid, m.item_name, m.category, m.menu_source, m.price, o.order_month, t.total_revenue_all\r\n)\r\n\r\nselect *,\r\n       current_timestamp() as report_generated_at\r\nfrom aggregated_items\r\norder by order_month, total_revenue desc", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "dim_menu_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.restaurant_data_analytics.fct_orders", "model.restaurant_data_analytics.dim_menu_items"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\agg_item_performance_mo.sql", "compiled": true, "compiled_code": "with base as (\n    select *, format_date('%Y-%m', order_date) as order_month\n    from `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\n),\n\nmenu as (\n    select *\n    from `annular-mesh-453913-r6`.`dbt_`.`dim_menu_items`\n),\n\nrevenue_totals as (\n    select\n        order_month,\n        sum(total_item_revenue) as total_revenue_all\n    from base\n    group by order_month\n),\n\naggregated_items as (\n    select\n        o.item_uuid,\n        m.item_name,\n        m.category as item_category,\n        m.menu_source,\n        m.price as item_price,\n        o.order_month,\n\n        sum(o.quantity) as total_units_sold,\n        sum(o.total_item_revenue) as total_revenue,\n\n        round(avg(extract(hour from o.datetime_ordered)), 2) as avg_order_hour,\n        round(sum(o.total_item_revenue) / t.total_revenue_all, 4) as percent_of_total_sales,\n        round(sum(o.total_item_revenue) / nullif(sum(o.quantity), 0), 2) as avg_price_per_unit,\n\n        case\n            when sum(o.quantity) < 10 or (sum(o.total_item_revenue) / t.total_revenue_all) < 0.01\n              then true else false\n        end as is_underperformer,\n\n        case\n            when (sum(o.total_item_revenue) / t.total_revenue_all) > 0.10\n              then true else false\n        end as is_top_seller,\n\n        case\n            when sum(o.quantity) < 10 and (sum(o.total_item_revenue) / t.total_revenue_all) < 0.01\n              then 'Low units & low revenue share'\n            when sum(o.quantity) < 10 then 'Low units sold'\n            when (sum(o.total_item_revenue) / t.total_revenue_all) < 0.01 then 'Low revenue share'\n            else null\n        end as underperformance_reason,\n\n        case\n            when (sum(o.total_item_revenue) / t.total_revenue_all) > 0.10 then 'Top Seller'\n            when sum(o.quantity) < 10 or (sum(o.total_item_revenue) / t.total_revenue_all) < 0.01 then 'Underperformer'\n            else 'Standard Performer'\n        end as performance_tier,\n\n        dense_rank() over (partition by o.order_month order by sum(o.total_item_revenue) desc) as item_revenue_rank\n\n    from base o\n    left join menu m on o.item_uuid = m.item_uuid\n    left join revenue_totals t on o.order_month = t.order_month\n    group by\n        o.item_uuid, m.item_name, m.category, m.menu_source, m.price, o.order_month, t.total_revenue_all\n)\n\nselect *,\n       current_timestamp() as report_generated_at\nfrom aggregated_items\norder by order_month, total_revenue desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.restaurant_data_analytics.agg_item_performance_total": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "agg_item_performance_total", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "marts\\core\\performance\\agg_item_performance_total.sql", "original_file_path": "models\\marts\\core\\performance\\agg_item_performance_total.sql", "unique_id": "model.restaurant_data_analytics.agg_item_performance_total", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "agg_item_performance_total"], "alias": "agg_item_performance_total", "checksum": {"name": "sha256", "checksum": "e5e5d57d6cfefb4b01584257d271d70990edf1b64d324b2756a3e9484dbd9a48"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["performance", "menu_analysis"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["performance", "menu_analysis"], "description": "Aggregated item performance metrics across all time, showing total units sold, total revenue, average preparation time, and percent contribution to total sales. Also includes performance tagging (e.g., underperformer, top-seller).\n", "columns": {"item_uuid": {"name": "item_uuid", "description": "Unique identifier for the menu item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_name": {"name": "item_name", "description": "Human-readable name of the menu item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "menu_source": {"name": "menu_source", "description": "Origin menu for the item (a_la_carte, wine, dessert, cocktails_and_beer).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_category": {"name": "item_category", "description": "Category of the menu item (e.g., Starters, Red Wines).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_units_sold": {"name": "total_units_sold", "description": "Total number of units sold for this item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_revenue": {"name": "total_revenue", "description": "Total revenue generated by this item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_order_hour": {"name": "avg_order_hour", "description": "Average hour the item is ordered at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "percent_of_total_sales": {"name": "percent_of_total_sales", "description": "Percent contribution of this item to total revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "performance_flag": {"name": "performance_flag", "description": "Optional performance tag (e.g., 'underperformer', 'bestseller').", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "restaurant_data_analytics://models\\marts\\core\\performance\\performance.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["performance", "menu_analysis"]}, "created_at": 1747516849.1966033, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`agg_item_performance_total`", "raw_code": "with base as (\r\n    select *\r\n    from {{ ref('fct_orders') }}\r\n),\r\n\r\nmenu as (\r\n    select *\r\n    from {{ ref('dim_menu_items') }}\r\n),\r\n\r\nrevenue_totals as (\r\n    select\r\n        sum(total_item_revenue) as total_revenue_all\r\n    from base\r\n),\r\n\r\naggregated_items as (\r\n    select\r\n        o.item_uuid,\r\n        m.item_name,\r\n        m.category as item_category,\r\n        m.menu_source,\r\n        m.price as item_price,\r\n\r\n        sum(o.quantity) as total_units_sold,\r\n        sum(o.total_item_revenue) as total_revenue,\r\n\r\n        round(avg(extract(hour from o.datetime_ordered)), 2) as avg_order_hour,\r\n        round(sum(o.total_item_revenue) / t.total_revenue_all, 4) as percent_of_total_sales,\r\n        round(sum(o.total_item_revenue) / nullif(sum(o.quantity), 0), 2) as avg_price_per_unit,\r\n\r\n        -- Performance flags\r\n        case\r\n            when sum(o.quantity) < 10 or (sum(o.total_item_revenue) / t.total_revenue_all) < 0.01\r\n              then true else false\r\n        end as is_underperformer,\r\n\r\n        case\r\n            when (sum(o.total_item_revenue) / t.total_revenue_all) > 0.10\r\n              then true else false\r\n        end as is_top_seller,\r\n\r\n        case\r\n            when sum(o.quantity) < 10 and (sum(o.total_item_revenue) / t.total_revenue_all) < 0.01\r\n              then 'Low units & low revenue share'\r\n            when sum(o.quantity) < 10\r\n              then 'Low units sold'\r\n            when (sum(o.total_item_revenue) / t.total_revenue_all) < 0.01\r\n              then 'Low revenue share'\r\n            else null\r\n        end as underperformance_reason,\r\n\r\n        case\r\n            when (sum(o.total_item_revenue) / t.total_revenue_all) > 0.10 then 'Top Seller'\r\n            when sum(o.quantity) < 10 or (sum(o.total_item_revenue) / t.total_revenue_all) < 0.01 then 'Underperformer'\r\n            else 'Standard Performer'\r\n        end as performance_tier,\r\n\r\n        dense_rank() over (order by sum(o.total_item_revenue) desc) as item_revenue_rank\r\n\r\n    from base o\r\n    left join menu m on o.item_uuid = m.item_uuid\r\n    cross join revenue_totals t\r\n    group by\r\n        o.item_uuid, m.item_name, m.category, m.menu_source, m.price, t.total_revenue_all\r\n)\r\n\r\nselect *,\r\n       current_timestamp() as report_generated_at\r\nfrom aggregated_items\r\norder by total_revenue desc", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "dim_menu_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.restaurant_data_analytics.fct_orders", "model.restaurant_data_analytics.dim_menu_items"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\agg_item_performance_total.sql", "compiled": true, "compiled_code": "with base as (\n    select *\n    from `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\n),\n\nmenu as (\n    select *\n    from `annular-mesh-453913-r6`.`dbt_`.`dim_menu_items`\n),\n\nrevenue_totals as (\n    select\n        sum(total_item_revenue) as total_revenue_all\n    from base\n),\n\naggregated_items as (\n    select\n        o.item_uuid,\n        m.item_name,\n        m.category as item_category,\n        m.menu_source,\n        m.price as item_price,\n\n        sum(o.quantity) as total_units_sold,\n        sum(o.total_item_revenue) as total_revenue,\n\n        round(avg(extract(hour from o.datetime_ordered)), 2) as avg_order_hour,\n        round(sum(o.total_item_revenue) / t.total_revenue_all, 4) as percent_of_total_sales,\n        round(sum(o.total_item_revenue) / nullif(sum(o.quantity), 0), 2) as avg_price_per_unit,\n\n        -- Performance flags\n        case\n            when sum(o.quantity) < 10 or (sum(o.total_item_revenue) / t.total_revenue_all) < 0.01\n              then true else false\n        end as is_underperformer,\n\n        case\n            when (sum(o.total_item_revenue) / t.total_revenue_all) > 0.10\n              then true else false\n        end as is_top_seller,\n\n        case\n            when sum(o.quantity) < 10 and (sum(o.total_item_revenue) / t.total_revenue_all) < 0.01\n              then 'Low units & low revenue share'\n            when sum(o.quantity) < 10\n              then 'Low units sold'\n            when (sum(o.total_item_revenue) / t.total_revenue_all) < 0.01\n              then 'Low revenue share'\n            else null\n        end as underperformance_reason,\n\n        case\n            when (sum(o.total_item_revenue) / t.total_revenue_all) > 0.10 then 'Top Seller'\n            when sum(o.quantity) < 10 or (sum(o.total_item_revenue) / t.total_revenue_all) < 0.01 then 'Underperformer'\n            else 'Standard Performer'\n        end as performance_tier,\n\n        dense_rank() over (order by sum(o.total_item_revenue) desc) as item_revenue_rank\n\n    from base o\n    left join menu m on o.item_uuid = m.item_uuid\n    cross join revenue_totals t\n    group by\n        o.item_uuid, m.item_name, m.category, m.menu_source, m.price, t.total_revenue_all\n)\n\nselect *,\n       current_timestamp() as report_generated_at\nfrom aggregated_items\norder by total_revenue desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.restaurant_data_analytics.agg_item_performance_wk": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "agg_item_performance_wk", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "marts\\core\\performance\\agg_item_performance_wk.sql", "original_file_path": "models\\marts\\core\\performance\\agg_item_performance_wk.sql", "unique_id": "model.restaurant_data_analytics.agg_item_performance_wk", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "agg_item_performance_wk"], "alias": "agg_item_performance_wk", "checksum": {"name": "sha256", "checksum": "3071ac6dab7f6bb641281f3cf89d20b25ca3df39ee3681e92dedb3cbdae5c49c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["performance", "weekly"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["performance", "weekly"], "description": "Same structure as total, scoped to the past 7 days.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "restaurant_data_analytics://models\\marts\\core\\performance\\performance.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["performance", "weekly"]}, "created_at": 1747516849.1986053, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`agg_item_performance_wk`", "raw_code": "with base as (\r\n    select *, format_date('%G-%V', order_date) as order_week\r\n    from {{ ref('fct_orders') }}\r\n),\r\n\r\nmenu as (\r\n    select *\r\n    from {{ ref('dim_menu_items') }}\r\n),\r\n\r\nrevenue_totals as (\r\n    select\r\n        order_week,\r\n        sum(total_item_revenue) as total_revenue_all\r\n    from base\r\n    group by order_week\r\n),\r\n\r\naggregated_items as (\r\n    select\r\n        o.item_uuid,\r\n        m.item_name,\r\n        m.category as item_category,\r\n        m.menu_source,\r\n        m.price as item_price,\r\n        o.order_week,\r\n\r\n        sum(o.quantity) as total_units_sold,\r\n        sum(o.total_item_revenue) as total_revenue,\r\n\r\n        round(avg(extract(hour from o.datetime_ordered)), 2) as avg_order_hour,\r\n        round(sum(o.total_item_revenue) / t.total_revenue_all, 4) as percent_of_total_sales,\r\n        round(sum(o.total_item_revenue) / nullif(sum(o.quantity), 0), 2) as avg_price_per_unit,\r\n\r\n        case\r\n            when sum(o.quantity) < 10 or (sum(o.total_item_revenue) / t.total_revenue_all) < 0.01\r\n              then true else false\r\n        end as is_underperformer,\r\n\r\n        case\r\n            when (sum(o.total_item_revenue) / t.total_revenue_all) > 0.10\r\n              then true else false\r\n        end as is_top_seller,\r\n\r\n        case\r\n            when sum(o.quantity) < 10 and (sum(o.total_item_revenue) / t.total_revenue_all) < 0.01\r\n              then 'Low units & low revenue share'\r\n            when sum(o.quantity) < 10 then 'Low units sold'\r\n            when (sum(o.total_item_revenue) / t.total_revenue_all) < 0.01 then 'Low revenue share'\r\n            else null\r\n        end as underperformance_reason,\r\n\r\n        case\r\n            when (sum(o.total_item_revenue) / t.total_revenue_all) > 0.10 then 'Top Seller'\r\n            when sum(o.quantity) < 10 or (sum(o.total_item_revenue) / t.total_revenue_all) < 0.01 then 'Underperformer'\r\n            else 'Standard Performer'\r\n        end as performance_tier,\r\n\r\n        dense_rank() over (partition by o.order_week order by sum(o.total_item_revenue) desc) as item_revenue_rank\r\n\r\n    from base o\r\n    left join menu m on o.item_uuid = m.item_uuid\r\n    left join revenue_totals t on o.order_week = t.order_week\r\n    group by\r\n        o.item_uuid, m.item_name, m.category, m.menu_source, m.price, o.order_week, t.total_revenue_all\r\n)\r\n\r\nselect *,\r\n       current_timestamp() as report_generated_at\r\nfrom aggregated_items\r\norder by order_week, total_revenue desc", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "dim_menu_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.restaurant_data_analytics.fct_orders", "model.restaurant_data_analytics.dim_menu_items"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\agg_item_performance_wk.sql", "compiled": true, "compiled_code": "with base as (\n    select *, format_date('%G-%V', order_date) as order_week\n    from `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\n),\n\nmenu as (\n    select *\n    from `annular-mesh-453913-r6`.`dbt_`.`dim_menu_items`\n),\n\nrevenue_totals as (\n    select\n        order_week,\n        sum(total_item_revenue) as total_revenue_all\n    from base\n    group by order_week\n),\n\naggregated_items as (\n    select\n        o.item_uuid,\n        m.item_name,\n        m.category as item_category,\n        m.menu_source,\n        m.price as item_price,\n        o.order_week,\n\n        sum(o.quantity) as total_units_sold,\n        sum(o.total_item_revenue) as total_revenue,\n\n        round(avg(extract(hour from o.datetime_ordered)), 2) as avg_order_hour,\n        round(sum(o.total_item_revenue) / t.total_revenue_all, 4) as percent_of_total_sales,\n        round(sum(o.total_item_revenue) / nullif(sum(o.quantity), 0), 2) as avg_price_per_unit,\n\n        case\n            when sum(o.quantity) < 10 or (sum(o.total_item_revenue) / t.total_revenue_all) < 0.01\n              then true else false\n        end as is_underperformer,\n\n        case\n            when (sum(o.total_item_revenue) / t.total_revenue_all) > 0.10\n              then true else false\n        end as is_top_seller,\n\n        case\n            when sum(o.quantity) < 10 and (sum(o.total_item_revenue) / t.total_revenue_all) < 0.01\n              then 'Low units & low revenue share'\n            when sum(o.quantity) < 10 then 'Low units sold'\n            when (sum(o.total_item_revenue) / t.total_revenue_all) < 0.01 then 'Low revenue share'\n            else null\n        end as underperformance_reason,\n\n        case\n            when (sum(o.total_item_revenue) / t.total_revenue_all) > 0.10 then 'Top Seller'\n            when sum(o.quantity) < 10 or (sum(o.total_item_revenue) / t.total_revenue_all) < 0.01 then 'Underperformer'\n            else 'Standard Performer'\n        end as performance_tier,\n\n        dense_rank() over (partition by o.order_week order by sum(o.total_item_revenue) desc) as item_revenue_rank\n\n    from base o\n    left join menu m on o.item_uuid = m.item_uuid\n    left join revenue_totals t on o.order_week = t.order_week\n    group by\n        o.item_uuid, m.item_name, m.category, m.menu_source, m.price, o.order_week, t.total_revenue_all\n)\n\nselect *,\n       current_timestamp() as report_generated_at\nfrom aggregated_items\norder by order_week, total_revenue desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.restaurant_data_analytics.agg_daily_drink_sales": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "agg_daily_drink_sales", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "marts\\core\\sales\\agg_daily_drink_sales.sql", "original_file_path": "models\\marts\\core\\sales\\agg_daily_drink_sales.sql", "unique_id": "model.restaurant_data_analytics.agg_daily_drink_sales", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "agg_daily_drink_sales"], "alias": "agg_daily_drink_sales", "checksum": {"name": "sha256", "checksum": "21d73bdef1666cbd3f8df525af0771bbf4e9481845070d8888d2cbc10b1f9993"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["sales", "daily", "drink", "agg"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["sales", "daily", "drink", "agg"], "description": "Daily summary of drink (bar) sales aggregated from hourly metrics, including revenue, item diversity, customer metrics, and peak hour indicators.\n", "columns": {"order_date": {"name": "order_date", "description": "Date of the sales aggregation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_drink_items_ordered_all_day": {"name": "total_drink_items_ordered_all_day", "description": "Total number of drink items sold across all hours of the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_daily_drink_revenue": {"name": "total_daily_drink_revenue", "description": "Total revenue generated from drink (bar) over the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_daily_revenue_per_drink_item": {"name": "avg_daily_revenue_per_drink_item", "description": "Average revenue per drink item sold throughout the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "drink_category_diversity_all_day": {"name": "drink_category_diversity_all_day", "description": "Total number of unique drink categories sold during the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_daily_drink_category_name": {"name": "top_daily_drink_category_name", "description": "Top-selling drink category for the entire day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_daily_drink_category_revenue": {"name": "top_daily_drink_category_revenue", "description": "Revenue generated by the top-selling drink category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pct_top_drink_cat_from_daily_drink_revenue": {"name": "pct_top_drink_cat_from_daily_drink_revenue", "description": "Share of drink revenue from the top category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "distinct_drink_tables_all_day": {"name": "distinct_drink_tables_all_day", "description": "Number of unique tables that placed drinks orders across the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_drink_orders_all_day": {"name": "total_drink_orders_all_day", "description": "Total number of drink orders placed throughout the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_revenue_per_drink_order_all_day": {"name": "avg_revenue_per_drink_order_all_day", "description": "Average revenue per drink order placed during the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_items_per_drink_order_all_day": {"name": "avg_items_per_drink_order_all_day", "description": "Average number of drink items per order placed during the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_customers_all_day": {"name": "total_customers_all_day", "description": "Estimated number of customers, proxied from food mains.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_drink_revenue_per_head_all_day": {"name": "avg_drink_revenue_per_head_all_day", "description": "Average drinks revenue per customer for the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_drink_items_per_head_all_day": {"name": "avg_drink_items_per_head_all_day", "description": "Average number of drinks per customer across the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "unique_drink_items_ordered_all_day": {"name": "unique_drink_items_ordered_all_day", "description": "Total number of distinct drink items ordered throughout the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "bar_peak_hours": {"name": "bar_peak_hours", "description": "Comma-separated list of peak drink sales hours based on item volume.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_weekend": {"name": "is_weekend", "description": "True if the order date is a Friday, Saturday, or Sunday.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "restaurant_data_analytics://models\\marts\\core\\sales\\sales.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["sales", "daily", "drink", "agg"]}, "created_at": 1747516849.3717637, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`", "raw_code": "with hourly as (\r\n    select *\r\n    from {{ ref('agg_hourly_drink_sales') }}\r\n),\r\n\r\nmetadata as (\r\n    select\r\n        order_date,\r\n        drink_category_diversity_all_day,\r\n        distinct_drink_tables_used_all_day,\r\n        unique_drink_items_ordered_all_day\r\n    from {{ ref('agg_daily_metadata') }}\r\n),\r\n\r\ncustomers as (\r\n    select\r\n        order_date,\r\n        sum(new_customers_per_hour) as total_customers_all_day\r\n    from {{ ref('agg_hourly_drink_sales') }}\r\n    group by order_date\r\n),\r\n\r\n\r\n\r\npeak_hours as (\r\n    select\r\n        order_date,\r\n        string_agg(cast(hour_of_day as string), ',' order by hour_of_day) as bar_peak_hours,\r\n        max(is_weekend) as is_weekend\r\n    from {{ ref('agg_hourly_drink_sales') }}\r\n    where is_bar_peak_hour\r\n    group by order_date\r\n)\r\n\r\nselect\r\n    h.order_date,\r\n\r\n    sum(h.total_drink_items_ordered_per_hour) as total_drink_items_ordered_all_day,\r\n    sum(h.total_drink_revenue_per_hour) as total_daily_drink_revenue,\r\n    round(\r\n        sum(h.total_drink_revenue_per_hour) / nullif(sum(h.total_drink_items_ordered_per_hour), 0), 2\r\n    ) as avg_daily_revenue_per_drink_item,\r\n\r\n    coalesce(max(m.drink_category_diversity_all_day), 0) as drink_category_diversity_all_day,\r\n    max_by(h.top_drink_category_name_per_hour, h.top_drink_category_revenue_per_hour) as top_daily_drink_category_name,\r\n    max(h.top_drink_category_revenue_per_hour) as top_daily_drink_category_revenue,\r\n    round(\r\n        max(h.top_drink_category_revenue_per_hour) / nullif(sum(h.total_drink_revenue_per_hour), 0), 2\r\n    ) as pct_top_drink_cat_from_daily_drink_revenue,\r\n\r\n    coalesce(max(m.distinct_drink_tables_used_all_day), 0) as distinct_drink_tables_all_day,\r\n    sum(h.total_drink_orders_per_hour) as total_drink_orders_all_day,\r\n\r\n    -- New metrics\r\n    round(sum(h.total_drink_revenue_per_hour) / nullif(sum(h.total_drink_orders_per_hour), 0), 2) as avg_revenue_per_drink_order_all_day,\r\n    round(sum(h.total_drink_items_ordered_per_hour) / nullif(sum(h.total_drink_orders_per_hour), 0), 2) as avg_items_per_drink_order_all_day,\r\n\r\n    c.total_customers_all_day,\r\n    round(sum(h.total_drink_revenue_per_hour) / nullif(c.total_customers_all_day, 0), 2) as avg_drink_revenue_per_head_all_day,\r\n    round(sum(h.total_drink_items_ordered_per_hour) / nullif(c.total_customers_all_day, 0), 2) as avg_drink_items_per_head_all_day,\r\n\r\n    coalesce(max(m.unique_drink_items_ordered_all_day), 0) as unique_drink_items_ordered_all_day,\r\n    ph.bar_peak_hours,\r\n    ph.is_weekend\r\n\r\nfrom hourly h\r\nleft join metadata m on h.order_date = m.order_date\r\nleft join customers c on h.order_date = c.order_date\r\nleft join peak_hours ph on h.order_date = ph.order_date\r\ngroup by h.order_date, c.total_customers_all_day, ph.bar_peak_hours, ph.is_weekend\r\norder by h.order_date desc", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}, {"name": "agg_daily_metadata", "package": null, "version": null}, {"name": "agg_hourly_drink_sales", "package": null, "version": null}, {"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales", "model.restaurant_data_analytics.agg_daily_metadata"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\agg_daily_drink_sales.sql", "compiled": true, "compiled_code": "with hourly as (\n    select *\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n),\n\nmetadata as (\n    select\n        order_date,\n        drink_category_diversity_all_day,\n        distinct_drink_tables_used_all_day,\n        unique_drink_items_ordered_all_day\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_metadata`\n),\n\ncustomers as (\n    select\n        order_date,\n        sum(new_customers_per_hour) as total_customers_all_day\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n    group by order_date\n),\n\n\n\npeak_hours as (\n    select\n        order_date,\n        string_agg(cast(hour_of_day as string), ',' order by hour_of_day) as bar_peak_hours,\n        max(is_weekend) as is_weekend\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n    where is_bar_peak_hour\n    group by order_date\n)\n\nselect\n    h.order_date,\n\n    sum(h.total_drink_items_ordered_per_hour) as total_drink_items_ordered_all_day,\n    sum(h.total_drink_revenue_per_hour) as total_daily_drink_revenue,\n    round(\n        sum(h.total_drink_revenue_per_hour) / nullif(sum(h.total_drink_items_ordered_per_hour), 0), 2\n    ) as avg_daily_revenue_per_drink_item,\n\n    coalesce(max(m.drink_category_diversity_all_day), 0) as drink_category_diversity_all_day,\n    max_by(h.top_drink_category_name_per_hour, h.top_drink_category_revenue_per_hour) as top_daily_drink_category_name,\n    max(h.top_drink_category_revenue_per_hour) as top_daily_drink_category_revenue,\n    round(\n        max(h.top_drink_category_revenue_per_hour) / nullif(sum(h.total_drink_revenue_per_hour), 0), 2\n    ) as pct_top_drink_cat_from_daily_drink_revenue,\n\n    coalesce(max(m.distinct_drink_tables_used_all_day), 0) as distinct_drink_tables_all_day,\n    sum(h.total_drink_orders_per_hour) as total_drink_orders_all_day,\n\n    -- New metrics\n    round(sum(h.total_drink_revenue_per_hour) / nullif(sum(h.total_drink_orders_per_hour), 0), 2) as avg_revenue_per_drink_order_all_day,\n    round(sum(h.total_drink_items_ordered_per_hour) / nullif(sum(h.total_drink_orders_per_hour), 0), 2) as avg_items_per_drink_order_all_day,\n\n    c.total_customers_all_day,\n    round(sum(h.total_drink_revenue_per_hour) / nullif(c.total_customers_all_day, 0), 2) as avg_drink_revenue_per_head_all_day,\n    round(sum(h.total_drink_items_ordered_per_hour) / nullif(c.total_customers_all_day, 0), 2) as avg_drink_items_per_head_all_day,\n\n    coalesce(max(m.unique_drink_items_ordered_all_day), 0) as unique_drink_items_ordered_all_day,\n    ph.bar_peak_hours,\n    ph.is_weekend\n\nfrom hourly h\nleft join metadata m on h.order_date = m.order_date\nleft join customers c on h.order_date = c.order_date\nleft join peak_hours ph on h.order_date = ph.order_date\ngroup by h.order_date, c.total_customers_all_day, ph.bar_peak_hours, ph.is_weekend\norder by h.order_date desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_date"], "time_spine": null}, "model.restaurant_data_analytics.agg_daily_food_sales": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "agg_daily_food_sales", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "marts\\core\\sales\\agg_daily_food_sales.sql", "original_file_path": "models\\marts\\core\\sales\\agg_daily_food_sales.sql", "unique_id": "model.restaurant_data_analytics.agg_daily_food_sales", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "agg_daily_food_sales"], "alias": "agg_daily_food_sales", "checksum": {"name": "sha256", "checksum": "89873cb5359060ce5bd7ceb1d65ccf010f9e9db74a2f5c27b1ae68f769178351"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["sales", "daily", "food", "agg"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["sales", "daily", "food", "agg"], "description": "Daily summary of food (kitchen) sales aggregated from hourly metrics, including total revenue, customer estimates, category performance, and daily averages.\n", "columns": {"order_date": {"name": "order_date", "description": "Date of the sales aggregation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_food_items_sold_all_day": {"name": "total_food_items_sold_all_day", "description": "Total number of food items sold across all hours of the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_daily_food_revenue": {"name": "total_daily_food_revenue", "description": "Total revenue generated from food (kitchen) over the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_daily_revenue_per_food_item": {"name": "avg_daily_revenue_per_food_item", "description": "Average revenue per food item sold throughout the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "food_category_diversity_all_day": {"name": "food_category_diversity_all_day", "description": "Total number of unique food categories sold during the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_daily_food_category_name": {"name": "top_daily_food_category_name", "description": "Top-selling food category for the entire day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_daily_food_category_revenue": {"name": "top_daily_food_category_revenue", "description": "Revenue generated by the top-selling food category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pct_top_food_cat_from_daily_food_revenue": {"name": "pct_top_food_cat_from_daily_food_revenue", "description": "Share of food revenue from the top category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "distinct_food_tables_all_day": {"name": "distinct_food_tables_all_day", "description": "Number of unique tables that placed food orders across the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_food_orders_all_day": {"name": "total_food_orders_all_day", "description": "Total number of food orders placed throughout the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_revenue_per_food_order_all_day": {"name": "avg_revenue_per_food_order_all_day", "description": "Average revenue per food order placed during the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_items_per_food_order_all_day": {"name": "avg_items_per_food_order_all_day", "description": "Average number of food items per order placed during the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_customers_all_day": {"name": "total_customers_all_day", "description": "Estimated number of food customers (based on mains ordered).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_food_revenue_per_head_all_day": {"name": "avg_food_revenue_per_head_all_day", "description": "Average food revenue per customer over the entire day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_food_items_per_head_all_day": {"name": "avg_food_items_per_head_all_day", "description": "Average number of food items per customer for the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "unique_food_items_ordered_all_day": {"name": "unique_food_items_ordered_all_day", "description": "Total number of unique food items ordered across the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "kitchen_peak_hours": {"name": "kitchen_peak_hours", "description": "Comma-separated list of peak kitchen sales hours based on item volume.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_weekend": {"name": "is_weekend", "description": "True if the order date is a Friday, Saturday, or Sunday.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "restaurant_data_analytics://models\\marts\\core\\sales\\sales.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["sales", "daily", "food", "agg"]}, "created_at": 1747516849.3607538, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`", "raw_code": "with hourly as (\r\n    select *\r\n    from {{ ref('agg_hourly_food_sales') }}\r\n),\r\n\r\nmetadata as (\r\n    select\r\n        order_date,\r\n        food_category_diversity_all_day,\r\n        distinct_food_tables_used_all_day,\r\n        unique_food_items_ordered_all_day\r\n    from {{ ref('agg_daily_metadata') }}\r\n),\r\n\r\npeak_hours as (\r\n    select\r\n        order_date,\r\n        string_agg(cast(hour_of_day as string), ',' order by hour_of_day) as kitchen_peak_hours,\r\n        max(is_weekend) as is_weekend\r\n    from {{ ref('agg_hourly_food_sales') }}\r\n    where is_kitchen_peak_hour\r\n    group by order_date\r\n)\r\n\r\nselect\r\n    h.order_date,\r\n\r\n    sum(h.total_food_items_ordered_per_hour) as total_food_items_sold_all_day,\r\n    sum(h.total_food_revenue_per_hour) as total_daily_food_revenue,\r\n    round(sum(h.total_food_revenue_per_hour) / nullif(sum(h.total_food_items_ordered_per_hour), 0), 2) as avg_daily_revenue_per_food_item,\r\n\r\n    coalesce(max(m.food_category_diversity_all_day), 0) as food_category_diversity_all_day,\r\n    max_by(h.top_food_category_name_per_hour, h.top_food_category_revenue_per_hour) as top_daily_food_category_name,\r\n    max(h.top_food_category_revenue_per_hour) as top_daily_food_category_revenue,\r\n    round(max(h.top_food_category_revenue_per_hour) / nullif(sum(h.total_food_revenue_per_hour), 0), 2) as pct_top_food_cat_from_daily_food_revenue,\r\n\r\n    coalesce(max(m.distinct_food_tables_used_all_day), 0) as distinct_food_tables_all_day,\r\n    sum(h.total_food_orders_per_hour) as total_food_orders_all_day,\r\n    round(sum(h.total_food_revenue_per_hour) / nullif(sum(h.total_food_orders_per_hour), 0), 2) as avg_revenue_per_food_order_all_day,\r\n    round(sum(h.total_food_items_ordered_per_hour) / nullif(sum(h.total_food_orders_per_hour), 0), 2) as avg_items_per_food_order_all_day,\r\n\r\n    sum(h.total_mains_ordered_per_hour) as total_customers_all_day,\r\n    round(sum(h.total_food_revenue_per_hour) / nullif(sum(h.total_mains_ordered_per_hour), 0), 2) as avg_food_revenue_per_head_all_day,\r\n    round(sum(h.total_food_items_ordered_per_hour) / nullif(sum(h.total_mains_ordered_per_hour), 0), 2) as avg_food_items_per_head_all_day,\r\n\r\n    coalesce(max(m.unique_food_items_ordered_all_day), 0) as unique_food_items_ordered_all_day,\r\n    ph.kitchen_peak_hours,\r\n    ph.is_weekend\r\n\r\nfrom hourly h\r\nleft join metadata m on h.order_date = m.order_date\r\nleft join peak_hours ph on h.order_date = ph.order_date\r\ngroup by h.order_date, ph.kitchen_peak_hours, ph.is_weekend\r\norder by h.order_date desc", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}, {"name": "agg_daily_metadata", "package": null, "version": null}, {"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales", "model.restaurant_data_analytics.agg_daily_metadata"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\agg_daily_food_sales.sql", "compiled": true, "compiled_code": "with hourly as (\n    select *\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n),\n\nmetadata as (\n    select\n        order_date,\n        food_category_diversity_all_day,\n        distinct_food_tables_used_all_day,\n        unique_food_items_ordered_all_day\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_metadata`\n),\n\npeak_hours as (\n    select\n        order_date,\n        string_agg(cast(hour_of_day as string), ',' order by hour_of_day) as kitchen_peak_hours,\n        max(is_weekend) as is_weekend\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n    where is_kitchen_peak_hour\n    group by order_date\n)\n\nselect\n    h.order_date,\n\n    sum(h.total_food_items_ordered_per_hour) as total_food_items_sold_all_day,\n    sum(h.total_food_revenue_per_hour) as total_daily_food_revenue,\n    round(sum(h.total_food_revenue_per_hour) / nullif(sum(h.total_food_items_ordered_per_hour), 0), 2) as avg_daily_revenue_per_food_item,\n\n    coalesce(max(m.food_category_diversity_all_day), 0) as food_category_diversity_all_day,\n    max_by(h.top_food_category_name_per_hour, h.top_food_category_revenue_per_hour) as top_daily_food_category_name,\n    max(h.top_food_category_revenue_per_hour) as top_daily_food_category_revenue,\n    round(max(h.top_food_category_revenue_per_hour) / nullif(sum(h.total_food_revenue_per_hour), 0), 2) as pct_top_food_cat_from_daily_food_revenue,\n\n    coalesce(max(m.distinct_food_tables_used_all_day), 0) as distinct_food_tables_all_day,\n    sum(h.total_food_orders_per_hour) as total_food_orders_all_day,\n    round(sum(h.total_food_revenue_per_hour) / nullif(sum(h.total_food_orders_per_hour), 0), 2) as avg_revenue_per_food_order_all_day,\n    round(sum(h.total_food_items_ordered_per_hour) / nullif(sum(h.total_food_orders_per_hour), 0), 2) as avg_items_per_food_order_all_day,\n\n    sum(h.total_mains_ordered_per_hour) as total_customers_all_day,\n    round(sum(h.total_food_revenue_per_hour) / nullif(sum(h.total_mains_ordered_per_hour), 0), 2) as avg_food_revenue_per_head_all_day,\n    round(sum(h.total_food_items_ordered_per_hour) / nullif(sum(h.total_mains_ordered_per_hour), 0), 2) as avg_food_items_per_head_all_day,\n\n    coalesce(max(m.unique_food_items_ordered_all_day), 0) as unique_food_items_ordered_all_day,\n    ph.kitchen_peak_hours,\n    ph.is_weekend\n\nfrom hourly h\nleft join metadata m on h.order_date = m.order_date\nleft join peak_hours ph on h.order_date = ph.order_date\ngroup by h.order_date, ph.kitchen_peak_hours, ph.is_weekend\norder by h.order_date desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_date"], "time_spine": null}, "model.restaurant_data_analytics.agg_daily_total_sales": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "agg_daily_total_sales", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "marts\\core\\sales\\agg_daily_total_sales.sql", "original_file_path": "models\\marts\\core\\sales\\agg_daily_total_sales.sql", "unique_id": "model.restaurant_data_analytics.agg_daily_total_sales", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "agg_daily_total_sales"], "alias": "agg_daily_total_sales", "checksum": {"name": "sha256", "checksum": "e98999bd33d3a0dd1c3603fdc426c6e31c092fcfc586d5b7b94aa39077ceba4f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["sales", "daily", "kpis", "combined", "agg"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["sales", "daily", "kpis", "combined", "agg"], "description": "Daily sales aggregates combining food and drink metrics across revenue, volume, customer behavior, and top category performance. Includes peak hour summary.\n", "columns": {"order_date": {"name": "order_date", "description": "Date of the aggregated sales.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "day_of_week": {"name": "day_of_week", "description": "Numeric day of the week (1 = Sunday, 7 = Saturday).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_items_ordered_all_day": {"name": "total_items_ordered_all_day", "description": "Total number of food and drink items sold throughout the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_daily_revenue": {"name": "total_daily_revenue", "description": "Total revenue from both food and drink for the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_revenue_per_item_daily": {"name": "avg_revenue_per_item_daily", "description": "Average revenue per item sold (food or drink).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pct_food_from_daily_revenue": {"name": "pct_food_from_daily_revenue", "description": "Percentage of daily revenue that came from food sales.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pct_drink_from_daily_revenue": {"name": "pct_drink_from_daily_revenue", "description": "Percentage of daily revenue that came from drink sales.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_daily_category_name": {"name": "top_daily_category_name", "description": "Top-selling category for the day, whether food or drink.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_daily_category_revenue": {"name": "top_daily_category_revenue", "description": "Revenue from the top-selling category (food or drink).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pct_top_cat_of_total_daily_revenue": {"name": "pct_top_cat_of_total_daily_revenue", "description": "Percentage of total daily revenue from the top-selling category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_daily_customers": {"name": "total_daily_customers", "description": "Estimated number of customers based on mains/steaks/large cuts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_daily_revenue_per_head": {"name": "avg_daily_revenue_per_head", "description": "Average revenue per customer across the full day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_items_ordered_per_head_per_day": {"name": "avg_items_ordered_per_head_per_day", "description": "Average number of items ordered per customer over the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_orders_all_day": {"name": "total_orders_all_day", "description": "Total number of food and drink orders placed during the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_items_per_order_all_day": {"name": "avg_items_per_order_all_day", "description": "Average number of items per order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_revenue_per_order_all_day": {"name": "avg_revenue_per_order_all_day", "description": "Average revenue per order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "unique_items_ordered_all_day": {"name": "unique_items_ordered_all_day", "description": "Total number of distinct items ordered across food and drink.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "category_diversity_all_day": {"name": "category_diversity_all_day", "description": "Number of unique food and drink categories sold during the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "distinct_tables_used_all_day": {"name": "distinct_tables_used_all_day", "description": "Total number of distinct tables used across food and drink service.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_weekend": {"name": "is_weekend", "description": "True if the date falls on a weekend (Fri, Sat, Sun).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "peak_hours": {"name": "peak_hours", "description": "List of hour integers that were marked as peak hours during the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pct_change_in_daily_revenue": {"name": "pct_change_in_daily_revenue", "description": "Percentage change in daily revenue compared to previous day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "daily_revenue_change_amount": {"name": "daily_revenue_change_amount", "description": "Absolute change in daily revenue from the previous day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rolling_avg_revenue_7d": {"name": "rolling_avg_revenue_7d", "description": "7-day rolling average of daily revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rolling_avg_items_sold_7d": {"name": "rolling_avg_items_sold_7d", "description": "7-day rolling average of items sold per day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "restaurant_data_analytics://models\\marts\\core\\sales\\sales.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["sales", "daily", "kpis", "combined", "agg"]}, "created_at": 1747516849.3847754, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`", "raw_code": "with food as (\r\n    select *\r\n    from {{ ref('agg_daily_food_sales') }}\r\n),\r\n\r\ndrink as (\r\n    select *\r\n    from {{ ref('agg_daily_drink_sales') }}\r\n),\r\n\r\nmetadata as (\r\n    select\r\n        order_date,\r\n        distinct_tables_used_all_day\r\n    from {{ ref('agg_daily_metadata') }}\r\n),\r\n\r\ncombined as (\r\n    select\r\n        f.order_date,\r\n        extract(dayofweek from f.order_date) as day_of_week,\r\n        f.total_food_items_sold_all_day as total_food_items,\r\n        d.total_drink_items_ordered_all_day as total_drink_items,\r\n        f.total_daily_food_revenue as food_revenue,\r\n        d.total_daily_drink_revenue as drink_revenue,\r\n        f.total_customers_all_day as total_daily_customers,\r\n        f.total_food_orders_all_day as food_orders,\r\n        d.total_drink_orders_all_day as drink_orders,\r\n        f.unique_food_items_ordered_all_day as unique_food_items,\r\n        d.unique_drink_items_ordered_all_day as unique_drink_items,\r\n        f.food_category_diversity_all_day as food_cat_div,\r\n        d.drink_category_diversity_all_day as drink_cat_div,\r\n        case\r\n            when f.top_daily_food_category_revenue >= d.top_daily_drink_category_revenue then f.top_daily_food_category_name\r\n            else d.top_daily_drink_category_name\r\n        end as top_daily_category_name,\r\n        greatest(f.top_daily_food_category_revenue, d.top_daily_drink_category_revenue) as top_daily_category_revenue,\r\n        m.distinct_tables_used_all_day\r\n    from food f\r\n    join drink d on f.order_date = d.order_date\r\n    left join metadata m on f.order_date = m.order_date\r\n),\r\n\r\n\r\npeak_hours_list as (\r\n    select\r\n        f.order_date,\r\n        array_to_string(\r\n            array(\r\n                select distinct hour\r\n                from unnest(\r\n                    split(coalesce(f.kitchen_peak_hours, '') || ',' || coalesce(d.bar_peak_hours, ''), ',')\r\n                ) as hour\r\n                where safe_cast(hour as int) is not null\r\n                order by cast(hour as int)\r\n            ), ','\r\n        ) as peak_hours\r\n    from {{ ref('agg_daily_food_sales') }} f\r\n    join {{ ref('agg_daily_drink_sales') }} d using (order_date)\r\n),\r\n\r\n\r\ndaily_totals as (\r\n    select\r\n        c.order_date,\r\n        c.day_of_week,\r\n        (c.total_food_items + c.total_drink_items) as total_items_ordered_all_day,\r\n        (c.food_revenue + c.drink_revenue) as total_daily_revenue,\r\n        round((c.food_revenue + c.drink_revenue) / nullif((c.total_food_items + c.total_drink_items), 0), 2) as avg_revenue_per_item_daily,\r\n        (c.food_cat_div + c.drink_cat_div) as category_diversity_all_day,\r\n        c.top_daily_category_name,\r\n        c.top_daily_category_revenue,\r\n        round(c.food_revenue / nullif((c.food_revenue + c.drink_revenue), 0), 2) as pct_food_from_daily_revenue,\r\n        round(c.drink_revenue / nullif((c.food_revenue + c.drink_revenue), 0), 2) as pct_drink_from_daily_revenue,\r\n        round(c.top_daily_category_revenue / nullif((c.food_revenue + c.drink_revenue), 0), 2) as pct_top_cat_of_total_daily_revenue,\r\n        c.total_daily_customers,\r\n        round((c.food_revenue + c.drink_revenue) / nullif(c.total_daily_customers, 0), 2) as avg_daily_revenue_per_head,\r\n        round((c.total_food_items + c.total_drink_items) / nullif(c.total_daily_customers, 0), 2) as avg_items_ordered_per_head_per_day,\r\n        (c.food_orders + c.drink_orders) as total_orders_all_day,\r\n        round((c.total_food_items + c.total_drink_items) / nullif((c.food_orders + c.drink_orders), 0), 2) as avg_items_per_order_all_day,\r\n        round((c.food_revenue + c.drink_revenue) / nullif((c.food_orders + c.drink_orders), 0), 2) as avg_revenue_per_order_all_day,\r\n        (c.unique_food_items + c.unique_drink_items) as unique_items_ordered_all_day,\r\n        c.distinct_tables_used_all_day,\r\n        extract(dayofweek from c.order_date) in (1, 6, 7) as is_weekend,\r\n        p.peak_hours\r\n    from combined c\r\n    left join peak_hours_list p on c.order_date = p.order_date\r\n),\r\n\r\nrevenue_trends as (\r\n    select\r\n        *,\r\n        round((total_daily_revenue - lag(total_daily_revenue) over (order by order_date)) / nullif(lag(total_daily_revenue) over (order by order_date), 0), 4) as pct_change_in_daily_revenue,\r\n        round(total_daily_revenue - lag(total_daily_revenue) over (order by order_date), 2) as daily_revenue_change_amount,\r\n        round(avg(total_daily_revenue) over (order by order_date rows between 6 preceding and current row), 2) as rolling_avg_revenue_7d,\r\n        round(avg(total_items_ordered_all_day) over (order by order_date rows between 6 preceding and current row), 2) as rolling_avg_items_sold_7d\r\n    from daily_totals\r\n)\r\n\r\nselect *\r\nfrom revenue_trends\r\norder by order_date desc", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}, {"name": "agg_daily_drink_sales", "package": null, "version": null}, {"name": "agg_daily_metadata", "package": null, "version": null}, {"name": "agg_daily_food_sales", "package": null, "version": null}, {"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales", "model.restaurant_data_analytics.agg_daily_drink_sales", "model.restaurant_data_analytics.agg_daily_metadata"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\agg_daily_total_sales.sql", "compiled": true, "compiled_code": "with food as (\n    select *\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n),\n\ndrink as (\n    select *\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n),\n\nmetadata as (\n    select\n        order_date,\n        distinct_tables_used_all_day\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_metadata`\n),\n\ncombined as (\n    select\n        f.order_date,\n        extract(dayofweek from f.order_date) as day_of_week,\n        f.total_food_items_sold_all_day as total_food_items,\n        d.total_drink_items_ordered_all_day as total_drink_items,\n        f.total_daily_food_revenue as food_revenue,\n        d.total_daily_drink_revenue as drink_revenue,\n        f.total_customers_all_day as total_daily_customers,\n        f.total_food_orders_all_day as food_orders,\n        d.total_drink_orders_all_day as drink_orders,\n        f.unique_food_items_ordered_all_day as unique_food_items,\n        d.unique_drink_items_ordered_all_day as unique_drink_items,\n        f.food_category_diversity_all_day as food_cat_div,\n        d.drink_category_diversity_all_day as drink_cat_div,\n        case\n            when f.top_daily_food_category_revenue >= d.top_daily_drink_category_revenue then f.top_daily_food_category_name\n            else d.top_daily_drink_category_name\n        end as top_daily_category_name,\n        greatest(f.top_daily_food_category_revenue, d.top_daily_drink_category_revenue) as top_daily_category_revenue,\n        m.distinct_tables_used_all_day\n    from food f\n    join drink d on f.order_date = d.order_date\n    left join metadata m on f.order_date = m.order_date\n),\n\n\npeak_hours_list as (\n    select\n        f.order_date,\n        array_to_string(\n            array(\n                select distinct hour\n                from unnest(\n                    split(coalesce(f.kitchen_peak_hours, '') || ',' || coalesce(d.bar_peak_hours, ''), ',')\n                ) as hour\n                where safe_cast(hour as int) is not null\n                order by cast(hour as int)\n            ), ','\n        ) as peak_hours\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales` f\n    join `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales` d using (order_date)\n),\n\n\ndaily_totals as (\n    select\n        c.order_date,\n        c.day_of_week,\n        (c.total_food_items + c.total_drink_items) as total_items_ordered_all_day,\n        (c.food_revenue + c.drink_revenue) as total_daily_revenue,\n        round((c.food_revenue + c.drink_revenue) / nullif((c.total_food_items + c.total_drink_items), 0), 2) as avg_revenue_per_item_daily,\n        (c.food_cat_div + c.drink_cat_div) as category_diversity_all_day,\n        c.top_daily_category_name,\n        c.top_daily_category_revenue,\n        round(c.food_revenue / nullif((c.food_revenue + c.drink_revenue), 0), 2) as pct_food_from_daily_revenue,\n        round(c.drink_revenue / nullif((c.food_revenue + c.drink_revenue), 0), 2) as pct_drink_from_daily_revenue,\n        round(c.top_daily_category_revenue / nullif((c.food_revenue + c.drink_revenue), 0), 2) as pct_top_cat_of_total_daily_revenue,\n        c.total_daily_customers,\n        round((c.food_revenue + c.drink_revenue) / nullif(c.total_daily_customers, 0), 2) as avg_daily_revenue_per_head,\n        round((c.total_food_items + c.total_drink_items) / nullif(c.total_daily_customers, 0), 2) as avg_items_ordered_per_head_per_day,\n        (c.food_orders + c.drink_orders) as total_orders_all_day,\n        round((c.total_food_items + c.total_drink_items) / nullif((c.food_orders + c.drink_orders), 0), 2) as avg_items_per_order_all_day,\n        round((c.food_revenue + c.drink_revenue) / nullif((c.food_orders + c.drink_orders), 0), 2) as avg_revenue_per_order_all_day,\n        (c.unique_food_items + c.unique_drink_items) as unique_items_ordered_all_day,\n        c.distinct_tables_used_all_day,\n        extract(dayofweek from c.order_date) in (1, 6, 7) as is_weekend,\n        p.peak_hours\n    from combined c\n    left join peak_hours_list p on c.order_date = p.order_date\n),\n\nrevenue_trends as (\n    select\n        *,\n        round((total_daily_revenue - lag(total_daily_revenue) over (order by order_date)) / nullif(lag(total_daily_revenue) over (order by order_date), 0), 4) as pct_change_in_daily_revenue,\n        round(total_daily_revenue - lag(total_daily_revenue) over (order by order_date), 2) as daily_revenue_change_amount,\n        round(avg(total_daily_revenue) over (order by order_date rows between 6 preceding and current row), 2) as rolling_avg_revenue_7d,\n        round(avg(total_items_ordered_all_day) over (order by order_date rows between 6 preceding and current row), 2) as rolling_avg_items_sold_7d\n    from daily_totals\n)\n\nselect *\nfrom revenue_trends\norder by order_date desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_date"], "time_spine": null}, "model.restaurant_data_analytics.agg_hourly_drink_sales": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "agg_hourly_drink_sales", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "marts\\core\\sales\\agg_hourly_drink_sales.sql", "original_file_path": "models\\marts\\core\\sales\\agg_hourly_drink_sales.sql", "unique_id": "model.restaurant_data_analytics.agg_hourly_drink_sales", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "agg_hourly_drink_sales"], "alias": "agg_hourly_drink_sales", "checksum": {"name": "sha256", "checksum": "d78227d70ee5186fffd3bd3789e439a7c4c2f19c6f4741f3d8d57599013b901f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["sales", "hourly", "drink"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["sales", "hourly", "drink"], "description": "Hourly-level aggregate of bar sales metrics including revenue, volume, category diversity, and peak hour indicators.\n", "columns": {"order_hour_dt": {"name": "order_hour_dt", "description": "The timestamp truncated to the hour (used for time-based grouping).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_date": {"name": "order_date", "description": "Date of the orders in this hourly window.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "hour_of_day": {"name": "hour_of_day", "description": "Hour of the day (0\u201323).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_drink_items_ordered_per_hour": {"name": "total_drink_items_ordered_per_hour", "description": "Total number of drink items ordered during the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_drink_revenue_per_hour": {"name": "total_drink_revenue_per_hour", "description": "Total revenue from drink ordered during the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_revenue_per_drink_item_per_hour": {"name": "avg_revenue_per_drink_item_per_hour", "description": "Average revenue per drink item sold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_drink_category_name_per_hour": {"name": "top_drink_category_name_per_hour", "description": "Top-selling drink category for the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_drink_category_revenue_per_hour": {"name": "top_drink_category_revenue_per_hour", "description": "Revenue generated by the top-selling drink category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pct_top_drink_cat_of_drink_revenue_per_hour": {"name": "pct_top_drink_cat_of_drink_revenue_per_hour", "description": "Percentage of drink revenue from the top drink category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "distinct_drink_tables_per_hour": {"name": "distinct_drink_tables_per_hour", "description": "Number of unique tables that placed drink orders during the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "open_table_ids_per_hour": {"name": "open_table_ids_per_hour", "description": "Comma-separated list of all distinct table numbers (from food and drink orders) for the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_drink_orders_per_hour": {"name": "total_drink_orders_per_hour", "description": "Total number of distinct drink orders placed during the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_revenue_per_drink_order_per_hour": {"name": "avg_revenue_per_drink_order_per_hour", "description": "Average revenue per drink order placed during the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_items_per_drink_order_per_hour": {"name": "avg_items_per_drink_order_per_hour", "description": "Average number of drink items per order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "unique_drink_items_ordered_per_hour": {"name": "unique_drink_items_ordered_per_hour", "description": "Number of unique drink items sold during the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "drink_category_diversity_per_hour": {"name": "drink_category_diversity_per_hour", "description": "Number of distinct drink categories sold during the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_bar_peak_hour": {"name": "is_bar_peak_hour", "description": "True if this hour is one of the top 2 hours by drink item volume for the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_drink_items_per_head_per_hour": {"name": "avg_drink_items_per_head_per_hour", "description": "Average number of drink items per customer (using mains from food sales as customer proxy).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_drink_revenue_per_head_per_hour": {"name": "avg_drink_revenue_per_head_per_hour", "description": "Average drink revenue per customer (using mains from food sales as customer proxy).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_weekend": {"name": "is_weekend", "description": "True if the hour falls on a weekend (Friday, Saturday, or Sunday).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "restaurant_data_analytics://models\\marts\\core\\sales\\sales.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["sales", "hourly", "drink"]}, "created_at": 1747516849.3247206, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`", "raw_code": "with base as (\r\n    select\r\n        datetime_trunc(datetime_ordered, hour) as order_hour_dt,\r\n        date(datetime_ordered) as order_date,\r\n        extract(hour from datetime_ordered) as hour_of_day,\r\n        order_uuid,\r\n        table_no,\r\n        item_uuid,\r\n        quantity,\r\n        total_item_revenue,\r\n        price,\r\n        category\r\n    from {{ ref('fct_orders') }}\r\n    where production_department = 'bar'\r\n),\r\n\r\ntop_drink_category as (\r\n    select\r\n        order_hour_dt,\r\n        category as top_drink_category_name_per_hour,\r\n        sum(quantity * price) as top_drink_category_revenue_per_hour,\r\n        rank() over (partition by order_hour_dt order by sum(quantity * price) desc) as rnk\r\n    from base\r\n    group by order_hour_dt, category\r\n),\r\n\r\nbar_peak_hours as (\r\n    select\r\n        order_hour_dt,\r\n        row_number() over (partition by order_date order by sum(quantity) desc) as bar_hour_rank\r\n    from base\r\n    group by order_hour_dt, order_date\r\n),\r\n\r\ndrink_agg as (\r\n    select\r\n        order_hour_dt,\r\n        order_date,\r\n        hour_of_day,\r\n        count(distinct table_no) as distinct_drink_tables_per_hour,\r\n        array_to_string(array_agg(distinct cast(table_no as string) order by table_no), ',') as open_table_ids_per_hour,\r\n        count(distinct order_uuid) as total_drink_orders_per_hour,\r\n        sum(quantity) as total_drink_items_ordered_per_hour,\r\n        sum(total_item_revenue) as total_drink_revenue_per_hour,\r\n        round(sum(total_item_revenue) / nullif(sum(quantity), 0), 2) as avg_revenue_per_drink_item_per_hour,\r\n        count(distinct item_uuid) as unique_drink_items_ordered_per_hour,\r\n        count(distinct category) as drink_category_diversity_per_hour\r\n    from base\r\n    group by order_hour_dt, order_date, hour_of_day\r\n)\r\n\r\n\r\nselect\r\n    d.order_hour_dt,\r\n    d.order_date,\r\n    d.hour_of_day,\r\n    d.total_drink_items_ordered_per_hour,\r\n    d.total_drink_revenue_per_hour,\r\n    d.avg_revenue_per_drink_item_per_hour,\r\n    td.top_drink_category_name_per_hour,\r\n    td.top_drink_category_revenue_per_hour,\r\n    round(td.top_drink_category_revenue_per_hour / nullif(d.total_drink_revenue_per_hour, 0), 2) as pct_top_drink_cat_of_drink_revenue_per_hour,\r\n    d.distinct_drink_tables_per_hour,\r\n    d.open_table_ids_per_hour,\r\n    d.total_drink_orders_per_hour,\r\n    round(d.total_drink_revenue_per_hour / nullif(d.total_drink_orders_per_hour, 0), 2) as avg_revenue_per_drink_order_per_hour,\r\n    round(d.total_drink_items_ordered_per_hour / nullif(d.total_drink_orders_per_hour, 0), 2) as avg_items_per_drink_order_per_hour,\r\n    cc.total_mains_ordered_per_hour as new_customers_per_hour,\r\n    coalesce(round(d.total_drink_items_ordered_per_hour / nullif(cc.total_mains_ordered_per_hour, 0), 2), 0) as avg_drink_items_per_head_per_hour,\r\n    coalesce(round(d.total_drink_revenue_per_hour / nullif(cc.total_mains_ordered_per_hour, 0), 2), 0) as avg_drink_revenue_per_head_per_hour,\r\n    d.unique_drink_items_ordered_per_hour,\r\n    d.drink_category_diversity_per_hour,\r\n    b.bar_hour_rank <= 2 as is_bar_peak_hour,\r\n    case \r\n      when extract(dayofweek from d.order_date) in (1, 6, 7) then true\r\n      else false\r\n    end as is_weekend\r\nfrom drink_agg d\r\nleft join top_drink_category td on d.order_hour_dt = td.order_hour_dt and td.rnk = 1\r\nleft join bar_peak_hours b on d.order_hour_dt = b.order_hour_dt\r\nleft join {{ ref('agg_customer_counts') }} cc on d.order_hour_dt = cc.order_hour_dt\r\norder by d.order_hour_dt desc", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "agg_customer_counts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.restaurant_data_analytics.fct_orders", "model.restaurant_data_analytics.agg_customer_counts"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\agg_hourly_drink_sales.sql", "compiled": true, "compiled_code": "with base as (\n    select\n        datetime_trunc(datetime_ordered, hour) as order_hour_dt,\n        date(datetime_ordered) as order_date,\n        extract(hour from datetime_ordered) as hour_of_day,\n        order_uuid,\n        table_no,\n        item_uuid,\n        quantity,\n        total_item_revenue,\n        price,\n        category\n    from `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\n    where production_department = 'bar'\n),\n\ntop_drink_category as (\n    select\n        order_hour_dt,\n        category as top_drink_category_name_per_hour,\n        sum(quantity * price) as top_drink_category_revenue_per_hour,\n        rank() over (partition by order_hour_dt order by sum(quantity * price) desc) as rnk\n    from base\n    group by order_hour_dt, category\n),\n\nbar_peak_hours as (\n    select\n        order_hour_dt,\n        row_number() over (partition by order_date order by sum(quantity) desc) as bar_hour_rank\n    from base\n    group by order_hour_dt, order_date\n),\n\ndrink_agg as (\n    select\n        order_hour_dt,\n        order_date,\n        hour_of_day,\n        count(distinct table_no) as distinct_drink_tables_per_hour,\n        array_to_string(array_agg(distinct cast(table_no as string) order by table_no), ',') as open_table_ids_per_hour,\n        count(distinct order_uuid) as total_drink_orders_per_hour,\n        sum(quantity) as total_drink_items_ordered_per_hour,\n        sum(total_item_revenue) as total_drink_revenue_per_hour,\n        round(sum(total_item_revenue) / nullif(sum(quantity), 0), 2) as avg_revenue_per_drink_item_per_hour,\n        count(distinct item_uuid) as unique_drink_items_ordered_per_hour,\n        count(distinct category) as drink_category_diversity_per_hour\n    from base\n    group by order_hour_dt, order_date, hour_of_day\n)\n\n\nselect\n    d.order_hour_dt,\n    d.order_date,\n    d.hour_of_day,\n    d.total_drink_items_ordered_per_hour,\n    d.total_drink_revenue_per_hour,\n    d.avg_revenue_per_drink_item_per_hour,\n    td.top_drink_category_name_per_hour,\n    td.top_drink_category_revenue_per_hour,\n    round(td.top_drink_category_revenue_per_hour / nullif(d.total_drink_revenue_per_hour, 0), 2) as pct_top_drink_cat_of_drink_revenue_per_hour,\n    d.distinct_drink_tables_per_hour,\n    d.open_table_ids_per_hour,\n    d.total_drink_orders_per_hour,\n    round(d.total_drink_revenue_per_hour / nullif(d.total_drink_orders_per_hour, 0), 2) as avg_revenue_per_drink_order_per_hour,\n    round(d.total_drink_items_ordered_per_hour / nullif(d.total_drink_orders_per_hour, 0), 2) as avg_items_per_drink_order_per_hour,\n    cc.total_mains_ordered_per_hour as new_customers_per_hour,\n    coalesce(round(d.total_drink_items_ordered_per_hour / nullif(cc.total_mains_ordered_per_hour, 0), 2), 0) as avg_drink_items_per_head_per_hour,\n    coalesce(round(d.total_drink_revenue_per_hour / nullif(cc.total_mains_ordered_per_hour, 0), 2), 0) as avg_drink_revenue_per_head_per_hour,\n    d.unique_drink_items_ordered_per_hour,\n    d.drink_category_diversity_per_hour,\n    b.bar_hour_rank <= 2 as is_bar_peak_hour,\n    case \n      when extract(dayofweek from d.order_date) in (1, 6, 7) then true\n      else false\n    end as is_weekend\nfrom drink_agg d\nleft join top_drink_category td on d.order_hour_dt = td.order_hour_dt and td.rnk = 1\nleft join bar_peak_hours b on d.order_hour_dt = b.order_hour_dt\nleft join `annular-mesh-453913-r6`.`dbt_`.`agg_customer_counts` cc on d.order_hour_dt = cc.order_hour_dt\norder by d.order_hour_dt desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_hour_dt"], "time_spine": null}, "model.restaurant_data_analytics.agg_hourly_food_sales": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "agg_hourly_food_sales", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "marts\\core\\sales\\agg_hourly_food_sales.sql", "original_file_path": "models\\marts\\core\\sales\\agg_hourly_food_sales.sql", "unique_id": "model.restaurant_data_analytics.agg_hourly_food_sales", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "agg_hourly_food_sales"], "alias": "agg_hourly_food_sales", "checksum": {"name": "sha256", "checksum": "2296512835daa975a1d385b45eff2e6cd75cd0b53e551d437a821569eadbd271"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["sales", "hourly", "food"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["sales", "hourly", "food"], "description": "Hourly-level aggregate of kitchen sales metrics including revenue, volume, category performance, and customer-level averages using mains ordered as a proxy.\n", "columns": {"order_hour_dt": {"name": "order_hour_dt", "description": "The timestamp truncated to the hour (used for time-based grouping).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_date": {"name": "order_date", "description": "Date of the orders in this hourly window.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "hour_of_day": {"name": "hour_of_day", "description": "Hour of the day (0\u201323).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_food_items_ordered_per_hour": {"name": "total_food_items_ordered_per_hour", "description": "Total number of food items ordered during the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_food_revenue_per_hour": {"name": "total_food_revenue_per_hour", "description": "Total revenue from food ordered during the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_revenue_per_food_item_per_hour": {"name": "avg_revenue_per_food_item_per_hour", "description": "Average revenue per food item ordered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_food_category_name_per_hour": {"name": "top_food_category_name_per_hour", "description": "Top-selling food category during the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_food_category_revenue_per_hour": {"name": "top_food_category_revenue_per_hour", "description": "Revenue generated by the top-selling food category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pct_top_food_cat_of_food_revenue_per_hour": {"name": "pct_top_food_cat_of_food_revenue_per_hour", "description": "Percentage of food revenue from the top food category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "distinct_food_tables_per_hour": {"name": "distinct_food_tables_per_hour", "description": "Number of unique tables that placed food orders during the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "open_table_ids_per_hour": {"name": "open_table_ids_per_hour", "description": "Comma-separated list of all distinct table numbers (from food and drink orders) for the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_mains_ordered_per_hour": {"name": "total_mains_ordered_per_hour", "description": "Count of mains ordered, used as a proxy for customer count.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_food_revenue_per_head_per_hour": {"name": "avg_food_revenue_per_head_per_hour", "description": "Average food spend per main ordered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_food_items_per_head_per_hour": {"name": "avg_food_items_per_head_per_hour", "description": "Average number of food items per main ordered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_food_orders_per_hour": {"name": "total_food_orders_per_hour", "description": "Number of unique food orders placed during the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_revenue_per_food_order_per_hour": {"name": "avg_revenue_per_food_order_per_hour", "description": "Average food revenue per order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_items_per_food_order_per_hour": {"name": "avg_items_per_food_order_per_hour", "description": "Average number of food items per order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "unique_food_items_ordered_per_hour": {"name": "unique_food_items_ordered_per_hour", "description": "Number of distinct food items sold during the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "food_category_diversity_per_hour": {"name": "food_category_diversity_per_hour", "description": "Number of unique food categories sold during the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_weekend": {"name": "is_weekend", "description": "Flag indicating if the hour falls on a weekend (Fri\u2013Sun).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_kitchen_peak_hour": {"name": "is_kitchen_peak_hour", "description": "True if the hour was among the top 2 kitchen hours by volume for the day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "restaurant_data_analytics://models\\marts\\core\\sales\\sales.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["sales", "hourly", "food"]}, "created_at": 1747516849.335731, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`", "raw_code": "with base as (\r\n    select\r\n        datetime_trunc(datetime_ordered, hour) as order_hour_dt,\r\n        date(datetime_ordered) as order_date,\r\n        extract(hour from datetime_ordered) as hour_of_day,\r\n        order_uuid,\r\n        table_no,\r\n        item_uuid,\r\n        quantity,\r\n        total_item_revenue,\r\n        price,\r\n        category\r\n    from {{ ref('fct_orders') }}\r\n    where production_department = 'kitchen'\r\n),\r\n\r\ntop_food_category as (\r\n    select\r\n        order_hour_dt,\r\n        category as top_food_category_name_per_hour,\r\n        sum(quantity * price) as top_food_category_revenue_per_hour,\r\n        rank() over (partition by order_hour_dt order by sum(quantity * price) desc) as rnk\r\n    from base\r\n    group by order_hour_dt, category\r\n),\r\n\r\nkitchen_peak_hours as (\r\n    select\r\n        order_hour_dt,\r\n        row_number() over (partition by order_date order by sum(quantity) desc) as kitchen_hour_rank\r\n    from base\r\n    group by order_hour_dt, order_date\r\n),\r\n\r\nfood_agg as (\r\n    select\r\n        order_hour_dt,\r\n        order_date,\r\n        hour_of_day,\r\n        count(distinct table_no) as distinct_food_tables_per_hour,\r\n        array_to_string(array_agg(distinct cast(table_no as string) order by table_no), ',') as open_table_ids_per_hour,\r\n        count(distinct order_uuid) as total_food_orders_per_hour,\r\n        sum(quantity) as total_food_items_ordered_per_hour,\r\n        round(sum(total_item_revenue), 2) as total_food_revenue_per_hour,\r\n        round(sum(total_item_revenue) / nullif(sum(quantity), 0), 2) as avg_revenue_per_food_item_per_hour,\r\n        count(distinct item_uuid) as unique_food_items_ordered_per_hour,\r\n        count(distinct category) as food_category_diversity_per_hour\r\n    from base\r\n    group by order_hour_dt, order_date, hour_of_day\r\n)\r\n\r\n\r\nselect\r\n    f.order_hour_dt,\r\n    f.order_date,\r\n    f.hour_of_day,\r\n    f.total_food_items_ordered_per_hour,\r\n    f.total_food_revenue_per_hour,\r\n    f.avg_revenue_per_food_item_per_hour,\r\n    tf.top_food_category_name_per_hour,\r\n    tf.top_food_category_revenue_per_hour,\r\n    coalesce(round(tf.top_food_category_revenue_per_hour / nullif(f.total_food_revenue_per_hour, 0), 2),0) as pct_top_food_cat_of_food_revenue_per_hour,\r\n    f.distinct_food_tables_per_hour,\r\n    f.open_table_ids_per_hour,\r\n    coalesce(cc.total_mains_ordered_per_hour, 0) as total_mains_ordered_per_hour,\r\n    coalesce(round(f.total_food_revenue_per_hour / nullif(cc.total_mains_ordered_per_hour, 0), 2),0) as avg_food_revenue_per_head_per_hour,\r\n    coalesce(round(f.total_food_items_ordered_per_hour / nullif(cc.total_mains_ordered_per_hour, 0), 2), 0) as avg_food_items_per_head_per_hour,\r\n    f.total_food_orders_per_hour,\r\n    coalesce(round(f.total_food_revenue_per_hour / nullif(f.total_food_orders_per_hour, 0), 2),0) as avg_revenue_per_food_order_per_hour,\r\n    coalesce(round(f.total_food_items_ordered_per_hour / nullif(f.total_food_orders_per_hour, 0), 2),0) as avg_items_per_food_order_per_hour,\r\n    f.unique_food_items_ordered_per_hour,\r\n    f.food_category_diversity_per_hour,\r\n    (k.kitchen_hour_rank <= 2) as is_kitchen_peak_hour,\r\n    case \r\n      when extract(dayofweek from f.order_date) in (1, 6, 7) then true\r\n      else false\r\n    end as is_weekend\r\nfrom food_agg f\r\nleft join top_food_category tf on f.order_hour_dt = tf.order_hour_dt and tf.rnk = 1\r\nleft join kitchen_peak_hours k on f.order_hour_dt = k.order_hour_dt\r\nleft join {{ ref('agg_customer_counts') }} cc on f.order_hour_dt = cc.order_hour_dt\r\norder by f.order_hour_dt desc", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "agg_customer_counts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.restaurant_data_analytics.fct_orders", "model.restaurant_data_analytics.agg_customer_counts"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\agg_hourly_food_sales.sql", "compiled": true, "compiled_code": "with base as (\n    select\n        datetime_trunc(datetime_ordered, hour) as order_hour_dt,\n        date(datetime_ordered) as order_date,\n        extract(hour from datetime_ordered) as hour_of_day,\n        order_uuid,\n        table_no,\n        item_uuid,\n        quantity,\n        total_item_revenue,\n        price,\n        category\n    from `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\n    where production_department = 'kitchen'\n),\n\ntop_food_category as (\n    select\n        order_hour_dt,\n        category as top_food_category_name_per_hour,\n        sum(quantity * price) as top_food_category_revenue_per_hour,\n        rank() over (partition by order_hour_dt order by sum(quantity * price) desc) as rnk\n    from base\n    group by order_hour_dt, category\n),\n\nkitchen_peak_hours as (\n    select\n        order_hour_dt,\n        row_number() over (partition by order_date order by sum(quantity) desc) as kitchen_hour_rank\n    from base\n    group by order_hour_dt, order_date\n),\n\nfood_agg as (\n    select\n        order_hour_dt,\n        order_date,\n        hour_of_day,\n        count(distinct table_no) as distinct_food_tables_per_hour,\n        array_to_string(array_agg(distinct cast(table_no as string) order by table_no), ',') as open_table_ids_per_hour,\n        count(distinct order_uuid) as total_food_orders_per_hour,\n        sum(quantity) as total_food_items_ordered_per_hour,\n        round(sum(total_item_revenue), 2) as total_food_revenue_per_hour,\n        round(sum(total_item_revenue) / nullif(sum(quantity), 0), 2) as avg_revenue_per_food_item_per_hour,\n        count(distinct item_uuid) as unique_food_items_ordered_per_hour,\n        count(distinct category) as food_category_diversity_per_hour\n    from base\n    group by order_hour_dt, order_date, hour_of_day\n)\n\n\nselect\n    f.order_hour_dt,\n    f.order_date,\n    f.hour_of_day,\n    f.total_food_items_ordered_per_hour,\n    f.total_food_revenue_per_hour,\n    f.avg_revenue_per_food_item_per_hour,\n    tf.top_food_category_name_per_hour,\n    tf.top_food_category_revenue_per_hour,\n    coalesce(round(tf.top_food_category_revenue_per_hour / nullif(f.total_food_revenue_per_hour, 0), 2),0) as pct_top_food_cat_of_food_revenue_per_hour,\n    f.distinct_food_tables_per_hour,\n    f.open_table_ids_per_hour,\n    coalesce(cc.total_mains_ordered_per_hour, 0) as total_mains_ordered_per_hour,\n    coalesce(round(f.total_food_revenue_per_hour / nullif(cc.total_mains_ordered_per_hour, 0), 2),0) as avg_food_revenue_per_head_per_hour,\n    coalesce(round(f.total_food_items_ordered_per_hour / nullif(cc.total_mains_ordered_per_hour, 0), 2), 0) as avg_food_items_per_head_per_hour,\n    f.total_food_orders_per_hour,\n    coalesce(round(f.total_food_revenue_per_hour / nullif(f.total_food_orders_per_hour, 0), 2),0) as avg_revenue_per_food_order_per_hour,\n    coalesce(round(f.total_food_items_ordered_per_hour / nullif(f.total_food_orders_per_hour, 0), 2),0) as avg_items_per_food_order_per_hour,\n    f.unique_food_items_ordered_per_hour,\n    f.food_category_diversity_per_hour,\n    (k.kitchen_hour_rank <= 2) as is_kitchen_peak_hour,\n    case \n      when extract(dayofweek from f.order_date) in (1, 6, 7) then true\n      else false\n    end as is_weekend\nfrom food_agg f\nleft join top_food_category tf on f.order_hour_dt = tf.order_hour_dt and tf.rnk = 1\nleft join kitchen_peak_hours k on f.order_hour_dt = k.order_hour_dt\nleft join `annular-mesh-453913-r6`.`dbt_`.`agg_customer_counts` cc on f.order_hour_dt = cc.order_hour_dt\norder by f.order_hour_dt desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_hour_dt"], "time_spine": null}, "model.restaurant_data_analytics.agg_hourly_total_sales": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "agg_hourly_total_sales", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "marts\\core\\sales\\agg_hourly_total_sales.sql", "original_file_path": "models\\marts\\core\\sales\\agg_hourly_total_sales.sql", "unique_id": "model.restaurant_data_analytics.agg_hourly_total_sales", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "agg_hourly_total_sales"], "alias": "agg_hourly_total_sales", "checksum": {"name": "sha256", "checksum": "93abcfd1cb8bf3e84440def6d6058ed5e411e07087f2ad303b09ca2fb004034d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["sales", "hourly", "kpis", "agg", "hourly", "total"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["agg", "hourly", "total", "sales", "kpis"], "description": "Hourly aggregate combining food and drink metrics, including total revenue, item volume, top category, peak hour indicators, and spend per customer.\n", "columns": {"order_hour_dt": {"name": "order_hour_dt", "description": "The timestamp truncated to the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_date": {"name": "order_date", "description": "Date of the sales in this hourly window.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "hour_of_day": {"name": "hour_of_day", "description": "Hour of the day (0\u201323).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_items_ordered_per_hour": {"name": "total_items_ordered_per_hour", "description": "Total number of items (food + drink) sold during the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_revenue_per_hour": {"name": "total_revenue_per_hour", "description": "Total revenue from food and drink during the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_revenue_per_item_per_hour": {"name": "avg_revenue_per_item_per_hour", "description": "Average revenue per item (food or drink) sold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pct_food_revenue_per_hour": {"name": "pct_food_revenue_per_hour", "description": "Percentage of total hourly revenue from food.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pct_drink_revenue_per_hour": {"name": "pct_drink_revenue_per_hour", "description": "Percentage of total hourly revenue from drink.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_category_name_per_hour": {"name": "top_category_name_per_hour", "description": "Top-selling category by revenue (from either food or drink).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_category_revenue_per_hour": {"name": "top_category_revenue_per_hour", "description": "Revenue generated by the top-selling category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pct_top_cat_of_total_revenue_per_hour": {"name": "pct_top_cat_of_total_revenue_per_hour", "description": "Percentage of total hourly revenue generated by the top-selling category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "distinct_tables_per_hour": {"name": "distinct_tables_per_hour", "description": "Number of unique tables that placed orders during the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "open_table_ids_per_hour": {"name": "open_table_ids_per_hour", "description": "Comma-separated list of all distinct table numbers (from food and drink orders) for the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_new_customers_per_hour": {"name": "total_new_customers_per_hour", "description": "Estimated number of customers (based on total mains ordered).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_revenue_per_head_per_hour": {"name": "avg_revenue_per_head_per_hour", "description": "Average revenue per customer for the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_items_ordered_per_head_per_hour": {"name": "avg_items_ordered_per_head_per_hour", "description": "Average number of items ordered per customer for the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_orders_per_hour": {"name": "total_orders_per_hour", "description": "Total number of orders (food + drink) placed during the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_revenue_per_order_per_hour": {"name": "avg_revenue_per_order_per_hour", "description": "Average revenue per order per hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_items_per_order_per_hour": {"name": "avg_items_per_order_per_hour", "description": "Average number of items per order per hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "unique_items_ordered_per_hour": {"name": "unique_items_ordered_per_hour", "description": "Total number of unique food and drink items sold during the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "category_diversity_per_hour": {"name": "category_diversity_per_hour", "description": "Number of unique categories (food + drink) sold during the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_weekend": {"name": "is_weekend", "description": "Flag indicating if the hour falls on a weekend (Fri\u2013Sun).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_peak_hour": {"name": "is_peak_hour", "description": "True if either food and drink were in peak performance for the hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "restaurant_data_analytics://models\\marts\\core\\sales\\sales.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["agg", "hourly", "total"]}, "created_at": 1747516849.3477414, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`", "raw_code": "{{ config(\r\n    tags=['agg', 'hourly', 'total'],\r\n    materialized='table'\r\n) }}\r\n\r\n-- Food hourly metrics\r\nwith food as (\r\n    select *\r\n    from {{ ref('agg_hourly_food_sales') }}\r\n),\r\n\r\n-- Drink hourly metrics\r\ndrink as (\r\n    select *\r\n    from {{ ref('agg_hourly_drink_sales') }}\r\n),\r\n\r\n-- Combine food + drink metrics on shared hour\r\ncombined as (\r\n    select\r\n        f.order_hour_dt,\r\n        f.order_date,\r\n        f.hour_of_day,\r\n        f.total_food_items_ordered_per_hour,\r\n        d.total_drink_items_ordered_per_hour,\r\n        f.total_food_revenue_per_hour,\r\n        d.total_drink_revenue_per_hour,\r\n        f.top_food_category_name_per_hour,\r\n        f.top_food_category_revenue_per_hour,\r\n        d.top_drink_category_name_per_hour,\r\n        d.top_drink_category_revenue_per_hour,\r\n        f.total_mains_ordered_per_hour,  -- used as a proxy for total customers (1 customer = 1 main)\r\n        f.total_food_orders_per_hour as food_orders,\r\n        d.total_drink_orders_per_hour as drink_orders,\r\n        f.unique_food_items_ordered_per_hour,\r\n        d.unique_drink_items_ordered_per_hour,\r\n        f.food_category_diversity_per_hour,\r\n        d.drink_category_diversity_per_hour,\r\n        f.is_kitchen_peak_hour,\r\n        d.is_bar_peak_hour,\r\n        array_to_string(\r\n            array(\r\n                select distinct t\r\n                from unnest(\r\n                    split(coalesce(f.open_table_ids_per_hour, '') || ',' || coalesce(d.open_table_ids_per_hour, ''), ',')\r\n                ) as t\r\n                where safe_cast(t as int) is not null\r\n                order by cast(t as int)\r\n            ),\r\n            ','\r\n        ) as open_table_ids_per_hour\r\n    from food f\r\n    join drink d on f.order_hour_dt = d.order_hour_dt\r\n)\r\n\r\nselect\r\n    order_hour_dt,\r\n    order_date,\r\n    hour_of_day,\r\n    \r\n    -- Total items ordered: food plus drink\r\n    (total_food_items_ordered_per_hour + total_drink_items_ordered_per_hour) as total_items_ordered_per_hour,\r\n    \r\n    -- Total revenue: food plus drink\r\n    (total_food_revenue_per_hour + total_drink_revenue_per_hour) as total_revenue_per_hour,\r\n    \r\n    -- Average revenue per item: total revenue divided by total items ordered\r\n    round((total_food_revenue_per_hour + total_drink_revenue_per_hour) /\r\n          nullif((total_food_items_ordered_per_hour + total_drink_items_ordered_per_hour), 0), 2) as avg_revenue_per_item_per_hour,\r\n    \r\n    -- Percentage of total revenue from food\r\n    round(total_food_revenue_per_hour /\r\n          nullif((total_food_revenue_per_hour + total_drink_revenue_per_hour), 0), 2) as pct_food_revenue_per_hour,\r\n    \r\n    -- Percentage of total revenue from drink\r\n    round(total_drink_revenue_per_hour /\r\n          nullif((total_food_revenue_per_hour + total_drink_revenue_per_hour), 0), 2) as pct_drink_revenue_per_hour,\r\n    \r\n    -- Determine the top category based on which revenue is higher (food or drink)\r\n    case \r\n      when top_food_category_revenue_per_hour >= top_drink_category_revenue_per_hour then top_food_category_name_per_hour\r\n      else top_drink_category_name_per_hour\r\n    end as top_category_name_per_hour,\r\n    \r\n    case \r\n      when top_food_category_revenue_per_hour >= top_drink_category_revenue_per_hour then top_food_category_revenue_per_hour\r\n      else top_drink_category_revenue_per_hour\r\n    end as top_category_revenue_per_hour,\r\n    \r\n    -- Percentage of total revenue contributed by the top category\r\n    round(\r\n      case \r\n        when top_food_category_revenue_per_hour >= top_drink_category_revenue_per_hour then top_food_category_revenue_per_hour\r\n        else top_drink_category_revenue_per_hour\r\n      end / nullif((total_food_revenue_per_hour + total_drink_revenue_per_hour), 0), 2\r\n    ) as pct_top_cat_of_total_revenue_per_hour,\r\n    \r\n    -- Total customers per hour (using mains ordered as a proxy)\r\n    total_mains_ordered_per_hour as total_new_customers_per_hour,\r\n    \r\n    -- Average revenue per head: total revenue divided by total customers\r\n    coalesce(\r\n        round((total_food_revenue_per_hour + total_drink_revenue_per_hour) /\r\n              nullif(total_mains_ordered_per_hour, 0), 2)\r\n    ) as avg_revenue_per_head_per_hour,\r\n    \r\n    -- Average revenue per order: total revenue divided by total (food + drink) orders\r\n    round((total_food_revenue_per_hour + total_drink_revenue_per_hour) /\r\n        nullif((food_orders + drink_orders), 0), 2\r\n    ) as avg_revenue_per_order_per_hour,\r\n\r\n    -- Average items ordered per head: total items divided by total customers\r\n    coalesce(\r\n        round((total_food_items_ordered_per_hour + total_drink_items_ordered_per_hour) /\r\n              nullif(total_mains_ordered_per_hour, 0), 2)\r\n    ) as avg_items_ordered_per_head_per_hour,\r\n\r\n    -- Average items per order: total items divided by total (food + drink) orders\r\n    round((total_food_items_ordered_per_hour + total_drink_items_ordered_per_hour) /\r\n      nullif((food_orders + drink_orders), 0), 2) as avg_items_per_order_per_hour,\r\n    \r\n    -- Total orders per hour (sum of unique food and drink orders)\r\n    (food_orders + drink_orders) as total_orders_per_hour,\r\n    \r\n    -- Unique items ordered (sum from food and drink; note: this is a naive summation)\r\n    (unique_food_items_ordered_per_hour + unique_drink_items_ordered_per_hour) as unique_items_ordered_per_hour,\r\n    \r\n    -- Category diversity: sum of unique categories from food and drink\r\n    (food_category_diversity_per_hour + drink_category_diversity_per_hour) as category_diversity_per_hour,\r\n\r\n    -- Recalculated distinct tables from open_table_ids list\r\n    array_length(split(open_table_ids_per_hour, ',')) as distinct_tables_per_hour,\r\n\r\n    -- Full list of distinct table numbers as a CSV string\r\n    open_table_ids_per_hour,\r\n\r\n    -- is_weekend: true if the order_date falls on Friday, Saturday, or Sunday.\r\n    case \r\n      when extract(dayofweek from order_date) in (1, 6, 7) then true\r\n      else false\r\n    end as is_weekend,\r\n    \r\n    -- is_peak_hour: true if either model show a peak hour indicator\r\n    (is_kitchen_peak_hour or is_bar_peak_hour) as is_peak_hour\r\n\r\nfrom combined\r\norder by order_hour_dt desc", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}, {"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales", "model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\agg_hourly_total_sales.sql", "compiled": true, "compiled_code": "\n\n-- Food hourly metrics\nwith food as (\n    select *\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n),\n\n-- Drink hourly metrics\ndrink as (\n    select *\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n),\n\n-- Combine food + drink metrics on shared hour\ncombined as (\n    select\n        f.order_hour_dt,\n        f.order_date,\n        f.hour_of_day,\n        f.total_food_items_ordered_per_hour,\n        d.total_drink_items_ordered_per_hour,\n        f.total_food_revenue_per_hour,\n        d.total_drink_revenue_per_hour,\n        f.top_food_category_name_per_hour,\n        f.top_food_category_revenue_per_hour,\n        d.top_drink_category_name_per_hour,\n        d.top_drink_category_revenue_per_hour,\n        f.total_mains_ordered_per_hour,  -- used as a proxy for total customers (1 customer = 1 main)\n        f.total_food_orders_per_hour as food_orders,\n        d.total_drink_orders_per_hour as drink_orders,\n        f.unique_food_items_ordered_per_hour,\n        d.unique_drink_items_ordered_per_hour,\n        f.food_category_diversity_per_hour,\n        d.drink_category_diversity_per_hour,\n        f.is_kitchen_peak_hour,\n        d.is_bar_peak_hour,\n        array_to_string(\n            array(\n                select distinct t\n                from unnest(\n                    split(coalesce(f.open_table_ids_per_hour, '') || ',' || coalesce(d.open_table_ids_per_hour, ''), ',')\n                ) as t\n                where safe_cast(t as int) is not null\n                order by cast(t as int)\n            ),\n            ','\n        ) as open_table_ids_per_hour\n    from food f\n    join drink d on f.order_hour_dt = d.order_hour_dt\n)\n\nselect\n    order_hour_dt,\n    order_date,\n    hour_of_day,\n    \n    -- Total items ordered: food plus drink\n    (total_food_items_ordered_per_hour + total_drink_items_ordered_per_hour) as total_items_ordered_per_hour,\n    \n    -- Total revenue: food plus drink\n    (total_food_revenue_per_hour + total_drink_revenue_per_hour) as total_revenue_per_hour,\n    \n    -- Average revenue per item: total revenue divided by total items ordered\n    round((total_food_revenue_per_hour + total_drink_revenue_per_hour) /\n          nullif((total_food_items_ordered_per_hour + total_drink_items_ordered_per_hour), 0), 2) as avg_revenue_per_item_per_hour,\n    \n    -- Percentage of total revenue from food\n    round(total_food_revenue_per_hour /\n          nullif((total_food_revenue_per_hour + total_drink_revenue_per_hour), 0), 2) as pct_food_revenue_per_hour,\n    \n    -- Percentage of total revenue from drink\n    round(total_drink_revenue_per_hour /\n          nullif((total_food_revenue_per_hour + total_drink_revenue_per_hour), 0), 2) as pct_drink_revenue_per_hour,\n    \n    -- Determine the top category based on which revenue is higher (food or drink)\n    case \n      when top_food_category_revenue_per_hour >= top_drink_category_revenue_per_hour then top_food_category_name_per_hour\n      else top_drink_category_name_per_hour\n    end as top_category_name_per_hour,\n    \n    case \n      when top_food_category_revenue_per_hour >= top_drink_category_revenue_per_hour then top_food_category_revenue_per_hour\n      else top_drink_category_revenue_per_hour\n    end as top_category_revenue_per_hour,\n    \n    -- Percentage of total revenue contributed by the top category\n    round(\n      case \n        when top_food_category_revenue_per_hour >= top_drink_category_revenue_per_hour then top_food_category_revenue_per_hour\n        else top_drink_category_revenue_per_hour\n      end / nullif((total_food_revenue_per_hour + total_drink_revenue_per_hour), 0), 2\n    ) as pct_top_cat_of_total_revenue_per_hour,\n    \n    -- Total customers per hour (using mains ordered as a proxy)\n    total_mains_ordered_per_hour as total_new_customers_per_hour,\n    \n    -- Average revenue per head: total revenue divided by total customers\n    coalesce(\n        round((total_food_revenue_per_hour + total_drink_revenue_per_hour) /\n              nullif(total_mains_ordered_per_hour, 0), 2)\n    ) as avg_revenue_per_head_per_hour,\n    \n    -- Average revenue per order: total revenue divided by total (food + drink) orders\n    round((total_food_revenue_per_hour + total_drink_revenue_per_hour) /\n        nullif((food_orders + drink_orders), 0), 2\n    ) as avg_revenue_per_order_per_hour,\n\n    -- Average items ordered per head: total items divided by total customers\n    coalesce(\n        round((total_food_items_ordered_per_hour + total_drink_items_ordered_per_hour) /\n              nullif(total_mains_ordered_per_hour, 0), 2)\n    ) as avg_items_ordered_per_head_per_hour,\n\n    -- Average items per order: total items divided by total (food + drink) orders\n    round((total_food_items_ordered_per_hour + total_drink_items_ordered_per_hour) /\n      nullif((food_orders + drink_orders), 0), 2) as avg_items_per_order_per_hour,\n    \n    -- Total orders per hour (sum of unique food and drink orders)\n    (food_orders + drink_orders) as total_orders_per_hour,\n    \n    -- Unique items ordered (sum from food and drink; note: this is a naive summation)\n    (unique_food_items_ordered_per_hour + unique_drink_items_ordered_per_hour) as unique_items_ordered_per_hour,\n    \n    -- Category diversity: sum of unique categories from food and drink\n    (food_category_diversity_per_hour + drink_category_diversity_per_hour) as category_diversity_per_hour,\n\n    -- Recalculated distinct tables from open_table_ids list\n    array_length(split(open_table_ids_per_hour, ',')) as distinct_tables_per_hour,\n\n    -- Full list of distinct table numbers as a CSV string\n    open_table_ids_per_hour,\n\n    -- is_weekend: true if the order_date falls on Friday, Saturday, or Sunday.\n    case \n      when extract(dayofweek from order_date) in (1, 6, 7) then true\n      else false\n    end as is_weekend,\n    \n    -- is_peak_hour: true if either model show a peak hour indicator\n    (is_kitchen_peak_hour or is_bar_peak_hour) as is_peak_hour\n\nfrom combined\norder by order_hour_dt desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_hour_dt"], "time_spine": null}, "model.restaurant_data_analytics.agg_monthly_drink_sales": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "agg_monthly_drink_sales", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "marts\\core\\sales\\agg_monthly_drink_sales.sql", "original_file_path": "models\\marts\\core\\sales\\agg_monthly_drink_sales.sql", "unique_id": "model.restaurant_data_analytics.agg_monthly_drink_sales", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "agg_monthly_drink_sales"], "alias": "agg_monthly_drink_sales", "checksum": {"name": "sha256", "checksum": "1325309164bc9e9929773560534fd202fe5c1332060d52b9e3828484c5f73c08"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["sales", "monthly", "drink", "agg"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["sales", "monthly", "drink", "agg"], "description": "Monthly aggregate of drink (bar) sales metrics including revenue, item volume, top category performance, customer estimates, and diversity indicators.\n", "columns": {"order_month": {"name": "order_month", "description": "Month of the aggregation in YYYY-MM format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_drink_items_sold_monthly": {"name": "total_drink_items_sold_monthly", "description": "Total number of drink items sold during the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_monthly_drink_revenue": {"name": "total_monthly_drink_revenue", "description": "Total revenue from drink sales during the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_monthly_revenue_per_drink_item": {"name": "avg_monthly_revenue_per_drink_item", "description": "Average revenue per drink item sold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_monthly_drink_category_name": {"name": "top_monthly_drink_category_name", "description": "Top-selling drink category over the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_monthly_drink_category_revenue": {"name": "top_monthly_drink_category_revenue", "description": "Revenue generated by the top-selling drink category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pct_top_drink_cat_from_monthly_drinks_revenue": {"name": "pct_top_drink_cat_from_monthly_drinks_revenue", "description": "Percentage of drink revenue from the top category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_distinct_drink_tables_per_day_monthly": {"name": "avg_distinct_drink_tables_per_day_monthly", "description": "Average number of distinct drink tables used per day in the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_drink_orders_monthly": {"name": "total_drink_orders_monthly", "description": "Total number of drink orders placed in the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_revenue_per_drinks_order_monthly": {"name": "avg_revenue_per_drinks_order_monthly", "description": "Average revenue per drink order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_items_per_drinks_order_monthly": {"name": "avg_items_per_drinks_order_monthly", "description": "Average number of drink items per order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_customers_monthly": {"name": "total_customers_monthly", "description": "Estimated number of unique customers based on food proxy.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_drinks_revenue_per_head_monthly": {"name": "avg_drinks_revenue_per_head_monthly", "description": "Average drink spend per estimated customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_drink_items_per_head_monthly": {"name": "avg_drink_items_per_head_monthly", "description": "Average number of drink items per customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "drink_category_diversity_monthly": {"name": "drink_category_diversity_monthly", "description": "Number of distinct drink categories sold over the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "unique_drink_items_ordered_monthly": {"name": "unique_drink_items_ordered_monthly", "description": "Total number of unique drink items sold during the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "restaurant_data_analytics://models\\marts\\core\\sales\\sales.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["sales", "monthly", "drink", "agg"]}, "created_at": 1747516849.4398248, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`", "raw_code": "with daily as (\r\n    select *\r\n    from {{ ref('agg_daily_drink_sales') }}\r\n),\r\n\r\nmetadata as (\r\n    select\r\n        order_month,\r\n        drink_category_diversity_all_month,\r\n        unique_drink_items_ordered_all_month\r\n    from {{ ref('agg_monthly_metadata') }}\r\n),\r\n\r\npeak_hours as (\r\n    select\r\n        format_date('%Y-%m', order_date) as order_month,\r\n        array_to_string(array_agg(distinct hour_str order by hour_str), ',') as bar_peak_hours_monthly\r\n    from (\r\n        select\r\n            order_date,\r\n            cast(hour as string) as hour_str\r\n        from {{ ref('agg_daily_drink_sales') }},\r\n        unnest(split(bar_peak_hours, ',')) as hour\r\n    )\r\n    group by order_month\r\n),\r\n\r\naggregated as (\r\n    select\r\n        format_date('%Y-%m', order_date) as order_month,\r\n        sum(total_drink_items_ordered_all_day) as total_drink_items_sold_monthly,\r\n        sum(total_daily_drink_revenue) as total_monthly_drink_revenue,\r\n        round(sum(total_daily_drink_revenue) / nullif(sum(total_drink_items_ordered_all_day), 0), 2) as avg_monthly_revenue_per_drink_item,\r\n\r\n        max_by(top_daily_drink_category_name, top_daily_drink_category_revenue) as top_monthly_drink_category_name,\r\n        max(top_daily_drink_category_revenue) as top_monthly_drink_category_revenue,\r\n        round(\r\n            max(top_daily_drink_category_revenue) / nullif(sum(total_daily_drink_revenue), 0),\r\n            2\r\n        ) as pct_top_drink_cat_from_monthly_drinks_revenue,\r\n\r\n        round(avg(distinct_drink_tables_all_day), 2) as avg_distinct_drink_tables_per_day_monthly,\r\n        sum(total_drink_orders_all_day) as total_drink_orders_monthly,\r\n        round(sum(total_daily_drink_revenue) / nullif(sum(total_drink_orders_all_day), 0), 2) as avg_revenue_per_drinks_order_monthly,\r\n        round(sum(total_drink_items_ordered_all_day) / nullif(sum(total_drink_orders_all_day), 0), 2) as avg_items_per_drinks_order_monthly,\r\n\r\n        sum(total_customers_all_day) as total_customers_monthly,\r\n        round(sum(total_daily_drink_revenue) / nullif(sum(total_customers_all_day), 0), 2) as avg_drinks_revenue_per_head_monthly,\r\n        round(sum(total_drink_items_ordered_all_day) / nullif(sum(total_customers_all_day), 0), 2) as avg_drink_items_per_head_monthly\r\n\r\n    from daily\r\n    group by order_month\r\n)\r\n\r\nselect\r\n    a.order_month,\r\n    a.total_drink_items_sold_monthly,\r\n    a.total_monthly_drink_revenue,\r\n    a.avg_monthly_revenue_per_drink_item,\r\n    a.top_monthly_drink_category_name,\r\n    a.top_monthly_drink_category_revenue,\r\n    a.pct_top_drink_cat_from_monthly_drinks_revenue,\r\n    a.avg_distinct_drink_tables_per_day_monthly,\r\n    a.total_drink_orders_monthly,\r\n    a.avg_revenue_per_drinks_order_monthly,\r\n    a.avg_items_per_drinks_order_monthly,\r\n    a.total_customers_monthly,\r\n    a.avg_drinks_revenue_per_head_monthly,\r\n    a.avg_drink_items_per_head_monthly,\r\n    coalesce(m.drink_category_diversity_all_month, 0) as drink_category_diversity_monthly,\r\n    coalesce(m.unique_drink_items_ordered_all_month, 0) as unique_drink_items_ordered_monthly,\r\n    p.bar_peak_hours_monthly\r\nfrom aggregated a\r\nleft join metadata m using (order_month)\r\nleft join peak_hours p using (order_month)\r\norder by order_month desc", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}, {"name": "agg_monthly_metadata", "package": null, "version": null}, {"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales", "model.restaurant_data_analytics.agg_monthly_metadata"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\agg_monthly_drink_sales.sql", "compiled": true, "compiled_code": "with daily as (\n    select *\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n),\n\nmetadata as (\n    select\n        order_month,\n        drink_category_diversity_all_month,\n        unique_drink_items_ordered_all_month\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_metadata`\n),\n\npeak_hours as (\n    select\n        format_date('%Y-%m', order_date) as order_month,\n        array_to_string(array_agg(distinct hour_str order by hour_str), ',') as bar_peak_hours_monthly\n    from (\n        select\n            order_date,\n            cast(hour as string) as hour_str\n        from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`,\n        unnest(split(bar_peak_hours, ',')) as hour\n    )\n    group by order_month\n),\n\naggregated as (\n    select\n        format_date('%Y-%m', order_date) as order_month,\n        sum(total_drink_items_ordered_all_day) as total_drink_items_sold_monthly,\n        sum(total_daily_drink_revenue) as total_monthly_drink_revenue,\n        round(sum(total_daily_drink_revenue) / nullif(sum(total_drink_items_ordered_all_day), 0), 2) as avg_monthly_revenue_per_drink_item,\n\n        max_by(top_daily_drink_category_name, top_daily_drink_category_revenue) as top_monthly_drink_category_name,\n        max(top_daily_drink_category_revenue) as top_monthly_drink_category_revenue,\n        round(\n            max(top_daily_drink_category_revenue) / nullif(sum(total_daily_drink_revenue), 0),\n            2\n        ) as pct_top_drink_cat_from_monthly_drinks_revenue,\n\n        round(avg(distinct_drink_tables_all_day), 2) as avg_distinct_drink_tables_per_day_monthly,\n        sum(total_drink_orders_all_day) as total_drink_orders_monthly,\n        round(sum(total_daily_drink_revenue) / nullif(sum(total_drink_orders_all_day), 0), 2) as avg_revenue_per_drinks_order_monthly,\n        round(sum(total_drink_items_ordered_all_day) / nullif(sum(total_drink_orders_all_day), 0), 2) as avg_items_per_drinks_order_monthly,\n\n        sum(total_customers_all_day) as total_customers_monthly,\n        round(sum(total_daily_drink_revenue) / nullif(sum(total_customers_all_day), 0), 2) as avg_drinks_revenue_per_head_monthly,\n        round(sum(total_drink_items_ordered_all_day) / nullif(sum(total_customers_all_day), 0), 2) as avg_drink_items_per_head_monthly\n\n    from daily\n    group by order_month\n)\n\nselect\n    a.order_month,\n    a.total_drink_items_sold_monthly,\n    a.total_monthly_drink_revenue,\n    a.avg_monthly_revenue_per_drink_item,\n    a.top_monthly_drink_category_name,\n    a.top_monthly_drink_category_revenue,\n    a.pct_top_drink_cat_from_monthly_drinks_revenue,\n    a.avg_distinct_drink_tables_per_day_monthly,\n    a.total_drink_orders_monthly,\n    a.avg_revenue_per_drinks_order_monthly,\n    a.avg_items_per_drinks_order_monthly,\n    a.total_customers_monthly,\n    a.avg_drinks_revenue_per_head_monthly,\n    a.avg_drink_items_per_head_monthly,\n    coalesce(m.drink_category_diversity_all_month, 0) as drink_category_diversity_monthly,\n    coalesce(m.unique_drink_items_ordered_all_month, 0) as unique_drink_items_ordered_monthly,\n    p.bar_peak_hours_monthly\nfrom aggregated a\nleft join metadata m using (order_month)\nleft join peak_hours p using (order_month)\norder by order_month desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_month"], "time_spine": null}, "model.restaurant_data_analytics.agg_monthly_food_sales": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "agg_monthly_food_sales", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "marts\\core\\sales\\agg_monthly_food_sales.sql", "original_file_path": "models\\marts\\core\\sales\\agg_monthly_food_sales.sql", "unique_id": "model.restaurant_data_analytics.agg_monthly_food_sales", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "agg_monthly_food_sales"], "alias": "agg_monthly_food_sales", "checksum": {"name": "sha256", "checksum": "cb9fcf401e4f01b07ee8d7c02a5c4ec9eedcb058b08ed64263cb237b08b7ecd0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["sales", "monthly", "agg", "food"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["sales", "monthly", "agg", "food"], "description": "Monthly aggregation of kitchen (food) sales metrics, including revenue, volume, customer behavior, and category performance derived from daily food aggregates.\n", "columns": {"order_month": {"name": "order_month", "description": "Month of the aggregation in YYYY-MM format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_food_items_sold_monthly": {"name": "total_food_items_sold_monthly", "description": "Total number of food items sold during the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_monthly_food_revenue": {"name": "total_monthly_food_revenue", "description": "Total revenue generated from food during the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_monthly_revenue_per_food_item": {"name": "avg_monthly_revenue_per_food_item", "description": "Average revenue per food item sold during the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_monthly_food_category_name": {"name": "top_monthly_food_category_name", "description": "Top-selling food category during the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_monthly_food_category_revenue": {"name": "top_monthly_food_category_revenue", "description": "Revenue from the top food category during the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pct_top_food_cat_from_monthly_food_revenue": {"name": "pct_top_food_cat_from_monthly_food_revenue", "description": "Percentage of total food revenue from the top category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_distinct_food_tables_per_day_monthly": {"name": "avg_distinct_food_tables_per_day_monthly", "description": "Average number of unique food tables per day in the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_food_orders_monthly": {"name": "total_food_orders_monthly", "description": "Total number of food orders placed during the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_revenue_per_food_order_monthly": {"name": "avg_revenue_per_food_order_monthly", "description": "Average food revenue per order placed in the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_items_per_food_order_monthly": {"name": "avg_items_per_food_order_monthly", "description": "Average number of food items per order during the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_customers_monthly": {"name": "total_customers_monthly", "description": "Estimated number of food customers during the month (via mains ordered).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_food_revenue_per_head_monthly": {"name": "avg_food_revenue_per_head_monthly", "description": "Average food revenue per customer for the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_food_items_per_head_monthly": {"name": "avg_food_items_per_head_monthly", "description": "Average number of food items per customer during the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "food_category_diversity_monthly": {"name": "food_category_diversity_monthly", "description": "Total number of distinct food categories sold during the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "unique_food_items_ordered_monthly": {"name": "unique_food_items_ordered_monthly", "description": "Number of unique food items sold during the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "restaurant_data_analytics://models\\marts\\core\\sales\\sales.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["sales", "monthly", "agg", "food"]}, "created_at": 1747516849.4308178, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`", "raw_code": "with daily as (\r\n    select *\r\n    from {{ ref('agg_daily_food_sales') }}\r\n),\r\n\r\nmetadata as (\r\n    select\r\n        order_month,\r\n        food_category_diversity_all_month,\r\n        unique_food_items_ordered_all_month\r\n    from {{ ref('agg_monthly_metadata') }}\r\n),\r\n\r\npeak_hours as (\r\n    select\r\n        format_date('%Y-%m', order_date) as order_month,\r\n        array_to_string(array_agg(distinct hour_str order by hour_str), ',') as kitchen_peak_hours_monthly\r\n    from (\r\n        select\r\n            order_date,\r\n            cast(hour as string) as hour_str\r\n        from {{ ref('agg_daily_food_sales') }},\r\n        unnest(split(kitchen_peak_hours, ',')) as hour\r\n    )\r\n    group by order_month\r\n),\r\n\r\naggregated as (\r\n    select\r\n        format_date('%Y-%m', order_date) as order_month,\r\n        sum(total_food_items_sold_all_day) as total_food_items_sold_monthly,\r\n        sum(total_daily_food_revenue) as total_monthly_food_revenue,\r\n        round(sum(total_daily_food_revenue) / nullif(sum(total_food_items_sold_all_day), 0), 2) as avg_monthly_revenue_per_food_item,\r\n\r\n        max_by(top_daily_food_category_name, top_daily_food_category_revenue) as top_monthly_food_category_name,\r\n        max(top_daily_food_category_revenue) as top_monthly_food_category_revenue,\r\n        round(\r\n            max(top_daily_food_category_revenue) / nullif(sum(total_daily_food_revenue), 0),\r\n            2\r\n        ) as pct_top_food_cat_from_monthly_food_revenue,\r\n\r\n        round(avg(distinct_food_tables_all_day), 2) as avg_distinct_food_tables_per_day_monthly,\r\n        sum(total_food_orders_all_day) as total_food_orders_monthly,\r\n        round(sum(total_daily_food_revenue) / nullif(sum(total_food_orders_all_day), 0), 2) as avg_revenue_per_food_order_monthly,\r\n        round(sum(total_food_items_sold_all_day) / nullif(sum(total_food_orders_all_day), 0), 2) as avg_items_per_food_order_monthly,\r\n\r\n        sum(total_customers_all_day) as total_customers_monthly,\r\n        round(sum(total_daily_food_revenue) / nullif(sum(total_customers_all_day), 0), 2) as avg_food_revenue_per_head_monthly,\r\n        round(sum(total_food_items_sold_all_day) / nullif(sum(total_customers_all_day), 0), 2) as avg_food_items_per_head_monthly\r\n\r\n    from daily\r\n    group by order_month\r\n)\r\n\r\nselect\r\n    a.order_month,\r\n    a.total_food_items_sold_monthly,\r\n    a.total_monthly_food_revenue,\r\n    a.avg_monthly_revenue_per_food_item,\r\n    a.top_monthly_food_category_name,\r\n    a.top_monthly_food_category_revenue,\r\n    a.pct_top_food_cat_from_monthly_food_revenue,\r\n    a.avg_distinct_food_tables_per_day_monthly,\r\n    a.total_food_orders_monthly,\r\n    a.avg_revenue_per_food_order_monthly,\r\n    a.avg_items_per_food_order_monthly,\r\n    a.total_customers_monthly,\r\n    a.avg_food_revenue_per_head_monthly,\r\n    a.avg_food_items_per_head_monthly,\r\n    coalesce(m.food_category_diversity_all_month, 0) as food_category_diversity_monthly,\r\n    coalesce(m.unique_food_items_ordered_all_month, 0) as unique_food_items_ordered_monthly,\r\n    p.kitchen_peak_hours_monthly\r\nfrom aggregated a\r\nleft join metadata m using (order_month)\r\nleft join peak_hours p using (order_month)\r\norder by order_month desc", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}, {"name": "agg_monthly_metadata", "package": null, "version": null}, {"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales", "model.restaurant_data_analytics.agg_monthly_metadata"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\agg_monthly_food_sales.sql", "compiled": true, "compiled_code": "with daily as (\n    select *\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n),\n\nmetadata as (\n    select\n        order_month,\n        food_category_diversity_all_month,\n        unique_food_items_ordered_all_month\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_metadata`\n),\n\npeak_hours as (\n    select\n        format_date('%Y-%m', order_date) as order_month,\n        array_to_string(array_agg(distinct hour_str order by hour_str), ',') as kitchen_peak_hours_monthly\n    from (\n        select\n            order_date,\n            cast(hour as string) as hour_str\n        from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`,\n        unnest(split(kitchen_peak_hours, ',')) as hour\n    )\n    group by order_month\n),\n\naggregated as (\n    select\n        format_date('%Y-%m', order_date) as order_month,\n        sum(total_food_items_sold_all_day) as total_food_items_sold_monthly,\n        sum(total_daily_food_revenue) as total_monthly_food_revenue,\n        round(sum(total_daily_food_revenue) / nullif(sum(total_food_items_sold_all_day), 0), 2) as avg_monthly_revenue_per_food_item,\n\n        max_by(top_daily_food_category_name, top_daily_food_category_revenue) as top_monthly_food_category_name,\n        max(top_daily_food_category_revenue) as top_monthly_food_category_revenue,\n        round(\n            max(top_daily_food_category_revenue) / nullif(sum(total_daily_food_revenue), 0),\n            2\n        ) as pct_top_food_cat_from_monthly_food_revenue,\n\n        round(avg(distinct_food_tables_all_day), 2) as avg_distinct_food_tables_per_day_monthly,\n        sum(total_food_orders_all_day) as total_food_orders_monthly,\n        round(sum(total_daily_food_revenue) / nullif(sum(total_food_orders_all_day), 0), 2) as avg_revenue_per_food_order_monthly,\n        round(sum(total_food_items_sold_all_day) / nullif(sum(total_food_orders_all_day), 0), 2) as avg_items_per_food_order_monthly,\n\n        sum(total_customers_all_day) as total_customers_monthly,\n        round(sum(total_daily_food_revenue) / nullif(sum(total_customers_all_day), 0), 2) as avg_food_revenue_per_head_monthly,\n        round(sum(total_food_items_sold_all_day) / nullif(sum(total_customers_all_day), 0), 2) as avg_food_items_per_head_monthly\n\n    from daily\n    group by order_month\n)\n\nselect\n    a.order_month,\n    a.total_food_items_sold_monthly,\n    a.total_monthly_food_revenue,\n    a.avg_monthly_revenue_per_food_item,\n    a.top_monthly_food_category_name,\n    a.top_monthly_food_category_revenue,\n    a.pct_top_food_cat_from_monthly_food_revenue,\n    a.avg_distinct_food_tables_per_day_monthly,\n    a.total_food_orders_monthly,\n    a.avg_revenue_per_food_order_monthly,\n    a.avg_items_per_food_order_monthly,\n    a.total_customers_monthly,\n    a.avg_food_revenue_per_head_monthly,\n    a.avg_food_items_per_head_monthly,\n    coalesce(m.food_category_diversity_all_month, 0) as food_category_diversity_monthly,\n    coalesce(m.unique_food_items_ordered_all_month, 0) as unique_food_items_ordered_monthly,\n    p.kitchen_peak_hours_monthly\nfrom aggregated a\nleft join metadata m using (order_month)\nleft join peak_hours p using (order_month)\norder by order_month desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_month"], "time_spine": null}, "model.restaurant_data_analytics.agg_monthly_total_sales": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "agg_monthly_total_sales", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "marts\\core\\sales\\agg_monthly_total_sales.sql", "original_file_path": "models\\marts\\core\\sales\\agg_monthly_total_sales.sql", "unique_id": "model.restaurant_data_analytics.agg_monthly_total_sales", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "agg_monthly_total_sales"], "alias": "agg_monthly_total_sales", "checksum": {"name": "sha256", "checksum": "9b56079da2c35cff0768074d09a1cbf9e8765e860a4aae6d286b9118b0d33c2e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["sales", "monthly", "agg", "total", "agg", "monthly", "total"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["agg", "monthly", "total", "sales"], "description": "Monthly aggregation combining food and drink metrics. Tracks revenue, volume, top category, customer behavior, order patterns, and temporal trends.\n", "columns": {"order_month": {"name": "order_month", "description": "Month of the aggregation (YYYY-MM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_items_ordered_monthly": {"name": "total_items_ordered_monthly", "description": "Total number of food and drink items sold during the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_monthly_revenue": {"name": "total_monthly_revenue", "description": "Total revenue from food and drink combined during the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_revenue_per_item_monthly": {"name": "avg_revenue_per_item_monthly", "description": "Average revenue per item sold (food + drink).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "category_diversity_monthly": {"name": "category_diversity_monthly", "description": "Number of unique food and drink categories sold during the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_monthly_category_name": {"name": "top_monthly_category_name", "description": "Top-selling category (food or drink) by revenue during the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_monthly_category_revenue": {"name": "top_monthly_category_revenue", "description": "Revenue from the top-selling category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pct_food_from_monthly_revenue": {"name": "pct_food_from_monthly_revenue", "description": "Share of total revenue that came from food.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pct_drink_from_monthly_revenue": {"name": "pct_drink_from_monthly_revenue", "description": "Share of total revenue that came from drinks.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pct_top_cat_of_total_monthly_revenue": {"name": "pct_top_cat_of_total_monthly_revenue", "description": "Share of revenue from the top-selling category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_monthly_customers": {"name": "total_monthly_customers", "description": "Estimated number of unique customers (based on mains).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_monthly_revenue_per_head": {"name": "avg_monthly_revenue_per_head", "description": "Average revenue per customer for the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_items_ordered_per_head_monthly": {"name": "avg_items_ordered_per_head_monthly", "description": "Average number of items per customer for the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_orders_monthly": {"name": "total_orders_monthly", "description": "Total number of orders (food and drink) during the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_items_per_order_monthly": {"name": "avg_items_per_order_monthly", "description": "Average number of items per order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_revenue_per_order_monthly": {"name": "avg_revenue_per_order_monthly", "description": "Average revenue per order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "unique_items_ordered_monthly": {"name": "unique_items_ordered_monthly", "description": "Number of unique food and drink items sold during the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_distinct_tables_per_day_monthly": {"name": "avg_distinct_tables_per_day_monthly", "description": "Average number of distinct tables used per day.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "monthly_revenue_change_amount": {"name": "monthly_revenue_change_amount", "description": "Change in total revenue compared to the previous month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pct_change_in_monthly_revenue": {"name": "pct_change_in_monthly_revenue", "description": "Percentage change in revenue from the previous month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rolling_avg_revenue_3mo": {"name": "rolling_avg_revenue_3mo", "description": "Three-month rolling average of monthly revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rolling_avg_items_sold_3mo": {"name": "rolling_avg_items_sold_3mo", "description": "Three-month rolling average of items sold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "weekend_days_in_month": {"name": "weekend_days_in_month", "description": "Count of weekend days in the month (with orders).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "peak_hours_monthly": {"name": "peak_hours_monthly", "description": "Comma-separated list of distinct peak hours observed during the month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "restaurant_data_analytics://models\\marts\\core\\sales\\sales.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["agg", "monthly", "total"]}, "created_at": 1747516849.452839, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`", "raw_code": "{{ config(\r\n    tags=['agg', 'monthly', 'total'],\r\n    materialized='table'\r\n) }}\r\n\r\nwith food as (\r\n    select *\r\n    from {{ ref('agg_monthly_food_sales') }}\r\n),\r\n\r\ndrink as (\r\n    select *\r\n    from {{ ref('agg_monthly_drink_sales') }}\r\n),\r\n\r\nmetadata as (\r\n    select\r\n        order_month,\r\n        weekend_days_in_month,\r\n        unique_items_ordered_all_month,\r\n        food_category_diversity_all_month,\r\n        drink_category_diversity_all_month\r\n    from {{ ref('agg_monthly_metadata') }}\r\n),\r\n\r\ncombined as (\r\n    select\r\n        f.order_month,\r\n        \r\n        f.total_food_items_sold_monthly + d.total_drink_items_sold_monthly as total_items_ordered_monthly,\r\n        f.total_monthly_food_revenue + d.total_monthly_drink_revenue as total_monthly_revenue,\r\n        \r\n        round(\r\n            (f.total_monthly_food_revenue + d.total_monthly_drink_revenue) /\r\n            nullif(f.total_food_items_sold_monthly + d.total_drink_items_sold_monthly, 0), 2\r\n        ) as avg_revenue_per_item_monthly,\r\n\r\n        f.food_category_diversity_monthly + d.drink_category_diversity_monthly as category_diversity_monthly,\r\n\r\n        case\r\n            when f.top_monthly_food_category_revenue >= d.top_monthly_drink_category_revenue\r\n                then f.top_monthly_food_category_name\r\n            else d.top_monthly_drink_category_name\r\n        end as top_monthly_category_name,\r\n\r\n        greatest(f.top_monthly_food_category_revenue, d.top_monthly_drink_category_revenue) as top_monthly_category_revenue,\r\n\r\n        round(f.total_monthly_food_revenue / nullif(f.total_monthly_food_revenue + d.total_monthly_drink_revenue, 0), 2) as pct_food_from_monthly_revenue,\r\n        round(d.total_monthly_drink_revenue / nullif(f.total_monthly_food_revenue + d.total_monthly_drink_revenue, 0), 2) as pct_drink_from_monthly_revenue,\r\n        round(\r\n            greatest(f.top_monthly_food_category_revenue, d.top_monthly_drink_category_revenue) /\r\n            nullif(f.total_monthly_food_revenue + d.total_monthly_drink_revenue, 0), 2\r\n        ) as pct_top_cat_of_total_monthly_revenue,\r\n\r\n        f.total_customers_monthly as total_monthly_customers,\r\n        round((f.total_monthly_food_revenue + d.total_monthly_drink_revenue) / nullif(f.total_customers_monthly, 0), 2) as avg_monthly_revenue_per_head,\r\n        round((f.total_food_items_sold_monthly + d.total_drink_items_sold_monthly) / nullif(f.total_customers_monthly, 0), 2) as avg_items_ordered_per_head_monthly,\r\n\r\n        f.total_food_orders_monthly + d.total_drink_orders_monthly as total_orders_monthly,\r\n        round((f.total_food_items_sold_monthly + d.total_drink_items_sold_monthly) / nullif((f.total_food_orders_monthly + d.total_drink_orders_monthly), 0), 2) as avg_items_per_order_monthly,\r\n        round((f.total_monthly_food_revenue + d.total_monthly_drink_revenue) / nullif((f.total_food_orders_monthly + d.total_drink_orders_monthly), 0), 2) as avg_revenue_per_order_monthly,\r\n\r\n        m.unique_items_ordered_all_month as unique_items_ordered_monthly,\r\n        round((f.avg_distinct_food_tables_per_day_monthly + d.avg_distinct_drink_tables_per_day_monthly) / 2, 2) as avg_distinct_tables_per_day_monthly,\r\n\r\n        m.weekend_days_in_month\r\n\r\n    from food f\r\n    join drink d using (order_month)\r\n    left join metadata m using (order_month)\r\n),\r\n\r\nfinal as (\r\n    select\r\n        *,\r\n        round(total_monthly_revenue - lag(total_monthly_revenue) over (order by order_month), 2) as monthly_revenue_change_amount,\r\n        round(\r\n            (total_monthly_revenue - lag(total_monthly_revenue) over (order by order_month)) /\r\n            nullif(lag(total_monthly_revenue) over (order by order_month), 0), 4\r\n        ) as pct_change_in_monthly_revenue,\r\n        round(avg(total_monthly_revenue) over (order by order_month rows between 2 preceding and current row), 2) as rolling_avg_revenue_3mo,\r\n        round(avg(total_items_ordered_monthly) over (order by order_month rows between 2 preceding and current row), 2) as rolling_avg_items_sold_3mo\r\n    from combined\r\n)\r\n\r\nselect *\r\nfrom final\r\norder by order_month desc", "language": "sql", "refs": [{"name": "agg_monthly_food_sales", "package": null, "version": null}, {"name": "agg_monthly_drink_sales", "package": null, "version": null}, {"name": "agg_monthly_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.restaurant_data_analytics.agg_monthly_food_sales", "model.restaurant_data_analytics.agg_monthly_drink_sales", "model.restaurant_data_analytics.agg_monthly_metadata"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\agg_monthly_total_sales.sql", "compiled": true, "compiled_code": "\n\nwith food as (\n    select *\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`\n),\n\ndrink as (\n    select *\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`\n),\n\nmetadata as (\n    select\n        order_month,\n        weekend_days_in_month,\n        unique_items_ordered_all_month,\n        food_category_diversity_all_month,\n        drink_category_diversity_all_month\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_metadata`\n),\n\ncombined as (\n    select\n        f.order_month,\n        \n        f.total_food_items_sold_monthly + d.total_drink_items_sold_monthly as total_items_ordered_monthly,\n        f.total_monthly_food_revenue + d.total_monthly_drink_revenue as total_monthly_revenue,\n        \n        round(\n            (f.total_monthly_food_revenue + d.total_monthly_drink_revenue) /\n            nullif(f.total_food_items_sold_monthly + d.total_drink_items_sold_monthly, 0), 2\n        ) as avg_revenue_per_item_monthly,\n\n        f.food_category_diversity_monthly + d.drink_category_diversity_monthly as category_diversity_monthly,\n\n        case\n            when f.top_monthly_food_category_revenue >= d.top_monthly_drink_category_revenue\n                then f.top_monthly_food_category_name\n            else d.top_monthly_drink_category_name\n        end as top_monthly_category_name,\n\n        greatest(f.top_monthly_food_category_revenue, d.top_monthly_drink_category_revenue) as top_monthly_category_revenue,\n\n        round(f.total_monthly_food_revenue / nullif(f.total_monthly_food_revenue + d.total_monthly_drink_revenue, 0), 2) as pct_food_from_monthly_revenue,\n        round(d.total_monthly_drink_revenue / nullif(f.total_monthly_food_revenue + d.total_monthly_drink_revenue, 0), 2) as pct_drink_from_monthly_revenue,\n        round(\n            greatest(f.top_monthly_food_category_revenue, d.top_monthly_drink_category_revenue) /\n            nullif(f.total_monthly_food_revenue + d.total_monthly_drink_revenue, 0), 2\n        ) as pct_top_cat_of_total_monthly_revenue,\n\n        f.total_customers_monthly as total_monthly_customers,\n        round((f.total_monthly_food_revenue + d.total_monthly_drink_revenue) / nullif(f.total_customers_monthly, 0), 2) as avg_monthly_revenue_per_head,\n        round((f.total_food_items_sold_monthly + d.total_drink_items_sold_monthly) / nullif(f.total_customers_monthly, 0), 2) as avg_items_ordered_per_head_monthly,\n\n        f.total_food_orders_monthly + d.total_drink_orders_monthly as total_orders_monthly,\n        round((f.total_food_items_sold_monthly + d.total_drink_items_sold_monthly) / nullif((f.total_food_orders_monthly + d.total_drink_orders_monthly), 0), 2) as avg_items_per_order_monthly,\n        round((f.total_monthly_food_revenue + d.total_monthly_drink_revenue) / nullif((f.total_food_orders_monthly + d.total_drink_orders_monthly), 0), 2) as avg_revenue_per_order_monthly,\n\n        m.unique_items_ordered_all_month as unique_items_ordered_monthly,\n        round((f.avg_distinct_food_tables_per_day_monthly + d.avg_distinct_drink_tables_per_day_monthly) / 2, 2) as avg_distinct_tables_per_day_monthly,\n\n        m.weekend_days_in_month\n\n    from food f\n    join drink d using (order_month)\n    left join metadata m using (order_month)\n),\n\nfinal as (\n    select\n        *,\n        round(total_monthly_revenue - lag(total_monthly_revenue) over (order by order_month), 2) as monthly_revenue_change_amount,\n        round(\n            (total_monthly_revenue - lag(total_monthly_revenue) over (order by order_month)) /\n            nullif(lag(total_monthly_revenue) over (order by order_month), 0), 4\n        ) as pct_change_in_monthly_revenue,\n        round(avg(total_monthly_revenue) over (order by order_month rows between 2 preceding and current row), 2) as rolling_avg_revenue_3mo,\n        round(avg(total_items_ordered_monthly) over (order by order_month rows between 2 preceding and current row), 2) as rolling_avg_items_sold_3mo\n    from combined\n)\n\nselect *\nfrom final\norder by order_month desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_month"], "time_spine": null}, "model.restaurant_data_analytics.agg_weekly_drink_sales": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "agg_weekly_drink_sales", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "marts\\core\\sales\\agg_weekly_drink_sales.sql", "original_file_path": "models\\marts\\core\\sales\\agg_weekly_drink_sales.sql", "unique_id": "model.restaurant_data_analytics.agg_weekly_drink_sales", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "agg_weekly_drink_sales"], "alias": "agg_weekly_drink_sales", "checksum": {"name": "sha256", "checksum": "7591e04eb2b51e4f8d2ac795f1f27b17393723b47de8e07e5856bc182eb03496"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["agg", "weekly", "drink"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["agg", "weekly", "drink"], "description": "Weekly aggregate of drink (bar) sales including total revenue, item and order volumes, customer metrics, and category performance.\n", "columns": {"order_week": {"name": "order_week", "description": "The ISO week label for the aggregated week (format YYYY-WW).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "week_start_date": {"name": "week_start_date", "description": "The first order_date of the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "week_end_date": {"name": "week_end_date", "description": "The last order_date of the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_drink_items_sold_weekly": {"name": "total_drink_items_sold_weekly", "description": "Total number of drink items sold throughout the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_weekly_drink_revenue": {"name": "total_weekly_drink_revenue", "description": "Total revenue generated from drink orders during the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_weekly_revenue_per_drink_item": {"name": "avg_weekly_revenue_per_drink_item", "description": "Average revenue per drink item sold during the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_weekly_drink_category_name": {"name": "top_weekly_drink_category_name", "description": "Top-selling drink category based on weekly revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_weekly_drink_category_revenue": {"name": "top_weekly_drink_category_revenue", "description": "Revenue generated by the top drink category for the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pct_top_drink_cat_from_weekly_drink_revenue": {"name": "pct_top_drink_cat_from_weekly_drink_revenue", "description": "Percentage of weekly drink revenue from the top-selling drink category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_distinct_drink_tables_per_day_weekly": {"name": "avg_distinct_drink_tables_per_day_weekly", "description": "Average number of distinct drink-ordering tables per day during the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_drink_orders_weekly": {"name": "total_drink_orders_weekly", "description": "Total number of drink orders placed throughout the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_revenue_per_drink_order_weekly": {"name": "avg_revenue_per_drink_order_weekly", "description": "Average revenue per drink order over the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_items_per_drink_order_weekly": {"name": "avg_items_per_drink_order_weekly", "description": "Average number of drink items per order during the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_customers_weekly": {"name": "total_customers_weekly", "description": "Total number of drink customers during the week (from food mains as proxy).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_drink_revenue_per_head_weekly": {"name": "avg_drink_revenue_per_head_weekly", "description": "Average drink revenue per customer during the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_drink_items_per_haed_weekly": {"name": "avg_drink_items_per_haed_weekly", "description": "Average number of drink items per customer throughout the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "drink_category_diversity_weekly": {"name": "drink_category_diversity_weekly", "description": "Number of unique drink categories sold during the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "unique_drink_items_ordered_weekly": {"name": "unique_drink_items_ordered_weekly", "description": "Total number of unique drink items sold throughout the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "bar_peak_hours_weekly": {"name": "bar_peak_hours_weekly", "description": "Comma-separated list of distinct bar peak hours (0\u201323) observed throughout the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "restaurant_data_analytics://models\\marts\\core\\sales\\sales.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["agg", "weekly", "drink"]}, "created_at": 1747516849.4057944, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales`", "raw_code": "with daily as (\r\n    select *\r\n    from {{ ref('agg_daily_drink_sales') }}\r\n),\r\n\r\nmetadata as (\r\n    select\r\n        order_week,\r\n        drink_category_diversity_all_week,\r\n        unique_drink_items_ordered_all_week\r\n    from {{ ref('agg_weekly_metadata') }}\r\n),\r\n\r\npeak_hours as (\r\n    select\r\n        format_date('%G-%V', order_date) as order_week,\r\n        array_to_string(array_agg(distinct hour_str order by hour_str), ',') as bar_peak_hours_weekly\r\n    from (\r\n        select\r\n            order_date,\r\n            cast(hour as string) as hour_str\r\n        from {{ ref('agg_daily_drink_sales') }},\r\n        unnest(split(bar_peak_hours, ',')) as hour\r\n    )\r\n    group by order_week\r\n),\r\n\r\naggregated as (\r\n    select\r\n        format_date('%G-%V', order_date) as order_week,\r\n        min(order_date) as week_start_date,\r\n        max(order_date) as week_end_date,\r\n\r\n        sum(total_drink_items_ordered_all_day) as total_drink_items_sold_weekly,\r\n        sum(total_daily_drink_revenue) as total_weekly_drink_revenue,\r\n        round(sum(total_daily_drink_revenue) / nullif(sum(total_drink_items_ordered_all_day), 0), 2) as avg_weekly_revenue_per_drink_item,\r\n\r\n        max_by(top_daily_drink_category_name, top_daily_drink_category_revenue) as top_weekly_drink_category_name,\r\n        max(top_daily_drink_category_revenue) as top_weekly_drink_category_revenue,\r\n        round(max(top_daily_drink_category_revenue) / nullif(sum(total_daily_drink_revenue), 0), 2) as pct_top_drink_cat_from_weekly_drink_revenue,\r\n\r\n        round(avg(distinct_drink_tables_all_day), 2) as avg_distinct_drink_tables_per_day_weekly,\r\n        sum(total_drink_orders_all_day) as total_drink_orders_weekly,\r\n        round(sum(total_daily_drink_revenue) / nullif(sum(total_drink_orders_all_day), 0), 2) as avg_revenue_per_drink_order_weekly,\r\n        round(sum(total_drink_items_ordered_all_day) / nullif(sum(total_drink_orders_all_day), 0), 2) as avg_items_per_drink_order_weekly,\r\n        sum(total_customers_all_day) as total_customers_weekly,\r\n        round(sum(total_daily_drink_revenue) / nullif(sum(total_customers_all_day), 0), 2) as avg_drink_revenue_per_head_weekly,\r\n        round(sum(total_drink_items_ordered_all_day) / nullif(sum(total_customers_all_day), 0), 2) as avg_drink_items_per_haed_weekly\r\n\r\n    from daily\r\n    group by order_week\r\n),\r\n\r\nfinal as (\r\n    select\r\n        a.*,\r\n        m.drink_category_diversity_all_week as drink_category_diversity_weekly,\r\n        m.unique_drink_items_ordered_all_week as unique_drink_items_ordered_weekly,\r\n        p.bar_peak_hours_weekly\r\n    from aggregated a\r\n    left join metadata m using (order_week)\r\n    left join peak_hours p using (order_week)\r\n\r\n)\r\n\r\nselect *\r\nfrom final\r\norder by order_week desc", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}, {"name": "agg_weekly_metadata", "package": null, "version": null}, {"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales", "model.restaurant_data_analytics.agg_weekly_metadata"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\agg_weekly_drink_sales.sql", "compiled": true, "compiled_code": "with daily as (\n    select *\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n),\n\nmetadata as (\n    select\n        order_week,\n        drink_category_diversity_all_week,\n        unique_drink_items_ordered_all_week\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_metadata`\n),\n\npeak_hours as (\n    select\n        format_date('%G-%V', order_date) as order_week,\n        array_to_string(array_agg(distinct hour_str order by hour_str), ',') as bar_peak_hours_weekly\n    from (\n        select\n            order_date,\n            cast(hour as string) as hour_str\n        from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`,\n        unnest(split(bar_peak_hours, ',')) as hour\n    )\n    group by order_week\n),\n\naggregated as (\n    select\n        format_date('%G-%V', order_date) as order_week,\n        min(order_date) as week_start_date,\n        max(order_date) as week_end_date,\n\n        sum(total_drink_items_ordered_all_day) as total_drink_items_sold_weekly,\n        sum(total_daily_drink_revenue) as total_weekly_drink_revenue,\n        round(sum(total_daily_drink_revenue) / nullif(sum(total_drink_items_ordered_all_day), 0), 2) as avg_weekly_revenue_per_drink_item,\n\n        max_by(top_daily_drink_category_name, top_daily_drink_category_revenue) as top_weekly_drink_category_name,\n        max(top_daily_drink_category_revenue) as top_weekly_drink_category_revenue,\n        round(max(top_daily_drink_category_revenue) / nullif(sum(total_daily_drink_revenue), 0), 2) as pct_top_drink_cat_from_weekly_drink_revenue,\n\n        round(avg(distinct_drink_tables_all_day), 2) as avg_distinct_drink_tables_per_day_weekly,\n        sum(total_drink_orders_all_day) as total_drink_orders_weekly,\n        round(sum(total_daily_drink_revenue) / nullif(sum(total_drink_orders_all_day), 0), 2) as avg_revenue_per_drink_order_weekly,\n        round(sum(total_drink_items_ordered_all_day) / nullif(sum(total_drink_orders_all_day), 0), 2) as avg_items_per_drink_order_weekly,\n        sum(total_customers_all_day) as total_customers_weekly,\n        round(sum(total_daily_drink_revenue) / nullif(sum(total_customers_all_day), 0), 2) as avg_drink_revenue_per_head_weekly,\n        round(sum(total_drink_items_ordered_all_day) / nullif(sum(total_customers_all_day), 0), 2) as avg_drink_items_per_haed_weekly\n\n    from daily\n    group by order_week\n),\n\nfinal as (\n    select\n        a.*,\n        m.drink_category_diversity_all_week as drink_category_diversity_weekly,\n        m.unique_drink_items_ordered_all_week as unique_drink_items_ordered_weekly,\n        p.bar_peak_hours_weekly\n    from aggregated a\n    left join metadata m using (order_week)\n    left join peak_hours p using (order_week)\n\n)\n\nselect *\nfrom final\norder by order_week desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_week"], "time_spine": null}, "model.restaurant_data_analytics.agg_weekly_food_sales": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "agg_weekly_food_sales", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "marts\\core\\sales\\agg_weekly_food_sales.sql", "original_file_path": "models\\marts\\core\\sales\\agg_weekly_food_sales.sql", "unique_id": "model.restaurant_data_analytics.agg_weekly_food_sales", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "agg_weekly_food_sales"], "alias": "agg_weekly_food_sales", "checksum": {"name": "sha256", "checksum": "61cf43b2a4fbe806323be08e0a396a2a9f87dcd5a4403347b1292e5f90b73068"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["agg", "weekly", "food"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["agg", "weekly", "food"], "description": "Weekly aggregate of food (kitchen) sales including total revenue, item and order volumes, customer metrics, and category performance.\n", "columns": {"order_week": {"name": "order_week", "description": "The ISO week label for the aggregated week (format YYYY-WW).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "week_start_date": {"name": "week_start_date", "description": "The first order_date of the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "week_end_date": {"name": "week_end_date", "description": "The last order_date of the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_food_items_sold_weekly": {"name": "total_food_items_sold_weekly", "description": "Total number of food items sold throughout the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_weekly_food_revenue": {"name": "total_weekly_food_revenue", "description": "Total revenue generated from food orders during the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_weekly_revenue_per_food_item": {"name": "avg_weekly_revenue_per_food_item", "description": "Average revenue per food item sold during the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_weekly_food_category_name": {"name": "top_weekly_food_category_name", "description": "Top-selling food category based on weekly revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_weekly_food_category_revenue": {"name": "top_weekly_food_category_revenue", "description": "Revenue generated by the top food category for the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pct_top_food_cat_from_weekly_food_revenue": {"name": "pct_top_food_cat_from_weekly_food_revenue", "description": "Percentage of weekly food revenue from the top-selling food category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_distinct_food_tables_per_day_weekly": {"name": "avg_distinct_food_tables_per_day_weekly", "description": "Average number of distinct food-ordering tables per day during the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_food_orders_weekly": {"name": "total_food_orders_weekly", "description": "Total number of food orders placed throughout the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_revenue_per_food_order_weekly": {"name": "avg_revenue_per_food_order_weekly", "description": "Average revenue per food order over the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_items_per_food_order_weekly": {"name": "avg_items_per_food_order_weekly", "description": "Average number of food items per order during the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_customers_weekly": {"name": "total_customers_weekly", "description": "Total number of food customers during the week, using mains ordered as proxy.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_food_revenue_per_head_weekly": {"name": "avg_food_revenue_per_head_weekly", "description": "Average food revenue per customer during the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_food_items_per_head_weekly": {"name": "avg_food_items_per_head_weekly", "description": "Average number of food items per customer throughout the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "food_category_diversity_weekly": {"name": "food_category_diversity_weekly", "description": "Number of unique food categories sold during the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "unique_food_items_ordered_weekly": {"name": "unique_food_items_ordered_weekly", "description": "Total number of unique food items sold throughout the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "kitchen_peak_hours_weekly": {"name": "kitchen_peak_hours_weekly", "description": "Comma-separated list of distinct kitchen peak hours (0\u201323) observed throughout the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "restaurant_data_analytics://models\\marts\\core\\sales\\sales.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["agg", "weekly", "food"]}, "created_at": 1747516849.3957858, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales`", "raw_code": "with daily as (\r\n    select *\r\n    from {{ ref('agg_daily_food_sales') }}\r\n),\r\n\r\nmetadata as (\r\n    select\r\n        order_week,\r\n        food_category_diversity_all_week,\r\n        unique_food_items_ordered_all_week\r\n    from {{ ref('agg_weekly_metadata') }}\r\n),\r\n\r\npeak_hours as (\r\n    select\r\n        format_date('%G-%V', order_date) as order_week,\r\n        array_to_string(array_agg(distinct hour_str order by hour_str), ',') as kitchen_peak_hours_weekly\r\n    from (\r\n        select\r\n            order_date,\r\n            cast(hour as string) as hour_str\r\n        from {{ ref('agg_daily_food_sales') }},\r\n        unnest(split(kitchen_peak_hours, ',')) as hour\r\n    )\r\n    group by order_week\r\n),\r\n\r\naggregated as (\r\n    select\r\n        format_date('%G-%V', order_date) as order_week,\r\n        min(order_date) as week_start_date,\r\n        max(order_date) as week_end_date,\r\n\r\n        sum(total_food_items_sold_all_day) as total_food_items_sold_weekly,\r\n        sum(total_daily_food_revenue) as total_weekly_food_revenue,\r\n        round(sum(total_daily_food_revenue) / nullif(sum(total_food_items_sold_all_day), 0), 2) as avg_weekly_revenue_per_food_item,\r\n\r\n        max_by(top_daily_food_category_name, top_daily_food_category_revenue) as top_weekly_food_category_name,\r\n        max(top_daily_food_category_revenue) as top_weekly_food_category_revenue,\r\n        round(max(top_daily_food_category_revenue) / nullif(sum(total_daily_food_revenue), 0), 2) as pct_top_food_cat_from_weekly_food_revenue,\r\n\r\n        round(avg(distinct_food_tables_all_day), 2) as avg_distinct_food_tables_per_day_weekly,\r\n        sum(total_food_orders_all_day) as total_food_orders_weekly,\r\n        round(sum(total_daily_food_revenue) / nullif(sum(total_food_orders_all_day), 0), 2) as avg_revenue_per_food_order_weekly,\r\n        round(sum(total_food_items_sold_all_day) / nullif(sum(total_food_orders_all_day), 0), 2) as avg_items_per_food_order_weekly,\r\n        sum(total_customers_all_day) as total_customers_weekly,\r\n        round(sum(total_daily_food_revenue) / nullif(sum(total_customers_all_day), 0), 2) as avg_food_revenue_per_head_weekly,\r\n        round(sum(total_food_items_sold_all_day) / nullif(sum(total_customers_all_day), 0), 2) as avg_food_items_per_head_weekly\r\n\r\n    from daily\r\n    group by order_week\r\n),\r\n\r\nfinal as (\r\n    select\r\n        a.*,\r\n        m.food_category_diversity_all_week as food_category_diversity_weekly,\r\n        m.unique_food_items_ordered_all_week as unique_food_items_ordered_weekly,\r\n        p.kitchen_peak_hours_weekly\r\n    from aggregated a\r\n    left join metadata m using (order_week)\r\n    left join peak_hours p using (order_week)\r\n)\r\n\r\nselect *\r\nfrom final\r\norder by order_week desc", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}, {"name": "agg_weekly_metadata", "package": null, "version": null}, {"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales", "model.restaurant_data_analytics.agg_weekly_metadata"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\agg_weekly_food_sales.sql", "compiled": true, "compiled_code": "with daily as (\n    select *\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n),\n\nmetadata as (\n    select\n        order_week,\n        food_category_diversity_all_week,\n        unique_food_items_ordered_all_week\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_metadata`\n),\n\npeak_hours as (\n    select\n        format_date('%G-%V', order_date) as order_week,\n        array_to_string(array_agg(distinct hour_str order by hour_str), ',') as kitchen_peak_hours_weekly\n    from (\n        select\n            order_date,\n            cast(hour as string) as hour_str\n        from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`,\n        unnest(split(kitchen_peak_hours, ',')) as hour\n    )\n    group by order_week\n),\n\naggregated as (\n    select\n        format_date('%G-%V', order_date) as order_week,\n        min(order_date) as week_start_date,\n        max(order_date) as week_end_date,\n\n        sum(total_food_items_sold_all_day) as total_food_items_sold_weekly,\n        sum(total_daily_food_revenue) as total_weekly_food_revenue,\n        round(sum(total_daily_food_revenue) / nullif(sum(total_food_items_sold_all_day), 0), 2) as avg_weekly_revenue_per_food_item,\n\n        max_by(top_daily_food_category_name, top_daily_food_category_revenue) as top_weekly_food_category_name,\n        max(top_daily_food_category_revenue) as top_weekly_food_category_revenue,\n        round(max(top_daily_food_category_revenue) / nullif(sum(total_daily_food_revenue), 0), 2) as pct_top_food_cat_from_weekly_food_revenue,\n\n        round(avg(distinct_food_tables_all_day), 2) as avg_distinct_food_tables_per_day_weekly,\n        sum(total_food_orders_all_day) as total_food_orders_weekly,\n        round(sum(total_daily_food_revenue) / nullif(sum(total_food_orders_all_day), 0), 2) as avg_revenue_per_food_order_weekly,\n        round(sum(total_food_items_sold_all_day) / nullif(sum(total_food_orders_all_day), 0), 2) as avg_items_per_food_order_weekly,\n        sum(total_customers_all_day) as total_customers_weekly,\n        round(sum(total_daily_food_revenue) / nullif(sum(total_customers_all_day), 0), 2) as avg_food_revenue_per_head_weekly,\n        round(sum(total_food_items_sold_all_day) / nullif(sum(total_customers_all_day), 0), 2) as avg_food_items_per_head_weekly\n\n    from daily\n    group by order_week\n),\n\nfinal as (\n    select\n        a.*,\n        m.food_category_diversity_all_week as food_category_diversity_weekly,\n        m.unique_food_items_ordered_all_week as unique_food_items_ordered_weekly,\n        p.kitchen_peak_hours_weekly\n    from aggregated a\n    left join metadata m using (order_week)\n    left join peak_hours p using (order_week)\n)\n\nselect *\nfrom final\norder by order_week desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_week"], "time_spine": null}, "model.restaurant_data_analytics.agg_weekly_total_sales": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "agg_weekly_total_sales", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "marts\\core\\sales\\agg_weekly_total_sales.sql", "original_file_path": "models\\marts\\core\\sales\\agg_weekly_total_sales.sql", "unique_id": "model.restaurant_data_analytics.agg_weekly_total_sales", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "agg_weekly_total_sales"], "alias": "agg_weekly_total_sales", "checksum": {"name": "sha256", "checksum": "3190edf4d9d6e50beedd619f4e8cb874f85a8e03d59345783d4d1d0f75dea51b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["agg", "weekly", "total"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["agg", "weekly", "total"], "description": "Weekly aggregation of total sales combining food and drink performance, including revenue, volume, customer metrics, and top category insights. Tracks week-over-week revenue changes and rolling trends.\n", "columns": {"order_week": {"name": "order_week", "description": "The ISO week label for the aggregation (format YYYY-WW).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "week_start_date": {"name": "week_start_date", "description": "First calendar date of the aggregated week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "week_end_date": {"name": "week_end_date", "description": "Last calendar date of the aggregated week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_items_ordered_weekly": {"name": "total_items_ordered_weekly", "description": "Combined total of food and drink items sold in the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_weekly_revenue": {"name": "total_weekly_revenue", "description": "Combined food and drink revenue during the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_revenue_per_item_weekly": {"name": "avg_revenue_per_item_weekly", "description": "Average revenue per item sold during the week (food + drink).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "category_diversity_weekly": {"name": "category_diversity_weekly", "description": "Total number of distinct food and drink categories sold during the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_weekly_category_name": {"name": "top_weekly_category_name", "description": "Top-selling category by revenue (from food or drink) during the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "top_weekly_category_revenue": {"name": "top_weekly_category_revenue", "description": "Revenue generated by the top-selling category of the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pct_food_from_weekly_revenue": {"name": "pct_food_from_weekly_revenue", "description": "Proportion of total weekly revenue from food.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pct_drink_from_weekly_revenue": {"name": "pct_drink_from_weekly_revenue", "description": "Proportion of total weekly revenue from drinks.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pct_top_cat_of_total_weekly_revenue": {"name": "pct_top_cat_of_total_weekly_revenue", "description": "Percentage of total revenue from the top-selling category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_weekly_customers": {"name": "total_weekly_customers", "description": "Estimated number of unique customers during the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_weekly_revenue_per_head": {"name": "avg_weekly_revenue_per_head", "description": "Average weekly revenue per customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_items_ordered_per_head_weekly": {"name": "avg_items_ordered_per_head_weekly", "description": "Average number of items ordered per customer for the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "total_orders_weekly": {"name": "total_orders_weekly", "description": "Total number of food and drink orders placed during the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_items_per_order_weekly": {"name": "avg_items_per_order_weekly", "description": "Average number of items per order placed in the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_revenue_per_order_weekly": {"name": "avg_revenue_per_order_weekly", "description": "Average revenue per order (food and drink combined).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "unique_items_ordered_weekly": {"name": "unique_items_ordered_weekly", "description": "Total number of unique food and drink items sold during the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "avg_distinct_tables_per_day_weekly": {"name": "avg_distinct_tables_per_day_weekly", "description": "Average number of distinct tables used per day during the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "weekly_revenue_change_amount": {"name": "weekly_revenue_change_amount", "description": "Absolute revenue change compared to the previous week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "pct_change_in_weekly_revenue": {"name": "pct_change_in_weekly_revenue", "description": "Percentage change in total revenue compared to the previous week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rolling_avg_revenue_4wk": {"name": "rolling_avg_revenue_4wk", "description": "Rolling 4-week average of total weekly revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rolling_avg_items_sold_4wk": {"name": "rolling_avg_items_sold_4wk", "description": "4-week rolling average of total items sold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "peak_hours_weekly": {"name": "peak_hours_weekly", "description": "Comma-separated list of distinct peak hours (0\u201323) from kitchen and bar across the week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "restaurant_data_analytics://models\\marts\\core\\sales\\sales.yml", "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["agg", "weekly", "total"]}, "created_at": 1747516849.420808, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`", "raw_code": "with food as (\r\n    select *\r\n    from {{ ref('agg_weekly_food_sales') }}\r\n),\r\n\r\ndrink as (\r\n    select *\r\n    from {{ ref('agg_weekly_drink_sales') }}\r\n),\r\n\r\npeak_hours as (\r\n    select\r\n        f.order_week,\r\n        array_to_string(\r\n            array(\r\n                select distinct hour\r\n                from unnest(\r\n                    split(coalesce(f.kitchen_peak_hours_weekly, '') || ',' || coalesce(d.bar_peak_hours_weekly, ''), ',')\r\n                ) as hour\r\n                where safe_cast(hour as int) is not null\r\n                order by cast(hour as int)\r\n            ), ','\r\n        ) as peak_hours_weekly\r\n    from {{ ref('agg_weekly_food_sales') }} f\r\n    join {{ ref('agg_weekly_drink_sales') }} d using (order_week)\r\n),\r\n\r\ncombined as (\r\n    select\r\n        f.order_week,\r\n        f.week_start_date,\r\n        f.week_end_date,\r\n\r\n        f.total_food_items_sold_weekly + d.total_drink_items_sold_weekly as total_items_ordered_weekly,\r\n        f.total_weekly_food_revenue + d.total_weekly_drink_revenue as total_weekly_revenue,\r\n        round(\r\n            (f.total_weekly_food_revenue + d.total_weekly_drink_revenue) /\r\n            nullif(f.total_food_items_sold_weekly + d.total_drink_items_sold_weekly, 0),\r\n            2\r\n        ) as avg_revenue_per_item_weekly,\r\n\r\n        f.food_category_diversity_weekly + d.drink_category_diversity_weekly as category_diversity_weekly,\r\n\r\n        case\r\n            when f.top_weekly_food_category_revenue >= d.top_weekly_drink_category_revenue\r\n                then f.top_weekly_food_category_name\r\n            else d.top_weekly_drink_category_name\r\n        end as top_weekly_category_name,\r\n\r\n        greatest(f.top_weekly_food_category_revenue, d.top_weekly_drink_category_revenue) as top_weekly_category_revenue,\r\n\r\n        round(f.total_weekly_food_revenue / nullif(f.total_weekly_food_revenue + d.total_weekly_drink_revenue, 0), 2) as pct_food_from_weekly_revenue,\r\n        round(d.total_weekly_drink_revenue / nullif(f.total_weekly_food_revenue + d.total_weekly_drink_revenue, 0), 2) as pct_drink_from_weekly_revenue,\r\n        round(\r\n            greatest(f.top_weekly_food_category_revenue, d.top_weekly_drink_category_revenue) /\r\n            nullif(f.total_weekly_food_revenue + d.total_weekly_drink_revenue, 0),\r\n            2\r\n        ) as pct_top_cat_of_total_weekly_revenue,\r\n\r\n        f.total_customers_weekly as total_weekly_customers,\r\n        round((f.total_weekly_food_revenue + d.total_weekly_drink_revenue) / nullif(f.total_customers_weekly, 0), 2) as avg_weekly_revenue_per_head,\r\n        round((f.total_food_items_sold_weekly + d.total_drink_items_sold_weekly) / nullif(f.total_customers_weekly, 0), 2) as avg_items_ordered_per_head_weekly,\r\n\r\n        f.total_food_orders_weekly + d.total_drink_orders_weekly as total_orders_weekly,\r\n        round((f.total_food_items_sold_weekly + d.total_drink_items_sold_weekly) / nullif((f.total_food_orders_weekly + d.total_drink_orders_weekly), 0), 2) as avg_items_per_order_weekly,\r\n        round((f.total_weekly_food_revenue + d.total_weekly_drink_revenue) / nullif((f.total_food_orders_weekly + d.total_drink_orders_weekly), 0), 2) as avg_revenue_per_order_weekly,\r\n\r\n        f.unique_food_items_ordered_weekly + d.unique_drink_items_ordered_weekly as unique_items_ordered_weekly,\r\n\r\n        round((f.avg_distinct_food_tables_per_day_weekly + d.avg_distinct_drink_tables_per_day_weekly) / 2, 2) as avg_distinct_tables_per_day_weekly\r\n\r\n    from food f\r\n    join drink d using (order_week)\r\n),\r\n\r\nweekly_totals as (\r\n    select c.*,\r\n        p.peak_hours_weekly\r\n    from combined c\r\n    left join peak_hours p using (order_week)\r\n),\r\n\r\nrevenue_trends as (\r\n    select\r\n        *,\r\n        round((total_weekly_revenue - lag(total_weekly_revenue) over (order by order_week)), 2) as weekly_revenue_change_amount,\r\n        round((total_weekly_revenue - lag(total_weekly_revenue) over (order by order_week)) / nullif(lag(total_weekly_revenue) over (order by order_week), 0), 4) as pct_change_in_weekly_revenue,\r\n        round(avg(total_weekly_revenue) over (order by order_week rows between 3 preceding and current row), 2) as rolling_avg_revenue_4wk,\r\n        round(avg(total_items_ordered_weekly) over (order by order_week rows between 3 preceding and current row), 2) as rolling_avg_items_sold_4wk\r\n    from weekly_totals\r\n)\r\n\r\nselect *\r\nfrom revenue_trends\r\norder by order_week desc", "language": "sql", "refs": [{"name": "agg_weekly_food_sales", "package": null, "version": null}, {"name": "agg_weekly_drink_sales", "package": null, "version": null}, {"name": "agg_weekly_food_sales", "package": null, "version": null}, {"name": "agg_weekly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.restaurant_data_analytics.agg_weekly_food_sales", "model.restaurant_data_analytics.agg_weekly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\agg_weekly_total_sales.sql", "compiled": true, "compiled_code": "with food as (\n    select *\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales`\n),\n\ndrink as (\n    select *\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales`\n),\n\npeak_hours as (\n    select\n        f.order_week,\n        array_to_string(\n            array(\n                select distinct hour\n                from unnest(\n                    split(coalesce(f.kitchen_peak_hours_weekly, '') || ',' || coalesce(d.bar_peak_hours_weekly, ''), ',')\n                ) as hour\n                where safe_cast(hour as int) is not null\n                order by cast(hour as int)\n            ), ','\n        ) as peak_hours_weekly\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales` f\n    join `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales` d using (order_week)\n),\n\ncombined as (\n    select\n        f.order_week,\n        f.week_start_date,\n        f.week_end_date,\n\n        f.total_food_items_sold_weekly + d.total_drink_items_sold_weekly as total_items_ordered_weekly,\n        f.total_weekly_food_revenue + d.total_weekly_drink_revenue as total_weekly_revenue,\n        round(\n            (f.total_weekly_food_revenue + d.total_weekly_drink_revenue) /\n            nullif(f.total_food_items_sold_weekly + d.total_drink_items_sold_weekly, 0),\n            2\n        ) as avg_revenue_per_item_weekly,\n\n        f.food_category_diversity_weekly + d.drink_category_diversity_weekly as category_diversity_weekly,\n\n        case\n            when f.top_weekly_food_category_revenue >= d.top_weekly_drink_category_revenue\n                then f.top_weekly_food_category_name\n            else d.top_weekly_drink_category_name\n        end as top_weekly_category_name,\n\n        greatest(f.top_weekly_food_category_revenue, d.top_weekly_drink_category_revenue) as top_weekly_category_revenue,\n\n        round(f.total_weekly_food_revenue / nullif(f.total_weekly_food_revenue + d.total_weekly_drink_revenue, 0), 2) as pct_food_from_weekly_revenue,\n        round(d.total_weekly_drink_revenue / nullif(f.total_weekly_food_revenue + d.total_weekly_drink_revenue, 0), 2) as pct_drink_from_weekly_revenue,\n        round(\n            greatest(f.top_weekly_food_category_revenue, d.top_weekly_drink_category_revenue) /\n            nullif(f.total_weekly_food_revenue + d.total_weekly_drink_revenue, 0),\n            2\n        ) as pct_top_cat_of_total_weekly_revenue,\n\n        f.total_customers_weekly as total_weekly_customers,\n        round((f.total_weekly_food_revenue + d.total_weekly_drink_revenue) / nullif(f.total_customers_weekly, 0), 2) as avg_weekly_revenue_per_head,\n        round((f.total_food_items_sold_weekly + d.total_drink_items_sold_weekly) / nullif(f.total_customers_weekly, 0), 2) as avg_items_ordered_per_head_weekly,\n\n        f.total_food_orders_weekly + d.total_drink_orders_weekly as total_orders_weekly,\n        round((f.total_food_items_sold_weekly + d.total_drink_items_sold_weekly) / nullif((f.total_food_orders_weekly + d.total_drink_orders_weekly), 0), 2) as avg_items_per_order_weekly,\n        round((f.total_weekly_food_revenue + d.total_weekly_drink_revenue) / nullif((f.total_food_orders_weekly + d.total_drink_orders_weekly), 0), 2) as avg_revenue_per_order_weekly,\n\n        f.unique_food_items_ordered_weekly + d.unique_drink_items_ordered_weekly as unique_items_ordered_weekly,\n\n        round((f.avg_distinct_food_tables_per_day_weekly + d.avg_distinct_drink_tables_per_day_weekly) / 2, 2) as avg_distinct_tables_per_day_weekly\n\n    from food f\n    join drink d using (order_week)\n),\n\nweekly_totals as (\n    select c.*,\n        p.peak_hours_weekly\n    from combined c\n    left join peak_hours p using (order_week)\n),\n\nrevenue_trends as (\n    select\n        *,\n        round((total_weekly_revenue - lag(total_weekly_revenue) over (order by order_week)), 2) as weekly_revenue_change_amount,\n        round((total_weekly_revenue - lag(total_weekly_revenue) over (order by order_week)) / nullif(lag(total_weekly_revenue) over (order by order_week), 0), 4) as pct_change_in_weekly_revenue,\n        round(avg(total_weekly_revenue) over (order by order_week rows between 3 preceding and current row), 2) as rolling_avg_revenue_4wk,\n        round(avg(total_items_ordered_weekly) over (order by order_week rows between 3 preceding and current row), 2) as rolling_avg_items_sold_4wk\n    from weekly_totals\n)\n\nselect *\nfrom revenue_trends\norder by order_week desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_week"], "time_spine": null}, "model.restaurant_data_analytics.agg_daily_metadata": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "agg_daily_metadata", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "marts\\meta\\agg_daily_metadata.sql", "original_file_path": "models\\marts\\meta\\agg_daily_metadata.sql", "unique_id": "model.restaurant_data_analytics.agg_daily_metadata", "fqn": ["restaurant_data_analytics", "marts", "meta", "agg_daily_metadata"], "alias": "agg_daily_metadata", "checksum": {"name": "sha256", "checksum": "4fd3b7b75ae61aec3b38159f0713ec3020282f14522b4a5a5dc4b7eb7f77d641"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["meta", "intermediate"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["meta", "intermediate"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["meta", "intermediate"]}, "created_at": 1747516848.7886992, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`agg_daily_metadata`", "raw_code": "{{ config(\r\n    tags=['meta', 'intermediate'],\r\n    materialized='table'\r\n) }}\r\n\r\nwith base as (\r\n    select\r\n        order_date,\r\n        item_uuid,\r\n        category,\r\n        production_department,\r\n        table_no\r\n    from {{ ref('fct_orders') }}\r\n),\r\n\r\ndaily_table_stats  as (\r\n    select\r\n        order_date,\r\n        count(distinct table_no) as distinct_tables_used_all_day\r\n    from base\r\n    group by order_date\r\n),\r\n\r\ndaily_food_stats  as (\r\n    select\r\n        order_date,\r\n        count(distinct category) as food_category_diversity_all_day,\r\n        count(distinct table_no) as food_tables_used_all_day,\r\n        count(distinct item_uuid) as unique_food_items_ordered_all_day\r\n    from base\r\n    where production_department = 'kitchen'\r\n    group by order_date\r\n),\r\n\r\ndaily_drink_stats  as (\r\n    select\r\n        order_date,\r\n        count(distinct category) as drink_category_diversity_all_day,\r\n        count(distinct table_no) as drink_tables_used_all_day,\r\n        count(distinct item_uuid) as unique_drink_items_ordered_all_day\r\n    from base\r\n    where production_department = 'bar'\r\n    group by order_date\r\n)\r\n\r\nselect\r\n    dts.order_date,\r\n    dts.distinct_tables_used_all_day,\r\n    coalesce(dfs.food_category_diversity_all_day, 0) as food_category_diversity_all_day,\r\n    coalesce(dfs.food_tables_used_all_day, 0) as distinct_food_tables_used_all_day,\r\n    coalesce(dfs.unique_food_items_ordered_all_day, 0) as unique_food_items_ordered_all_day,\r\n    coalesce(dds.drink_category_diversity_all_day, 0) as drink_category_diversity_all_day,\r\n    coalesce(dds.drink_tables_used_all_day, 0) as distinct_drink_tables_used_all_day,\r\n    coalesce(dds.unique_drink_items_ordered_all_day, 0) as unique_drink_items_ordered_all_day\r\nfrom daily_table_stats dts\r\nleft join daily_food_stats dfs using (order_date)\r\nleft join daily_drink_stats dds using (order_date)\r\norder by order_date desc", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\meta\\agg_daily_metadata.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n    select\n        order_date,\n        item_uuid,\n        category,\n        production_department,\n        table_no\n    from `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\n),\n\ndaily_table_stats  as (\n    select\n        order_date,\n        count(distinct table_no) as distinct_tables_used_all_day\n    from base\n    group by order_date\n),\n\ndaily_food_stats  as (\n    select\n        order_date,\n        count(distinct category) as food_category_diversity_all_day,\n        count(distinct table_no) as food_tables_used_all_day,\n        count(distinct item_uuid) as unique_food_items_ordered_all_day\n    from base\n    where production_department = 'kitchen'\n    group by order_date\n),\n\ndaily_drink_stats  as (\n    select\n        order_date,\n        count(distinct category) as drink_category_diversity_all_day,\n        count(distinct table_no) as drink_tables_used_all_day,\n        count(distinct item_uuid) as unique_drink_items_ordered_all_day\n    from base\n    where production_department = 'bar'\n    group by order_date\n)\n\nselect\n    dts.order_date,\n    dts.distinct_tables_used_all_day,\n    coalesce(dfs.food_category_diversity_all_day, 0) as food_category_diversity_all_day,\n    coalesce(dfs.food_tables_used_all_day, 0) as distinct_food_tables_used_all_day,\n    coalesce(dfs.unique_food_items_ordered_all_day, 0) as unique_food_items_ordered_all_day,\n    coalesce(dds.drink_category_diversity_all_day, 0) as drink_category_diversity_all_day,\n    coalesce(dds.drink_tables_used_all_day, 0) as distinct_drink_tables_used_all_day,\n    coalesce(dds.unique_drink_items_ordered_all_day, 0) as unique_drink_items_ordered_all_day\nfrom daily_table_stats dts\nleft join daily_food_stats dfs using (order_date)\nleft join daily_drink_stats dds using (order_date)\norder by order_date desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.restaurant_data_analytics.agg_monthly_metadata": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "agg_monthly_metadata", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "marts\\meta\\agg_monthly_metadata.sql", "original_file_path": "models\\marts\\meta\\agg_monthly_metadata.sql", "unique_id": "model.restaurant_data_analytics.agg_monthly_metadata", "fqn": ["restaurant_data_analytics", "marts", "meta", "agg_monthly_metadata"], "alias": "agg_monthly_metadata", "checksum": {"name": "sha256", "checksum": "bea727d634c5d21c21c4d8db861fb0eeaa2fb48693864e5be4ecd46559bd58c1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["meta", "intermediate"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["meta", "intermediate"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["meta", "intermediate"]}, "created_at": 1747516848.7917025, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`agg_monthly_metadata`", "raw_code": "{{ config(\r\n    tags=['meta', 'intermediate'],\r\n    materialized='table'\r\n) }}\r\n\r\nwith base as (\r\n    select\r\n        format_date('%Y-%m', order_date) as order_month,\r\n        order_date,\r\n        item_uuid,\r\n        category,\r\n        production_department\r\n    from {{ ref('fct_orders') }}\r\n),\r\n\r\nunique_items_ordered as (\r\n    select\r\n        order_month,\r\n        count(distinct item_uuid) as unique_items_ordered_all_month\r\n    from base\r\n    group by order_month\r\n),\r\n\r\nmonthly_food_stats as (\r\n    select\r\n        order_month,\r\n        count(distinct category) as food_category_diversity_all_month,\r\n        count(distinct item_uuid) as unique_food_items_ordered_all_month\r\n    from base\r\n    where production_department = 'kitchen'\r\n    group by order_month\r\n),\r\n\r\nmonthly_drink_stats as (\r\n    select\r\n        order_month,\r\n        count(distinct category) as drink_category_diversity_all_month,\r\n        count(distinct item_uuid) as unique_drink_items_ordered_all_month\r\n    from base\r\n    where production_department = 'bar'\r\n    group by order_month\r\n),\r\n\r\nweekend_counts as (\r\n    select\r\n        format_date('%Y-%m', order_date) as order_month,\r\n        count(distinct order_date) as weekend_days_in_month\r\n    from {{ ref('fct_orders') }}\r\n    where extract(dayofweek from order_date) in (1, 6, 7)  -- Sunday = 1, Friday = 6, Saturday = 7\r\n    group by order_month\r\n)\r\n\r\nselect\r\n    uio.order_month,\r\n    uio.unique_items_ordered_all_month,\r\n    fds.food_category_diversity_all_month,\r\n    fds.unique_food_items_ordered_all_month,\r\n    dds.drink_category_diversity_all_month,\r\n    dds.unique_drink_items_ordered_all_month,\r\n    wc.weekend_days_in_month\r\nfrom unique_items_ordered uio\r\nleft join monthly_food_stats fds using (order_month)\r\nleft join monthly_drink_stats dds using (order_month)\r\nleft join weekend_counts wc using (order_month)\r\norder by uio.order_month desc", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}, {"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\meta\\agg_monthly_metadata.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n    select\n        format_date('%Y-%m', order_date) as order_month,\n        order_date,\n        item_uuid,\n        category,\n        production_department\n    from `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\n),\n\nunique_items_ordered as (\n    select\n        order_month,\n        count(distinct item_uuid) as unique_items_ordered_all_month\n    from base\n    group by order_month\n),\n\nmonthly_food_stats as (\n    select\n        order_month,\n        count(distinct category) as food_category_diversity_all_month,\n        count(distinct item_uuid) as unique_food_items_ordered_all_month\n    from base\n    where production_department = 'kitchen'\n    group by order_month\n),\n\nmonthly_drink_stats as (\n    select\n        order_month,\n        count(distinct category) as drink_category_diversity_all_month,\n        count(distinct item_uuid) as unique_drink_items_ordered_all_month\n    from base\n    where production_department = 'bar'\n    group by order_month\n),\n\nweekend_counts as (\n    select\n        format_date('%Y-%m', order_date) as order_month,\n        count(distinct order_date) as weekend_days_in_month\n    from `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\n    where extract(dayofweek from order_date) in (1, 6, 7)  -- Sunday = 1, Friday = 6, Saturday = 7\n    group by order_month\n)\n\nselect\n    uio.order_month,\n    uio.unique_items_ordered_all_month,\n    fds.food_category_diversity_all_month,\n    fds.unique_food_items_ordered_all_month,\n    dds.drink_category_diversity_all_month,\n    dds.unique_drink_items_ordered_all_month,\n    wc.weekend_days_in_month\nfrom unique_items_ordered uio\nleft join monthly_food_stats fds using (order_month)\nleft join monthly_drink_stats dds using (order_month)\nleft join weekend_counts wc using (order_month)\norder by uio.order_month desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.restaurant_data_analytics.agg_weekly_metadata": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "agg_weekly_metadata", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "marts\\meta\\agg_weekly_metadata.sql", "original_file_path": "models\\marts\\meta\\agg_weekly_metadata.sql", "unique_id": "model.restaurant_data_analytics.agg_weekly_metadata", "fqn": ["restaurant_data_analytics", "marts", "meta", "agg_weekly_metadata"], "alias": "agg_weekly_metadata", "checksum": {"name": "sha256", "checksum": "804eaa3595c530b87747708d7bb92449432429d78d7f6411f4617c0a1cca0cf5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["meta", "intermediate"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["meta", "intermediate"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "tags": ["meta", "intermediate"]}, "created_at": 1747516848.794705, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`agg_weekly_metadata`", "raw_code": "{{ config(\r\n    tags=['meta', 'intermediate'],\r\n    materialized='table'\r\n) }}\r\n\r\n-- Base table extracting order week, item, category, and department\r\nwith base as (\r\n    select\r\n        format_date('%G-%V', order_date) as order_week,\r\n        item_uuid,\r\n        category,\r\n        production_department\r\n    from {{ ref('fct_orders') }}\r\n),\r\n\r\n-- Count of unique food items ordered per week (kitchen only)\r\nunique_food_items_ordered as (\r\n    select\r\n        order_week,\r\n        count(distinct item_uuid) as unique_food_items_ordered_all_week\r\n    from base\r\n    where production_department = 'kitchen'\r\n    group by order_week\r\n),\r\n\r\n-- Count of unique drink items ordered per week (bar only)\r\nunique_drink_items_ordered as (\r\n    select\r\n        order_week,\r\n        count(distinct item_uuid) as unique_drink_items_ordered_all_week\r\n    from base\r\n    where production_department = 'bar'\r\n    group by order_week\r\n),\r\n\r\n-- Count of unique food categories per week\r\nweekly_food_category_diversity as (\r\n    select\r\n        order_week,\r\n        count(distinct category) as food_category_diversity_all_week\r\n    from base\r\n    where production_department = 'kitchen'\r\n    group by order_week\r\n),\r\n\r\n-- Count of unique drink categories per week\r\nweekly_drink_category_diversity as (\r\n    select\r\n        order_week,\r\n        count(distinct category) as drink_category_diversity_all_week\r\n    from base\r\n    where production_department = 'bar'\r\n    group by order_week\r\n)\r\n\r\nselect\r\n    fio.order_week,\r\n    fio.unique_food_items_ordered_all_week,\r\n    dio.unique_drink_items_ordered_all_week,\r\n    fcd.food_category_diversity_all_week,\r\n    dcd.drink_category_diversity_all_week\r\nfrom unique_food_items_ordered fio\r\n-- Using INNER JOIN here because we assume every week has both food and drink orders,\r\n-- so there will always be matching order_week values in both tables.\r\ninner join unique_drink_items_ordered dio using (order_week)\r\n-- LEFT JOINs used for category diversity tables in case any week is missing categories\r\nleft join weekly_food_category_diversity fcd using (order_week)\r\nleft join weekly_drink_category_diversity dcd using (order_week)\r\norder by order_week desc", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\meta\\agg_weekly_metadata.sql", "compiled": true, "compiled_code": "\n\n-- Base table extracting order week, item, category, and department\nwith base as (\n    select\n        format_date('%G-%V', order_date) as order_week,\n        item_uuid,\n        category,\n        production_department\n    from `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\n),\n\n-- Count of unique food items ordered per week (kitchen only)\nunique_food_items_ordered as (\n    select\n        order_week,\n        count(distinct item_uuid) as unique_food_items_ordered_all_week\n    from base\n    where production_department = 'kitchen'\n    group by order_week\n),\n\n-- Count of unique drink items ordered per week (bar only)\nunique_drink_items_ordered as (\n    select\n        order_week,\n        count(distinct item_uuid) as unique_drink_items_ordered_all_week\n    from base\n    where production_department = 'bar'\n    group by order_week\n),\n\n-- Count of unique food categories per week\nweekly_food_category_diversity as (\n    select\n        order_week,\n        count(distinct category) as food_category_diversity_all_week\n    from base\n    where production_department = 'kitchen'\n    group by order_week\n),\n\n-- Count of unique drink categories per week\nweekly_drink_category_diversity as (\n    select\n        order_week,\n        count(distinct category) as drink_category_diversity_all_week\n    from base\n    where production_department = 'bar'\n    group by order_week\n)\n\nselect\n    fio.order_week,\n    fio.unique_food_items_ordered_all_week,\n    dio.unique_drink_items_ordered_all_week,\n    fcd.food_category_diversity_all_week,\n    dcd.drink_category_diversity_all_week\nfrom unique_food_items_ordered fio\n-- Using INNER JOIN here because we assume every week has both food and drink orders,\n-- so there will always be matching order_week values in both tables.\ninner join unique_drink_items_ordered dio using (order_week)\n-- LEFT JOINs used for category diversity tables in case any week is missing categories\nleft join weekly_food_category_diversity fcd using (order_week)\nleft join weekly_drink_category_diversity dcd using (order_week)\norder by order_week desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.restaurant_data_analytics.dim_time": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "dim_time", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "marts\\meta\\dim_time.sql", "original_file_path": "models\\marts\\meta\\dim_time.sql", "unique_id": "model.restaurant_data_analytics.dim_time", "fqn": ["restaurant_data_analytics", "marts", "meta", "dim_time"], "alias": "dim_time", "checksum": {"name": "sha256", "checksum": "7f6d0a9c9854b3dee97c9da9b15443c793231538a826664367f4c425d39aea27"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "A time dimension extracted from the datetime_ordered field in fct_orders. Enables slicing by hour, day of week, month, and weekend flag.\n", "columns": {"datetime_ordered": {"name": "datetime_ordered", "description": "Exact timestamp when the order was placed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_date": {"name": "order_date", "description": "Date portion of datetime_ordered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_hour": {"name": "order_hour", "description": "Hour (0\u201323) the order was placed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_minute": {"name": "order_minute", "description": "Minute (0\u201359) portion of the timestamp.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_weekday": {"name": "order_weekday", "description": "Weekday name (Monday\u2013Sunday).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_dayofweek": {"name": "order_dayofweek", "description": "Numeric weekday (1=Sunday to 7=Saturday).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_weekend": {"name": "is_weekend", "description": "Boolean flag for Friday/Saturday/Sunday.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_month": {"name": "order_month", "description": "Month name (e.g., March).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_month_num": {"name": "order_month_num", "description": "Month number (1\u201312).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_year": {"name": "order_year", "description": "Year of the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "restaurant_data_analytics://models\\marts\\meta\\dim_time.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1747516851.047067, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`dim_time`", "raw_code": "with base as (\r\n    select distinct datetime_ordered\r\n    from {{ ref('fct_orders') }}\r\n)\r\n\r\nselect\r\n    datetime_ordered,\r\n    date(datetime_ordered) as order_date,\r\n    extract(hour from datetime_ordered) as order_hour,\r\n    extract(minute from datetime_ordered) as order_minute,\r\n    format_date('%A', date(datetime_ordered)) as order_weekday,\r\n    extract(dayofweek from datetime_ordered) as order_dayofweek,  \r\n    extract(month from datetime_ordered) as order_month_num,\r\n    format_date('%B', date(datetime_ordered)) as order_month,\r\n    extract(year from datetime_ordered) as order_year,\r\n\r\n    -- Weekend flag: Friday (6), Saturday (7), Sunday (1)\r\n    case\r\n        when extract(dayofweek from datetime_ordered) in (1, 6, 7) then true\r\n        else false\r\n    end as is_weekend\r\n\r\nfrom base", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\meta\\dim_time.sql", "compiled": true, "compiled_code": "with base as (\n    select distinct datetime_ordered\n    from `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\n)\n\nselect\n    datetime_ordered,\n    date(datetime_ordered) as order_date,\n    extract(hour from datetime_ordered) as order_hour,\n    extract(minute from datetime_ordered) as order_minute,\n    format_date('%A', date(datetime_ordered)) as order_weekday,\n    extract(dayofweek from datetime_ordered) as order_dayofweek,  \n    extract(month from datetime_ordered) as order_month_num,\n    format_date('%B', date(datetime_ordered)) as order_month,\n    extract(year from datetime_ordered) as order_year,\n\n    -- Weekend flag: Friday (6), Saturday (7), Sunday (1)\n    case\n        when extract(dayofweek from datetime_ordered) in (1, 6, 7) then true\n        else false\n    end as is_weekend\n\nfrom base", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["datetime_ordered"], "time_spine": null}, "model.restaurant_data_analytics.stg_a_la_carte_menu": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "stg_a_la_carte_menu", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "staging\\stg_a_la_carte_menu.sql", "original_file_path": "models\\staging\\stg_a_la_carte_menu.sql", "unique_id": "model.restaurant_data_analytics.stg_a_la_carte_menu", "fqn": ["restaurant_data_analytics", "staging", "stg_a_la_carte_menu"], "alias": "stg_a_la_carte_menu", "checksum": {"name": "sha256", "checksum": "06a8eb82d48b3819e680feccf358f70a26ec2ecf6bcbef9df709d2fb96d66e5a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Staging model for a_la_carte menu items with basic cleaning and standardization.", "columns": {"item_uuid": {"name": "item_uuid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_name": {"name": "item_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "category": {"name": "category", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "description": {"name": "description", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_priced_per_weight": {"name": "is_priced_per_weight", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "restaurant_data_analytics://models\\staging\\stg_restaurant_data.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1747516851.1486678, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`stg_a_la_carte_menu`", "raw_code": "select\r\n  item_uuid,\r\n  item_name,\r\n  category,\r\n  `desc` as description,\r\n  price,\r\n  is_priced_per_weight\r\nfrom {{ source('restaurant_data', 'a_la_carte_menu') }}", "language": "sql", "refs": [], "sources": [["restaurant_data", "a_la_carte_menu"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.restaurant_data_analytics.restaurant_data.a_la_carte_menu"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_a_la_carte_menu.sql", "compiled": true, "compiled_code": "select\n  item_uuid,\n  item_name,\n  category,\n  `desc` as description,\n  price,\n  is_priced_per_weight\nfrom `annular-mesh-453913-r6`.`restaurant_data`.`a_la_carte_menu`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["item_uuid"], "time_spine": null}, "model.restaurant_data_analytics.stg_cocktails_and_beer_menu": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "stg_cocktails_and_beer_menu", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "staging\\stg_cocktails_and_beer_menu.sql", "original_file_path": "models\\staging\\stg_cocktails_and_beer_menu.sql", "unique_id": "model.restaurant_data_analytics.stg_cocktails_and_beer_menu", "fqn": ["restaurant_data_analytics", "staging", "stg_cocktails_and_beer_menu"], "alias": "stg_cocktails_and_beer_menu", "checksum": {"name": "sha256", "checksum": "ca0d0517218b9f652c9c5419f90d150d0f3ed378d977ffed90ee243832ef0d5a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Staging model for cocktails and beer menu items.", "columns": {"item_uuid": {"name": "item_uuid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_name": {"name": "item_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "category": {"name": "category", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "description": {"name": "description", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "restaurant_data_analytics://models\\staging\\stg_restaurant_data.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1747516851.1506698, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`stg_cocktails_and_beer_menu`", "raw_code": "select\r\n  item_uuid,\r\n  item_name,\r\n  category,\r\n  `desc` as description,\r\n  price,\r\n  \r\nfrom {{ source('restaurant_data', 'cocktails_and_beer_menu') }}", "language": "sql", "refs": [], "sources": [["restaurant_data", "cocktails_and_beer_menu"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.restaurant_data_analytics.restaurant_data.cocktails_and_beer_menu"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_cocktails_and_beer_menu.sql", "compiled": true, "compiled_code": "select\n  item_uuid,\n  item_name,\n  category,\n  `desc` as description,\n  price,\n  \nfrom `annular-mesh-453913-r6`.`restaurant_data`.`cocktails_and_beer_menu`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["item_uuid"], "time_spine": null}, "model.restaurant_data_analytics.stg_dessert_menu": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "stg_dessert_menu", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "staging\\stg_dessert_menu.sql", "original_file_path": "models\\staging\\stg_dessert_menu.sql", "unique_id": "model.restaurant_data_analytics.stg_dessert_menu", "fqn": ["restaurant_data_analytics", "staging", "stg_dessert_menu"], "alias": "stg_dessert_menu", "checksum": {"name": "sha256", "checksum": "7f0d1031c8c885228ad728beddc91f72df0fa2f3d318f4190fdcbed00f4436eb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Staging model for dessert menu items.", "columns": {"item_uuid": {"name": "item_uuid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_name": {"name": "item_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "category": {"name": "category", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "description": {"name": "description", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "restaurant_data_analytics://models\\staging\\stg_restaurant_data.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1747516851.1516716, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`stg_dessert_menu`", "raw_code": "select\r\n  item_uuid,\r\n  item_name,\r\n  category,\r\n  `desc` as description,\r\n  price,\r\n  \r\nfrom {{ source('restaurant_data', 'dessert_menu') }}", "language": "sql", "refs": [], "sources": [["restaurant_data", "dessert_menu"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.restaurant_data_analytics.restaurant_data.dessert_menu"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_dessert_menu.sql", "compiled": true, "compiled_code": "select\n  item_uuid,\n  item_name,\n  category,\n  `desc` as description,\n  price,\n  \nfrom `annular-mesh-453913-r6`.`restaurant_data`.`dessert_menu`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["item_uuid"], "time_spine": null}, "model.restaurant_data_analytics.stg_orders": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "stg_orders", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "staging\\stg_orders.sql", "original_file_path": "models\\staging\\stg_orders.sql", "unique_id": "model.restaurant_data_analytics.stg_orders", "fqn": ["restaurant_data_analytics", "staging", "stg_orders"], "alias": "stg_orders", "checksum": {"name": "sha256", "checksum": "599d971da29dcbcbbb92b6ba6fd6024dff8497a487db0753c8431ca7a2a5a87a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This staging model aggregates raw orders data to calculate the quantity of each ordered item and generates a unique surrogate key.\n", "columns": {"item_ordered_id": {"name": "item_ordered_id", "description": "A surrogate key generated for each aggregated order record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "table_no": {"name": "table_no", "description": "The table number where the order was placed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_uuid": {"name": "item_uuid", "description": "Unique identifier for the menu item that was ordered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "datetime_ordered": {"name": "datetime_ordered", "description": "Timestamp when the order was placed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "production_department": {"name": "production_department", "description": "Production department handling the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_uuid": {"name": "order_uuid", "description": "Identifier for the group of items ordered together.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "quantity": {"name": "quantity", "description": "The count of identical items aggregated from the raw orders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "restaurant_data_analytics://models\\staging\\stg_restaurant_data.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1747516851.1536734, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`stg_orders`", "raw_code": "with aggregated_orders as (\r\n    select\r\n        table_no,\r\n        item_uuid,\r\n        datetime_ordered,\r\n        dep,\r\n        order_uuid,\r\n        count(*) as quantity\r\n    from {{ source('restaurant_data', 'orders') }}\r\n    group by table_no, item_uuid, datetime_ordered, dep, order_uuid\r\n)\r\n\r\nselect\r\n    {{ dbt_utils.generate_surrogate_key(['table_no', 'item_uuid', 'datetime_ordered', 'dep', 'order_uuid']) }} as item_ordered_id,\r\n    table_no,\r\n    item_uuid,\r\n    datetime_ordered,\r\n    dep as production_department,\r\n    order_uuid,\r\n    quantity\r\nfrom aggregated_orders", "language": "sql", "refs": [], "sources": [["restaurant_data", "orders"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["source.restaurant_data_analytics.restaurant_data.orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_orders.sql", "compiled": true, "compiled_code": "with aggregated_orders as (\n    select\n        table_no,\n        item_uuid,\n        datetime_ordered,\n        dep,\n        order_uuid,\n        count(*) as quantity\n    from `annular-mesh-453913-r6`.`restaurant_data`.`orders`\n    group by table_no, item_uuid, datetime_ordered, dep, order_uuid\n)\n\nselect\n    to_hex(md5(cast(coalesce(cast(table_no as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(item_uuid as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(datetime_ordered as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(dep as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(order_uuid as string), '_dbt_utils_surrogate_key_null_') as string))) as item_ordered_id,\n    table_no,\n    item_uuid,\n    datetime_ordered,\n    dep as production_department,\n    order_uuid,\n    quantity\nfrom aggregated_orders", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["item_ordered_id"], "time_spine": null}, "model.restaurant_data_analytics.stg_wine_menu": {"database": "annular-mesh-453913-r6", "schema": "dbt_", "name": "stg_wine_menu", "resource_type": "model", "package_name": "restaurant_data_analytics", "path": "staging\\stg_wine_menu.sql", "original_file_path": "models\\staging\\stg_wine_menu.sql", "unique_id": "model.restaurant_data_analytics.stg_wine_menu", "fqn": ["restaurant_data_analytics", "staging", "stg_wine_menu"], "alias": "stg_wine_menu", "checksum": {"name": "sha256", "checksum": "67b89b798c8ab3605c12336dcd56225d6b546ed38bd0dfb2e29196ce391ec330"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Staging model for wine menu items, includes regional metadata and serving size.", "columns": {"item_uuid": {"name": "item_uuid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_name": {"name": "item_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "category": {"name": "category", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "origin_region": {"name": "origin_region", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "origin_country": {"name": "origin_country", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "serving_size": {"name": "serving_size", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "restaurant_data_analytics://models\\staging\\stg_restaurant_data.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1747516851.1526723, "relation_name": "`annular-mesh-453913-r6`.`dbt_`.`stg_wine_menu`", "raw_code": "select\r\n  item_uuid,\r\n  item_name,\r\n  category,\r\n  origin_region,\r\n  origin_country,\r\n  serving_size,\r\n  price\r\nfrom {{ source('restaurant_data', 'wine_menu') }}", "language": "sql", "refs": [], "sources": [["restaurant_data", "wine_menu"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.restaurant_data_analytics.restaurant_data.wine_menu"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_wine_menu.sql", "compiled": true, "compiled_code": "select\n  item_uuid,\n  item_name,\n  category,\n  origin_region,\n  origin_country,\n  serving_size,\n  price\nfrom `annular-mesh-453913-r6`.`restaurant_data`.`wine_menu`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["item_uuid"], "time_spine": null}, "test.restaurant_data_analytics.not_null_dim_menu_items_item_uuid.774c582c18": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_dim_menu_items_item_uuid", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_dim_menu_items_item_uuid.sql", "original_file_path": "models\\marts\\core\\dim_menu_items.yml", "unique_id": "test.restaurant_data_analytics.not_null_dim_menu_items_item_uuid.774c582c18", "fqn": ["restaurant_data_analytics", "marts", "core", "not_null_dim_menu_items_item_uuid"], "alias": "not_null_dim_menu_items_item_uuid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.054949, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_menu_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.dim_menu_items"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\dim_menu_items.yml\\not_null_dim_menu_items_item_uuid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_uuid\nfrom `annular-mesh-453913-r6`.`dbt_`.`dim_menu_items`\nwhere item_uuid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_uuid", "file_key_name": "models.dim_menu_items", "attached_node": "model.restaurant_data_analytics.dim_menu_items", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_uuid", "model": "{{ get_where_subquery(ref('dim_menu_items')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.unique_dim_menu_items_item_uuid.bd08cb1ca7": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "unique_dim_menu_items_item_uuid", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "unique_dim_menu_items_item_uuid.sql", "original_file_path": "models\\marts\\core\\dim_menu_items.yml", "unique_id": "test.restaurant_data_analytics.unique_dim_menu_items_item_uuid.bd08cb1ca7", "fqn": ["restaurant_data_analytics", "marts", "core", "unique_dim_menu_items_item_uuid"], "alias": "unique_dim_menu_items_item_uuid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.057956, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_menu_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.dim_menu_items"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\dim_menu_items.yml\\unique_dim_menu_items_item_uuid.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select item_uuid as unique_field\n  from `annular-mesh-453913-r6`.`dbt_`.`dim_menu_items`\n  where item_uuid is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_uuid", "file_key_name": "models.dim_menu_items", "attached_node": "model.restaurant_data_analytics.dim_menu_items", "test_metadata": {"name": "unique", "kwargs": {"column_name": "item_uuid", "model": "{{ get_where_subquery(ref('dim_menu_items')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_dim_menu_items_item_name.5271b11418": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_dim_menu_items_item_name", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_dim_menu_items_item_name.sql", "original_file_path": "models\\marts\\core\\dim_menu_items.yml", "unique_id": "test.restaurant_data_analytics.not_null_dim_menu_items_item_name.5271b11418", "fqn": ["restaurant_data_analytics", "marts", "core", "not_null_dim_menu_items_item_name"], "alias": "not_null_dim_menu_items_item_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.0599573, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_menu_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.dim_menu_items"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\dim_menu_items.yml\\not_null_dim_menu_items_item_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_name\nfrom `annular-mesh-453913-r6`.`dbt_`.`dim_menu_items`\nwhere item_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_name", "file_key_name": "models.dim_menu_items", "attached_node": "model.restaurant_data_analytics.dim_menu_items", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_name", "model": "{{ get_where_subquery(ref('dim_menu_items')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_dim_menu_items_category.69523848c3": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_dim_menu_items_category", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_dim_menu_items_category.sql", "original_file_path": "models\\marts\\core\\dim_menu_items.yml", "unique_id": "test.restaurant_data_analytics.not_null_dim_menu_items_category.69523848c3", "fqn": ["restaurant_data_analytics", "marts", "core", "not_null_dim_menu_items_category"], "alias": "not_null_dim_menu_items_category", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.0629604, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_menu_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.dim_menu_items"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\dim_menu_items.yml\\not_null_dim_menu_items_category.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect category\nfrom `annular-mesh-453913-r6`.`dbt_`.`dim_menu_items`\nwhere category is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category", "file_key_name": "models.dim_menu_items", "attached_node": "model.restaurant_data_analytics.dim_menu_items", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "category", "model": "{{ get_where_subquery(ref('dim_menu_items')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.accepted_values_dim_menu_items_category__Bordeaux__Champagne_Sparkling__Dessert_Wines__Port_Sherry__Rarities__Red_Wines__Rose_Wines__White_Wines__Cheese__The_Sacred_Six__Ultimate_Steakhouse_Cocktails__Time_A_Place__Lo_No_Alc__Beers_Cider__Starters__Mains__Large_Cuts__Steaks__Sauces__Extras__Sides__Burgundy__Magnums__Puddings__Ice_Cream_Sorbet__Chocolates.cf6c12d38a": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "accepted_values_dim_menu_items_category__Bordeaux__Champagne_Sparkling__Dessert_Wines__Port_Sherry__Rarities__Red_Wines__Rose_Wines__White_Wines__Cheese__The_Sacred_Six__Ultimate_Steakhouse_Cocktails__Time_A_Place__Lo_No_Alc__Beers_Cider__Starters__Mains__Large_Cuts__Steaks__Sauces__Extras__Sides__Burgundy__Magnums__Puddings__Ice_Cream_Sorbet__Chocolates", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "accepted_values_dim_menu_items_382a5226e630a07f4df47e7deccef267.sql", "original_file_path": "models\\marts\\core\\dim_menu_items.yml", "unique_id": "test.restaurant_data_analytics.accepted_values_dim_menu_items_category__Bordeaux__Champagne_Sparkling__Dessert_Wines__Port_Sherry__Rarities__Red_Wines__Rose_Wines__White_Wines__Cheese__The_Sacred_Six__Ultimate_Steakhouse_Cocktails__Time_A_Place__Lo_No_Alc__Beers_Cider__Starters__Mains__Large_Cuts__Steaks__Sauces__Extras__Sides__Burgundy__Magnums__Puddings__Ice_Cream_Sorbet__Chocolates.cf6c12d38a", "fqn": ["restaurant_data_analytics", "marts", "core", "accepted_values_dim_menu_items_category__Bordeaux__Champagne_Sparkling__Dessert_Wines__Port_Sherry__Rarities__Red_Wines__Rose_Wines__White_Wines__Cheese__The_Sacred_Six__Ultimate_Steakhouse_Cocktails__Time_A_Place__Lo_No_Alc__Beers_Cider__Starters__Mains__Large_Cuts__Steaks__Sauces__Extras__Sides__Burgundy__Magnums__Puddings__Ice_Cream_Sorbet__Chocolates"], "alias": "accepted_values_dim_menu_items_382a5226e630a07f4df47e7deccef267", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dim_menu_items_382a5226e630a07f4df47e7deccef267", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_dim_menu_items_382a5226e630a07f4df47e7deccef267"}, "created_at": 1747516849.0649624, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_menu_items_382a5226e630a07f4df47e7deccef267\") }}", "language": "sql", "refs": [{"name": "dim_menu_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.dim_menu_items"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\dim_menu_items.yml\\accepted_values_dim_menu_items_382a5226e630a07f4df47e7deccef267.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        category as value_field,\n        count(*) as n_records\n\n    from `annular-mesh-453913-r6`.`dbt_`.`dim_menu_items`\n    group by category\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Bordeaux','Champagne & Sparkling','Dessert Wines','Port & Sherry','Rarities','Red Wines','Rose Wines','White Wines','Cheese','The Sacred Six','Ultimate Steakhouse Cocktails','Time & A Place','Lo & No Alc','Beers & Cider','Starters','Mains','Large Cuts','Steaks','Sauces','Extras','Sides','Burgundy','Magnums','Puddings','Ice-Cream & Sorbet','Chocolates'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category", "file_key_name": "models.dim_menu_items", "attached_node": "model.restaurant_data_analytics.dim_menu_items", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Bordeaux", "Champagne & Sparkling", "Dessert Wines", "Port & Sherry", "Rarities", "Red Wines", "Rose Wines", "White Wines", "Cheese", "The Sacred Six", "Ultimate Steakhouse Cocktails", "Time & A Place", "Lo & No Alc", "Beers & Cider", "Starters", "Mains", "Large Cuts", "Steaks", "Sauces", "Extras", "Sides", "Burgundy", "Magnums", "Puddings", "Ice-Cream & Sorbet", "Chocolates"], "column_name": "category", "model": "{{ get_where_subquery(ref('dim_menu_items')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_dim_menu_items_price.1ac5d639c4": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_dim_menu_items_price", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_dim_menu_items_price.sql", "original_file_path": "models\\marts\\core\\dim_menu_items.yml", "unique_id": "test.restaurant_data_analytics.not_null_dim_menu_items_price.1ac5d639c4", "fqn": ["restaurant_data_analytics", "marts", "core", "not_null_dim_menu_items_price"], "alias": "not_null_dim_menu_items_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.0989928, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_menu_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.dim_menu_items"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\dim_menu_items.yml\\not_null_dim_menu_items_price.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect price\nfrom `annular-mesh-453913-r6`.`dbt_`.`dim_menu_items`\nwhere price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "price", "file_key_name": "models.dim_menu_items", "attached_node": "model.restaurant_data_analytics.dim_menu_items", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "price", "model": "{{ get_where_subquery(ref('dim_menu_items')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_dim_menu_items_is_priced_per_weight.d487175596": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_dim_menu_items_is_priced_per_weight", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_dim_menu_items_is_priced_per_weight.sql", "original_file_path": "models\\marts\\core\\dim_menu_items.yml", "unique_id": "test.restaurant_data_analytics.not_null_dim_menu_items_is_priced_per_weight.d487175596", "fqn": ["restaurant_data_analytics", "marts", "core", "not_null_dim_menu_items_is_priced_per_weight"], "alias": "not_null_dim_menu_items_is_priced_per_weight", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.1009972, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_menu_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.dim_menu_items"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\dim_menu_items.yml\\not_null_dim_menu_items_is_priced_per_weight.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_priced_per_weight\nfrom `annular-mesh-453913-r6`.`dbt_`.`dim_menu_items`\nwhere is_priced_per_weight is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_priced_per_weight", "file_key_name": "models.dim_menu_items", "attached_node": "model.restaurant_data_analytics.dim_menu_items", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_priced_per_weight", "model": "{{ get_where_subquery(ref('dim_menu_items')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_dim_menu_items_menu_source.e5d551a7f0": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_dim_menu_items_menu_source", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_dim_menu_items_menu_source.sql", "original_file_path": "models\\marts\\core\\dim_menu_items.yml", "unique_id": "test.restaurant_data_analytics.not_null_dim_menu_items_menu_source.e5d551a7f0", "fqn": ["restaurant_data_analytics", "marts", "core", "not_null_dim_menu_items_menu_source"], "alias": "not_null_dim_menu_items_menu_source", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.102998, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_menu_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.dim_menu_items"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\dim_menu_items.yml\\not_null_dim_menu_items_menu_source.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect menu_source\nfrom `annular-mesh-453913-r6`.`dbt_`.`dim_menu_items`\nwhere menu_source is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "menu_source", "file_key_name": "models.dim_menu_items", "attached_node": "model.restaurant_data_analytics.dim_menu_items", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "menu_source", "model": "{{ get_where_subquery(ref('dim_menu_items')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_fct_orders_item_ordered_id.1a48e4de0a": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_fct_orders_item_ordered_id", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_fct_orders_item_ordered_id.sql", "original_file_path": "models\\marts\\core\\fct_orders.yml", "unique_id": "test.restaurant_data_analytics.not_null_fct_orders_item_ordered_id.1a48e4de0a", "fqn": ["restaurant_data_analytics", "marts", "core", "not_null_fct_orders_item_ordered_id"], "alias": "not_null_fct_orders_item_ordered_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.111004, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\fct_orders.yml\\not_null_fct_orders_item_ordered_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_ordered_id\nfrom `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\nwhere item_ordered_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_ordered_id", "file_key_name": "models.fct_orders", "attached_node": "model.restaurant_data_analytics.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_ordered_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.unique_fct_orders_item_ordered_id.43ff115a40": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "unique_fct_orders_item_ordered_id", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "unique_fct_orders_item_ordered_id.sql", "original_file_path": "models\\marts\\core\\fct_orders.yml", "unique_id": "test.restaurant_data_analytics.unique_fct_orders_item_ordered_id.43ff115a40", "fqn": ["restaurant_data_analytics", "marts", "core", "unique_fct_orders_item_ordered_id"], "alias": "unique_fct_orders_item_ordered_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.1140065, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\fct_orders.yml\\unique_fct_orders_item_ordered_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select item_ordered_id as unique_field\n  from `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\n  where item_ordered_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_ordered_id", "file_key_name": "models.fct_orders", "attached_node": "model.restaurant_data_analytics.fct_orders", "test_metadata": {"name": "unique", "kwargs": {"column_name": "item_ordered_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_fct_orders_table_no.d78c6ee39c": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_fct_orders_table_no", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_fct_orders_table_no.sql", "original_file_path": "models\\marts\\core\\fct_orders.yml", "unique_id": "test.restaurant_data_analytics.not_null_fct_orders_table_no.d78c6ee39c", "fqn": ["restaurant_data_analytics", "marts", "core", "not_null_fct_orders_table_no"], "alias": "not_null_fct_orders_table_no", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.1160085, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\fct_orders.yml\\not_null_fct_orders_table_no.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect table_no\nfrom `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\nwhere table_no is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "table_no", "file_key_name": "models.fct_orders", "attached_node": "model.restaurant_data_analytics.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "table_no", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_fct_orders_item_uuid.145ea3a0c1": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_fct_orders_item_uuid", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_fct_orders_item_uuid.sql", "original_file_path": "models\\marts\\core\\fct_orders.yml", "unique_id": "test.restaurant_data_analytics.not_null_fct_orders_item_uuid.145ea3a0c1", "fqn": ["restaurant_data_analytics", "marts", "core", "not_null_fct_orders_item_uuid"], "alias": "not_null_fct_orders_item_uuid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.1180127, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\fct_orders.yml\\not_null_fct_orders_item_uuid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_uuid\nfrom `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\nwhere item_uuid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_uuid", "file_key_name": "models.fct_orders", "attached_node": "model.restaurant_data_analytics.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_uuid", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.relationships_fct_orders_item_uuid__item_uuid__ref_dim_menu_items_.f9ec88fbee": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "relationships_fct_orders_item_uuid__item_uuid__ref_dim_menu_items_", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "relationships_fct_orders_daf76d0a1d69175e07400b229845211f.sql", "original_file_path": "models\\marts\\core\\fct_orders.yml", "unique_id": "test.restaurant_data_analytics.relationships_fct_orders_item_uuid__item_uuid__ref_dim_menu_items_.f9ec88fbee", "fqn": ["restaurant_data_analytics", "marts", "core", "relationships_fct_orders_item_uuid__item_uuid__ref_dim_menu_items_"], "alias": "relationships_fct_orders_daf76d0a1d69175e07400b229845211f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_orders_daf76d0a1d69175e07400b229845211f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_orders_daf76d0a1d69175e07400b229845211f"}, "created_at": 1747516849.1200123, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_orders_daf76d0a1d69175e07400b229845211f\") }}", "language": "sql", "refs": [{"name": "dim_menu_items", "package": null, "version": null}, {"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.dim_menu_items", "model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\fct_orders.yml\\relationships_fct_orders_daf76d0a1d69175e07400b229845211f.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select item_uuid as from_field\n    from `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\n    where item_uuid is not null\n),\n\nparent as (\n    select item_uuid as to_field\n    from `annular-mesh-453913-r6`.`dbt_`.`dim_menu_items`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_uuid", "file_key_name": "models.fct_orders", "attached_node": "model.restaurant_data_analytics.fct_orders", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_menu_items')", "field": "item_uuid", "column_name": "item_uuid", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_fct_orders_datetime_ordered.aacf1c2eea": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_fct_orders_datetime_ordered", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_fct_orders_datetime_ordered.sql", "original_file_path": "models\\marts\\core\\fct_orders.yml", "unique_id": "test.restaurant_data_analytics.not_null_fct_orders_datetime_ordered.aacf1c2eea", "fqn": ["restaurant_data_analytics", "marts", "core", "not_null_fct_orders_datetime_ordered"], "alias": "not_null_fct_orders_datetime_ordered", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.1290205, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\fct_orders.yml\\not_null_fct_orders_datetime_ordered.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect datetime_ordered\nfrom `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\nwhere datetime_ordered is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "datetime_ordered", "file_key_name": "models.fct_orders", "attached_node": "model.restaurant_data_analytics.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "datetime_ordered", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_fct_orders_production_department.6b5c746240": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_fct_orders_production_department", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_fct_orders_production_department.sql", "original_file_path": "models\\marts\\core\\fct_orders.yml", "unique_id": "test.restaurant_data_analytics.not_null_fct_orders_production_department.6b5c746240", "fqn": ["restaurant_data_analytics", "marts", "core", "not_null_fct_orders_production_department"], "alias": "not_null_fct_orders_production_department", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.1320229, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\fct_orders.yml\\not_null_fct_orders_production_department.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect production_department\nfrom `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\nwhere production_department is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "production_department", "file_key_name": "models.fct_orders", "attached_node": "model.restaurant_data_analytics.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "production_department", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.accepted_values_fct_orders_production_department__kitchen__bar.60bb7e44ff": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "accepted_values_fct_orders_production_department__kitchen__bar", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "accepted_values_fct_orders_production_department__kitchen__bar.sql", "original_file_path": "models\\marts\\core\\fct_orders.yml", "unique_id": "test.restaurant_data_analytics.accepted_values_fct_orders_production_department__kitchen__bar.60bb7e44ff", "fqn": ["restaurant_data_analytics", "marts", "core", "accepted_values_fct_orders_production_department__kitchen__bar"], "alias": "accepted_values_fct_orders_production_department__kitchen__bar", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.1340249, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\fct_orders.yml\\accepted_values_fct_orders_production_department__kitchen__bar.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        production_department as value_field,\n        count(*) as n_records\n\n    from `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\n    group by production_department\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'kitchen','bar'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "production_department", "file_key_name": "models.fct_orders", "attached_node": "model.restaurant_data_analytics.fct_orders", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["kitchen", "bar"], "column_name": "production_department", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_fct_orders_order_uuid.9e38b191ab": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_fct_orders_order_uuid", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_fct_orders_order_uuid.sql", "original_file_path": "models\\marts\\core\\fct_orders.yml", "unique_id": "test.restaurant_data_analytics.not_null_fct_orders_order_uuid.9e38b191ab", "fqn": ["restaurant_data_analytics", "marts", "core", "not_null_fct_orders_order_uuid"], "alias": "not_null_fct_orders_order_uuid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.13903, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\fct_orders.yml\\not_null_fct_orders_order_uuid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_uuid\nfrom `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\nwhere order_uuid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_uuid", "file_key_name": "models.fct_orders", "attached_node": "model.restaurant_data_analytics.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_uuid", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_fct_orders_quantity.f754434156": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_fct_orders_quantity", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_fct_orders_quantity.sql", "original_file_path": "models\\marts\\core\\fct_orders.yml", "unique_id": "test.restaurant_data_analytics.not_null_fct_orders_quantity.f754434156", "fqn": ["restaurant_data_analytics", "marts", "core", "not_null_fct_orders_quantity"], "alias": "not_null_fct_orders_quantity", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.1410313, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\fct_orders.yml\\not_null_fct_orders_quantity.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect quantity\nfrom `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\nwhere quantity is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "quantity", "file_key_name": "models.fct_orders", "attached_node": "model.restaurant_data_analytics.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "quantity", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_fct_orders_quantity__50__1.2dc70d2c12": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_fct_orders_quantity__50__1", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_fct_orders_quantity__50__1.sql", "original_file_path": "models\\marts\\core\\fct_orders.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_fct_orders_quantity__50__1.2dc70d2c12", "fqn": ["restaurant_data_analytics", "marts", "core", "dbt_utils_accepted_range_fct_orders_quantity__50__1"], "alias": "dbt_utils_accepted_range_fct_orders_quantity__50__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.1440341, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\fct_orders.yml\\dbt_utils_accepted_range_fct_orders_quantity__50__1.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not quantity >= 1\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not quantity <= 50\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "quantity", "file_key_name": "models.fct_orders", "attached_node": "model.restaurant_data_analytics.fct_orders", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 1, "max_value": 50, "column_name": "quantity", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.not_null_fct_orders_order_date.84f0a76362": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_fct_orders_order_date", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_fct_orders_order_date.sql", "original_file_path": "models\\marts\\core\\fct_orders.yml", "unique_id": "test.restaurant_data_analytics.not_null_fct_orders_order_date.84f0a76362", "fqn": ["restaurant_data_analytics", "marts", "core", "not_null_fct_orders_order_date"], "alias": "not_null_fct_orders_order_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.154043, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\fct_orders.yml\\not_null_fct_orders_order_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_date\nfrom `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\nwhere order_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_date", "file_key_name": "models.fct_orders", "attached_node": "model.restaurant_data_analytics.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_date", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_fct_orders_order_hour.385ba97c83": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_fct_orders_order_hour", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_fct_orders_order_hour.sql", "original_file_path": "models\\marts\\core\\fct_orders.yml", "unique_id": "test.restaurant_data_analytics.not_null_fct_orders_order_hour.385ba97c83", "fqn": ["restaurant_data_analytics", "marts", "core", "not_null_fct_orders_order_hour"], "alias": "not_null_fct_orders_order_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.157055, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\fct_orders.yml\\not_null_fct_orders_order_hour.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_hour\nfrom `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\nwhere order_hour is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_hour", "file_key_name": "models.fct_orders", "attached_node": "model.restaurant_data_analytics.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_hour", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_fct_orders_order_hour__23__0.3dddbd9d13": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_fct_orders_order_hour__23__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_fct_orders_order_hour__23__0.sql", "original_file_path": "models\\marts\\core\\fct_orders.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_fct_orders_order_hour__23__0.3dddbd9d13", "fqn": ["restaurant_data_analytics", "marts", "core", "dbt_utils_accepted_range_fct_orders_order_hour__23__0"], "alias": "dbt_utils_accepted_range_fct_orders_order_hour__23__0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.1590514, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\fct_orders.yml\\dbt_utils_accepted_range_fct_orders_order_hour__23__0.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not order_hour >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not order_hour <= 23\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_hour", "file_key_name": "models.fct_orders", "attached_node": "model.restaurant_data_analytics.fct_orders", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 23, "column_name": "order_hour", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.not_null_fct_orders_order_weekday.d374011ab1": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_fct_orders_order_weekday", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_fct_orders_order_weekday.sql", "original_file_path": "models\\marts\\core\\fct_orders.yml", "unique_id": "test.restaurant_data_analytics.not_null_fct_orders_order_weekday.d374011ab1", "fqn": ["restaurant_data_analytics", "marts", "core", "not_null_fct_orders_order_weekday"], "alias": "not_null_fct_orders_order_weekday", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.1630552, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\fct_orders.yml\\not_null_fct_orders_order_weekday.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_weekday\nfrom `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\nwhere order_weekday is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_weekday", "file_key_name": "models.fct_orders", "attached_node": "model.restaurant_data_analytics.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_weekday", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.accepted_values_fct_orders_order_weekday__Monday__Tuesday__Wednesday__Thursday__Friday__Saturday__Sunday.14d53fa665": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "accepted_values_fct_orders_order_weekday__Monday__Tuesday__Wednesday__Thursday__Friday__Saturday__Sunday", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "accepted_values_fct_orders_2edafb1a26cab17604524698ea6867d4.sql", "original_file_path": "models\\marts\\core\\fct_orders.yml", "unique_id": "test.restaurant_data_analytics.accepted_values_fct_orders_order_weekday__Monday__Tuesday__Wednesday__Thursday__Friday__Saturday__Sunday.14d53fa665", "fqn": ["restaurant_data_analytics", "marts", "core", "accepted_values_fct_orders_order_weekday__Monday__Tuesday__Wednesday__Thursday__Friday__Saturday__Sunday"], "alias": "accepted_values_fct_orders_2edafb1a26cab17604524698ea6867d4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_fct_orders_2edafb1a26cab17604524698ea6867d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_fct_orders_2edafb1a26cab17604524698ea6867d4"}, "created_at": 1747516849.1650567, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fct_orders_2edafb1a26cab17604524698ea6867d4\") }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\fct_orders.yml\\accepted_values_fct_orders_2edafb1a26cab17604524698ea6867d4.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        order_weekday as value_field,\n        count(*) as n_records\n\n    from `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\n    group by order_weekday\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_weekday", "file_key_name": "models.fct_orders", "attached_node": "model.restaurant_data_analytics.fct_orders", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"], "column_name": "order_weekday", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_fct_orders_item_name.b425bb9ffe": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_fct_orders_item_name", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_fct_orders_item_name.sql", "original_file_path": "models\\marts\\core\\fct_orders.yml", "unique_id": "test.restaurant_data_analytics.not_null_fct_orders_item_name.b425bb9ffe", "fqn": ["restaurant_data_analytics", "marts", "core", "not_null_fct_orders_item_name"], "alias": "not_null_fct_orders_item_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.1735826, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\fct_orders.yml\\not_null_fct_orders_item_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_name\nfrom `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\nwhere item_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_name", "file_key_name": "models.fct_orders", "attached_node": "model.restaurant_data_analytics.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_name", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_fct_orders_category.0a620c476d": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_fct_orders_category", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_fct_orders_category.sql", "original_file_path": "models\\marts\\core\\fct_orders.yml", "unique_id": "test.restaurant_data_analytics.not_null_fct_orders_category.0a620c476d", "fqn": ["restaurant_data_analytics", "marts", "core", "not_null_fct_orders_category"], "alias": "not_null_fct_orders_category", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.1755846, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\fct_orders.yml\\not_null_fct_orders_category.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect category\nfrom `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\nwhere category is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category", "file_key_name": "models.fct_orders", "attached_node": "model.restaurant_data_analytics.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "category", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_fct_orders_price.5983e7e539": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_fct_orders_price", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_fct_orders_price.sql", "original_file_path": "models\\marts\\core\\fct_orders.yml", "unique_id": "test.restaurant_data_analytics.not_null_fct_orders_price.5983e7e539", "fqn": ["restaurant_data_analytics", "marts", "core", "not_null_fct_orders_price"], "alias": "not_null_fct_orders_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.1775858, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\fct_orders.yml\\not_null_fct_orders_price.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect price\nfrom `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\nwhere price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "price", "file_key_name": "models.fct_orders", "attached_node": "model.restaurant_data_analytics.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "price", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_fct_orders_menu_source.ab9cf8e7bc": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_fct_orders_menu_source", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_fct_orders_menu_source.sql", "original_file_path": "models\\marts\\core\\fct_orders.yml", "unique_id": "test.restaurant_data_analytics.not_null_fct_orders_menu_source.ab9cf8e7bc", "fqn": ["restaurant_data_analytics", "marts", "core", "not_null_fct_orders_menu_source"], "alias": "not_null_fct_orders_menu_source", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.180589, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\fct_orders.yml\\not_null_fct_orders_menu_source.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect menu_source\nfrom `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\nwhere menu_source is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "menu_source", "file_key_name": "models.fct_orders", "attached_node": "model.restaurant_data_analytics.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "menu_source", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.accepted_values_fct_orders_menu_source__a_la_carte__wine__dessert__cocktails_and_beer.f09ddd97a4": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "accepted_values_fct_orders_menu_source__a_la_carte__wine__dessert__cocktails_and_beer", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "accepted_values_fct_orders_3e6b9e38291275385e675fd87291047b.sql", "original_file_path": "models\\marts\\core\\fct_orders.yml", "unique_id": "test.restaurant_data_analytics.accepted_values_fct_orders_menu_source__a_la_carte__wine__dessert__cocktails_and_beer.f09ddd97a4", "fqn": ["restaurant_data_analytics", "marts", "core", "accepted_values_fct_orders_menu_source__a_la_carte__wine__dessert__cocktails_and_beer"], "alias": "accepted_values_fct_orders_3e6b9e38291275385e675fd87291047b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_fct_orders_3e6b9e38291275385e675fd87291047b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_fct_orders_3e6b9e38291275385e675fd87291047b"}, "created_at": 1747516849.1825905, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fct_orders_3e6b9e38291275385e675fd87291047b\") }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\fct_orders.yml\\accepted_values_fct_orders_3e6b9e38291275385e675fd87291047b.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        menu_source as value_field,\n        count(*) as n_records\n\n    from `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\n    group by menu_source\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'a_la_carte','wine','dessert','cocktails_and_beer'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "menu_source", "file_key_name": "models.fct_orders", "attached_node": "model.restaurant_data_analytics.fct_orders", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["a_la_carte", "wine", "dessert", "cocktails_and_beer"], "column_name": "menu_source", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_fct_orders_total_item_revenue.eb686692f4": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_fct_orders_total_item_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_fct_orders_total_item_revenue.sql", "original_file_path": "models\\marts\\core\\fct_orders.yml", "unique_id": "test.restaurant_data_analytics.not_null_fct_orders_total_item_revenue.eb686692f4", "fqn": ["restaurant_data_analytics", "marts", "core", "not_null_fct_orders_total_item_revenue"], "alias": "not_null_fct_orders_total_item_revenue", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.1885962, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.fct_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\fct_orders.yml\\not_null_fct_orders_total_item_revenue.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect total_item_revenue\nfrom `annular-mesh-453913-r6`.`dbt_`.`fct_orders`\nwhere total_item_revenue is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_item_revenue", "file_key_name": "models.fct_orders", "attached_node": "model.restaurant_data_analytics.fct_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_item_revenue", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_agg_item_performance_total_item_uuid.d59af4ffe7": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_item_performance_total_item_uuid", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_item_performance_total_item_uuid.sql", "original_file_path": "models\\marts\\core\\performance\\performance.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_item_performance_total_item_uuid.d59af4ffe7", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "not_null_agg_item_performance_total_item_uuid"], "alias": "not_null_agg_item_performance_total_item_uuid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.2086143, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_item_performance_total", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_item_performance_total"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\performance.yml\\not_null_agg_item_performance_total_item_uuid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_uuid\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_item_performance_total`\nwhere item_uuid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_uuid", "file_key_name": "models.agg_item_performance_total", "attached_node": "model.restaurant_data_analytics.agg_item_performance_total", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_uuid", "model": "{{ get_where_subquery(ref('agg_item_performance_total')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.relationships_agg_item_performance_total_item_uuid__item_uuid__ref_dim_menu_items_.ec00fe5960": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "relationships_agg_item_performance_total_item_uuid__item_uuid__ref_dim_menu_items_", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "relationships_agg_item_perform_dd83f4bd4fbeb92d8ea09e5b0a4fea69.sql", "original_file_path": "models\\marts\\core\\performance\\performance.yml", "unique_id": "test.restaurant_data_analytics.relationships_agg_item_performance_total_item_uuid__item_uuid__ref_dim_menu_items_.ec00fe5960", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "relationships_agg_item_performance_total_item_uuid__item_uuid__ref_dim_menu_items_"], "alias": "relationships_agg_item_perform_dd83f4bd4fbeb92d8ea09e5b0a4fea69", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_agg_item_perform_dd83f4bd4fbeb92d8ea09e5b0a4fea69", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_agg_item_perform_dd83f4bd4fbeb92d8ea09e5b0a4fea69"}, "created_at": 1747516849.2106164, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_agg_item_perform_dd83f4bd4fbeb92d8ea09e5b0a4fea69\") }}", "language": "sql", "refs": [{"name": "dim_menu_items", "package": null, "version": null}, {"name": "agg_item_performance_total", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.dim_menu_items", "model.restaurant_data_analytics.agg_item_performance_total"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\performance.yml\\relationships_agg_item_perform_dd83f4bd4fbeb92d8ea09e5b0a4fea69.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select item_uuid as from_field\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_item_performance_total`\n    where item_uuid is not null\n),\n\nparent as (\n    select item_uuid as to_field\n    from `annular-mesh-453913-r6`.`dbt_`.`dim_menu_items`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_uuid", "file_key_name": "models.agg_item_performance_total", "attached_node": "model.restaurant_data_analytics.agg_item_performance_total", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_menu_items')", "field": "item_uuid", "column_name": "item_uuid", "model": "{{ get_where_subquery(ref('agg_item_performance_total')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_agg_item_performance_total_item_name.09051f6158": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_item_performance_total_item_name", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_item_performance_total_item_name.sql", "original_file_path": "models\\marts\\core\\performance\\performance.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_item_performance_total_item_name.09051f6158", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "not_null_agg_item_performance_total_item_name"], "alias": "not_null_agg_item_performance_total_item_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.2166224, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_item_performance_total", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_item_performance_total"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\performance.yml\\not_null_agg_item_performance_total_item_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_name\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_item_performance_total`\nwhere item_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_name", "file_key_name": "models.agg_item_performance_total", "attached_node": "model.restaurant_data_analytics.agg_item_performance_total", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_name", "model": "{{ get_where_subquery(ref('agg_item_performance_total')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_agg_item_performance_total_menu_source.fdb34fbd23": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_item_performance_total_menu_source", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_item_performance_total_menu_source.sql", "original_file_path": "models\\marts\\core\\performance\\performance.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_item_performance_total_menu_source.fdb34fbd23", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "not_null_agg_item_performance_total_menu_source"], "alias": "not_null_agg_item_performance_total_menu_source", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.2186234, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_item_performance_total", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_item_performance_total"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\performance.yml\\not_null_agg_item_performance_total_menu_source.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect menu_source\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_item_performance_total`\nwhere menu_source is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "menu_source", "file_key_name": "models.agg_item_performance_total", "attached_node": "model.restaurant_data_analytics.agg_item_performance_total", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "menu_source", "model": "{{ get_where_subquery(ref('agg_item_performance_total')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.accepted_values_agg_item_performance_total_menu_source__a_la_carte__wine__dessert__cocktails_and_beer.4e060d3546": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "accepted_values_agg_item_performance_total_menu_source__a_la_carte__wine__dessert__cocktails_and_beer", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "accepted_values_agg_item_perfo_8f6f78f82a55676b916d76dcf12d79c7.sql", "original_file_path": "models\\marts\\core\\performance\\performance.yml", "unique_id": "test.restaurant_data_analytics.accepted_values_agg_item_performance_total_menu_source__a_la_carte__wine__dessert__cocktails_and_beer.4e060d3546", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "accepted_values_agg_item_performance_total_menu_source__a_la_carte__wine__dessert__cocktails_and_beer"], "alias": "accepted_values_agg_item_perfo_8f6f78f82a55676b916d76dcf12d79c7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_agg_item_perfo_8f6f78f82a55676b916d76dcf12d79c7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_agg_item_perfo_8f6f78f82a55676b916d76dcf12d79c7"}, "created_at": 1747516849.2236278, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_agg_item_perfo_8f6f78f82a55676b916d76dcf12d79c7\") }}", "language": "sql", "refs": [{"name": "agg_item_performance_total", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_item_performance_total"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\performance.yml\\accepted_values_agg_item_perfo_8f6f78f82a55676b916d76dcf12d79c7.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        menu_source as value_field,\n        count(*) as n_records\n\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_item_performance_total`\n    group by menu_source\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'a_la_carte','wine','dessert','cocktails_and_beer'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "menu_source", "file_key_name": "models.agg_item_performance_total", "attached_node": "model.restaurant_data_analytics.agg_item_performance_total", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["a_la_carte", "wine", "dessert", "cocktails_and_beer"], "column_name": "menu_source", "model": "{{ get_where_subquery(ref('agg_item_performance_total')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_agg_item_performance_total_item_category.bd180f74c3": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_item_performance_total_item_category", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_item_performance_total_item_category.sql", "original_file_path": "models\\marts\\core\\performance\\performance.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_item_performance_total_item_category.bd180f74c3", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "not_null_agg_item_performance_total_item_category"], "alias": "not_null_agg_item_performance_total_item_category", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.2286322, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_item_performance_total", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_item_performance_total"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\performance.yml\\not_null_agg_item_performance_total_item_category.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_category\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_item_performance_total`\nwhere item_category is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_category", "file_key_name": "models.agg_item_performance_total", "attached_node": "model.restaurant_data_analytics.agg_item_performance_total", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_category", "model": "{{ get_where_subquery(ref('agg_item_performance_total')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_agg_item_performance_total_total_units_sold.411c818a19": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_item_performance_total_total_units_sold", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_item_performance_total_total_units_sold.sql", "original_file_path": "models\\marts\\core\\performance\\performance.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_item_performance_total_total_units_sold.411c818a19", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "not_null_agg_item_performance_total_total_units_sold"], "alias": "not_null_agg_item_performance_total_total_units_sold", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.2306342, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_item_performance_total", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_item_performance_total"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\performance.yml\\not_null_agg_item_performance_total_total_units_sold.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect total_units_sold\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_item_performance_total`\nwhere total_units_sold is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_units_sold", "file_key_name": "models.agg_item_performance_total", "attached_node": "model.restaurant_data_analytics.agg_item_performance_total", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_units_sold", "model": "{{ get_where_subquery(ref('agg_item_performance_total')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_item_performance_total_total_units_sold___0_.aaffeb542c": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_item_performance_total_total_units_sold___0_", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_0f0daf331e74f6dcf715966f9bbc3982.sql", "original_file_path": "models\\marts\\core\\performance\\performance.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_item_performance_total_total_units_sold___0_.aaffeb542c", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "dbt_utils_expression_is_true_agg_item_performance_total_total_units_sold___0_"], "alias": "dbt_utils_expression_is_true_a_0f0daf331e74f6dcf715966f9bbc3982", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_0f0daf331e74f6dcf715966f9bbc3982", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_0f0daf331e74f6dcf715966f9bbc3982"}, "created_at": 1747516849.2336376, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_0f0daf331e74f6dcf715966f9bbc3982\") }}", "language": "sql", "refs": [{"name": "agg_item_performance_total", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_item_performance_total"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\performance.yml\\dbt_utils_expression_is_true_a_0f0daf331e74f6dcf715966f9bbc3982.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_item_performance_total`\n\nwhere not(total_units_sold >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_units_sold", "file_key_name": "models.agg_item_performance_total", "attached_node": "model.restaurant_data_analytics.agg_item_performance_total", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0\n", "column_name": "total_units_sold", "model": "{{ get_where_subquery(ref('agg_item_performance_total')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.not_null_agg_item_performance_total_total_revenue.210bfcd51f": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_item_performance_total_total_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_item_performance_total_total_revenue.sql", "original_file_path": "models\\marts\\core\\performance\\performance.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_item_performance_total_total_revenue.210bfcd51f", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "not_null_agg_item_performance_total_total_revenue"], "alias": "not_null_agg_item_performance_total_total_revenue", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.245648, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_item_performance_total", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_item_performance_total"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\performance.yml\\not_null_agg_item_performance_total_total_revenue.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect total_revenue\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_item_performance_total`\nwhere total_revenue is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_revenue", "file_key_name": "models.agg_item_performance_total", "attached_node": "model.restaurant_data_analytics.agg_item_performance_total", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_revenue", "model": "{{ get_where_subquery(ref('agg_item_performance_total')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_item_performance_total_total_revenue___0_.8157fc0670": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_item_performance_total_total_revenue___0_", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_bab893e8c8955e979278b0f03059ba6f.sql", "original_file_path": "models\\marts\\core\\performance\\performance.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_item_performance_total_total_revenue___0_.8157fc0670", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "dbt_utils_expression_is_true_agg_item_performance_total_total_revenue___0_"], "alias": "dbt_utils_expression_is_true_a_bab893e8c8955e979278b0f03059ba6f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_bab893e8c8955e979278b0f03059ba6f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_bab893e8c8955e979278b0f03059ba6f"}, "created_at": 1747516849.2476504, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_bab893e8c8955e979278b0f03059ba6f\") }}", "language": "sql", "refs": [{"name": "agg_item_performance_total", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_item_performance_total"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\performance.yml\\dbt_utils_expression_is_true_a_bab893e8c8955e979278b0f03059ba6f.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_item_performance_total`\n\nwhere not(total_revenue >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_revenue", "file_key_name": "models.agg_item_performance_total", "attached_node": "model.restaurant_data_analytics.agg_item_performance_total", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0\n", "column_name": "total_revenue", "model": "{{ get_where_subquery(ref('agg_item_performance_total')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_item_performance_total_avg_order_hour__24__0.181d79d065": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_item_performance_total_avg_order_hour__24__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_i_2e3872c163a29af66f465963d2f96abc.sql", "original_file_path": "models\\marts\\core\\performance\\performance.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_item_performance_total_avg_order_hour__24__0.181d79d065", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "dbt_utils_accepted_range_agg_item_performance_total_avg_order_hour__24__0"], "alias": "dbt_utils_accepted_range_agg_i_2e3872c163a29af66f465963d2f96abc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_i_2e3872c163a29af66f465963d2f96abc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_i_2e3872c163a29af66f465963d2f96abc"}, "created_at": 1747516849.2526543, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_i_2e3872c163a29af66f465963d2f96abc\") }}", "language": "sql", "refs": [{"name": "agg_item_performance_total", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_item_performance_total"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\performance.yml\\dbt_utils_accepted_range_agg_i_2e3872c163a29af66f465963d2f96abc.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_item_performance_total`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not avg_order_hour >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not avg_order_hour <= 24\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_order_hour", "file_key_name": "models.agg_item_performance_total", "attached_node": "model.restaurant_data_analytics.agg_item_performance_total", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 24, "column_name": "avg_order_hour", "model": "{{ get_where_subquery(ref('agg_item_performance_total')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.not_null_agg_item_performance_total_percent_of_total_sales.a03d3d8905": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_item_performance_total_percent_of_total_sales", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_item_performance_total_percent_of_total_sales.sql", "original_file_path": "models\\marts\\core\\performance\\performance.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_item_performance_total_percent_of_total_sales.a03d3d8905", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "not_null_agg_item_performance_total_percent_of_total_sales"], "alias": "not_null_agg_item_performance_total_percent_of_total_sales", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.257659, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_item_performance_total", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_item_performance_total"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\performance.yml\\not_null_agg_item_performance_total_percent_of_total_sales.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect percent_of_total_sales\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_item_performance_total`\nwhere percent_of_total_sales is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "percent_of_total_sales", "file_key_name": "models.agg_item_performance_total", "attached_node": "model.restaurant_data_analytics.agg_item_performance_total", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "percent_of_total_sales", "model": "{{ get_where_subquery(ref('agg_item_performance_total')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_item_performance_total_percent_of_total_sales__100__0.4490803867": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_item_performance_total_percent_of_total_sales__100__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_i_73bafe91ae452faec80a81dea3cc3765.sql", "original_file_path": "models\\marts\\core\\performance\\performance.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_item_performance_total_percent_of_total_sales__100__0.4490803867", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "dbt_utils_accepted_range_agg_item_performance_total_percent_of_total_sales__100__0"], "alias": "dbt_utils_accepted_range_agg_i_73bafe91ae452faec80a81dea3cc3765", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_i_73bafe91ae452faec80a81dea3cc3765", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_i_73bafe91ae452faec80a81dea3cc3765"}, "created_at": 1747516849.2596612, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_i_73bafe91ae452faec80a81dea3cc3765\") }}", "language": "sql", "refs": [{"name": "agg_item_performance_total", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_item_performance_total"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\performance.yml\\dbt_utils_accepted_range_agg_i_73bafe91ae452faec80a81dea3cc3765.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_item_performance_total`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not percent_of_total_sales >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not percent_of_total_sales <= 100\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "percent_of_total_sales", "file_key_name": "models.agg_item_performance_total", "attached_node": "model.restaurant_data_analytics.agg_item_performance_total", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 100, "column_name": "percent_of_total_sales", "model": "{{ get_where_subquery(ref('agg_item_performance_total')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.not_null_agg_category_performance_category.a23d4da1b4": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_category_performance_category", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_category_performance_category.sql", "original_file_path": "models\\marts\\core\\performance\\performance.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_category_performance_category.a23d4da1b4", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "not_null_agg_category_performance_category"], "alias": "not_null_agg_category_performance_category", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.2646656, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_category_performance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_category_performance"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\performance.yml\\not_null_agg_category_performance_category.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect category\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_category_performance`\nwhere category is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category", "file_key_name": "models.agg_category_performance", "attached_node": "model.restaurant_data_analytics.agg_category_performance", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "category", "model": "{{ get_where_subquery(ref('agg_category_performance')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_agg_category_performance_menu_source.1bad3d7d85": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_category_performance_menu_source", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_category_performance_menu_source.sql", "original_file_path": "models\\marts\\core\\performance\\performance.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_category_performance_menu_source.1bad3d7d85", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "not_null_agg_category_performance_menu_source"], "alias": "not_null_agg_category_performance_menu_source", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.266668, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_category_performance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_category_performance"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\performance.yml\\not_null_agg_category_performance_menu_source.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect menu_source\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_category_performance`\nwhere menu_source is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "menu_source", "file_key_name": "models.agg_category_performance", "attached_node": "model.restaurant_data_analytics.agg_category_performance", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "menu_source", "model": "{{ get_where_subquery(ref('agg_category_performance')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_agg_category_performance_avg_price.51b124e7fa": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_category_performance_avg_price", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_category_performance_avg_price.sql", "original_file_path": "models\\marts\\core\\performance\\performance.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_category_performance_avg_price.51b124e7fa", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "not_null_agg_category_performance_avg_price"], "alias": "not_null_agg_category_performance_avg_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.2696712, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_category_performance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_category_performance"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\performance.yml\\not_null_agg_category_performance_avg_price.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect avg_price\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_category_performance`\nwhere avg_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_price", "file_key_name": "models.agg_category_performance", "attached_node": "model.restaurant_data_analytics.agg_category_performance", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "avg_price", "model": "{{ get_where_subquery(ref('agg_category_performance')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_avg_price___0_.073766ce7d": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_category_performance_avg_price___0_", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_5e126ebe9d772c4e200dfa9cdaccf8c5.sql", "original_file_path": "models\\marts\\core\\performance\\performance.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_avg_price___0_.073766ce7d", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "dbt_utils_expression_is_true_agg_category_performance_avg_price___0_"], "alias": "dbt_utils_expression_is_true_a_5e126ebe9d772c4e200dfa9cdaccf8c5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_5e126ebe9d772c4e200dfa9cdaccf8c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_5e126ebe9d772c4e200dfa9cdaccf8c5"}, "created_at": 1747516849.2716715, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_5e126ebe9d772c4e200dfa9cdaccf8c5\") }}", "language": "sql", "refs": [{"name": "agg_category_performance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_category_performance"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\performance.yml\\dbt_utils_expression_is_true_a_5e126ebe9d772c4e200dfa9cdaccf8c5.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_category_performance`\n\nwhere not(avg_price >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_price", "file_key_name": "models.agg_category_performance", "attached_node": "model.restaurant_data_analytics.agg_category_performance", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0\n", "column_name": "avg_price", "model": "{{ get_where_subquery(ref('agg_category_performance')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.not_null_agg_category_performance_avg_price_per_unit.d1c50d715f": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_category_performance_avg_price_per_unit", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_category_performance_avg_price_per_unit.sql", "original_file_path": "models\\marts\\core\\performance\\performance.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_category_performance_avg_price_per_unit.d1c50d715f", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "not_null_agg_category_performance_avg_price_per_unit"], "alias": "not_null_agg_category_performance_avg_price_per_unit", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.2766762, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_category_performance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_category_performance"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\performance.yml\\not_null_agg_category_performance_avg_price_per_unit.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect avg_price_per_unit\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_category_performance`\nwhere avg_price_per_unit is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_price_per_unit", "file_key_name": "models.agg_category_performance", "attached_node": "model.restaurant_data_analytics.agg_category_performance", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "avg_price_per_unit", "model": "{{ get_where_subquery(ref('agg_category_performance')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_avg_price_per_unit___0_.05c884321e": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_category_performance_avg_price_per_unit___0_", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_3b14f9d056af0dd9a1307a5e29f7f2fc.sql", "original_file_path": "models\\marts\\core\\performance\\performance.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_avg_price_per_unit___0_.05c884321e", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "dbt_utils_expression_is_true_agg_category_performance_avg_price_per_unit___0_"], "alias": "dbt_utils_expression_is_true_a_3b14f9d056af0dd9a1307a5e29f7f2fc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_3b14f9d056af0dd9a1307a5e29f7f2fc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_3b14f9d056af0dd9a1307a5e29f7f2fc"}, "created_at": 1747516849.2796795, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_3b14f9d056af0dd9a1307a5e29f7f2fc\") }}", "language": "sql", "refs": [{"name": "agg_category_performance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_category_performance"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\performance.yml\\dbt_utils_expression_is_true_a_3b14f9d056af0dd9a1307a5e29f7f2fc.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_category_performance`\n\nwhere not(avg_price_per_unit >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_price_per_unit", "file_key_name": "models.agg_category_performance", "attached_node": "model.restaurant_data_analytics.agg_category_performance", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0\n", "column_name": "avg_price_per_unit", "model": "{{ get_where_subquery(ref('agg_category_performance')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_total_units_sold_30d___0_.8f3fe48be0": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_category_performance_total_units_sold_30d___0_", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_8d38a054ce89a3db5d927384930f7c0d.sql", "original_file_path": "models\\marts\\core\\performance\\performance.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_total_units_sold_30d___0_.8f3fe48be0", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "dbt_utils_expression_is_true_agg_category_performance_total_units_sold_30d___0_"], "alias": "dbt_utils_expression_is_true_a_8d38a054ce89a3db5d927384930f7c0d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_8d38a054ce89a3db5d927384930f7c0d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_8d38a054ce89a3db5d927384930f7c0d"}, "created_at": 1747516849.2866862, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_8d38a054ce89a3db5d927384930f7c0d\") }}", "language": "sql", "refs": [{"name": "agg_category_performance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_category_performance"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\performance.yml\\dbt_utils_expression_is_true_a_8d38a054ce89a3db5d927384930f7c0d.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_category_performance`\n\nwhere not(total_units_sold_30d >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_units_sold_30d", "file_key_name": "models.agg_category_performance", "attached_node": "model.restaurant_data_analytics.agg_category_performance", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0\n", "column_name": "total_units_sold_30d", "model": "{{ get_where_subquery(ref('agg_category_performance')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_total_revenue_30d___0_.c315b16e27": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_category_performance_total_revenue_30d___0_", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_45e1b03e402d8789189fdd15b4b3e24f.sql", "original_file_path": "models\\marts\\core\\performance\\performance.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_total_revenue_30d___0_.c315b16e27", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "dbt_utils_expression_is_true_agg_category_performance_total_revenue_30d___0_"], "alias": "dbt_utils_expression_is_true_a_45e1b03e402d8789189fdd15b4b3e24f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_45e1b03e402d8789189fdd15b4b3e24f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_45e1b03e402d8789189fdd15b4b3e24f"}, "created_at": 1747516849.2916896, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_45e1b03e402d8789189fdd15b4b3e24f\") }}", "language": "sql", "refs": [{"name": "agg_category_performance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_category_performance"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\performance.yml\\dbt_utils_expression_is_true_a_45e1b03e402d8789189fdd15b4b3e24f.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_category_performance`\n\nwhere not(total_revenue_30d >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_revenue_30d", "file_key_name": "models.agg_category_performance", "attached_node": "model.restaurant_data_analytics.agg_category_performance", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0\n", "column_name": "total_revenue_30d", "model": "{{ get_where_subquery(ref('agg_category_performance')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_total_units_sold_7d___0_.2adb4a1d35": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_category_performance_total_units_sold_7d___0_", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_d3e9c18375ad0942544af12562659a3e.sql", "original_file_path": "models\\marts\\core\\performance\\performance.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_total_units_sold_7d___0_.2adb4a1d35", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "dbt_utils_expression_is_true_agg_category_performance_total_units_sold_7d___0_"], "alias": "dbt_utils_expression_is_true_a_d3e9c18375ad0942544af12562659a3e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_d3e9c18375ad0942544af12562659a3e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_d3e9c18375ad0942544af12562659a3e"}, "created_at": 1747516849.2976964, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_d3e9c18375ad0942544af12562659a3e\") }}", "language": "sql", "refs": [{"name": "agg_category_performance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_category_performance"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\performance.yml\\dbt_utils_expression_is_true_a_d3e9c18375ad0942544af12562659a3e.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_category_performance`\n\nwhere not(total_units_sold_7d >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_units_sold_7d", "file_key_name": "models.agg_category_performance", "attached_node": "model.restaurant_data_analytics.agg_category_performance", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0\n", "column_name": "total_units_sold_7d", "model": "{{ get_where_subquery(ref('agg_category_performance')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_total_revenue_7d___0.bba097983c": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_category_performance_total_revenue_7d___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_90485113dc7651b43d63f0ab9a53eb0b.sql", "original_file_path": "models\\marts\\core\\performance\\performance.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_total_revenue_7d___0.bba097983c", "fqn": ["restaurant_data_analytics", "marts", "core", "performance", "dbt_utils_expression_is_true_agg_category_performance_total_revenue_7d___0"], "alias": "dbt_utils_expression_is_true_a_90485113dc7651b43d63f0ab9a53eb0b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_90485113dc7651b43d63f0ab9a53eb0b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_90485113dc7651b43d63f0ab9a53eb0b"}, "created_at": 1747516849.3047018, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_90485113dc7651b43d63f0ab9a53eb0b\") }}", "language": "sql", "refs": [{"name": "agg_category_performance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_category_performance"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\performance\\performance.yml\\dbt_utils_expression_is_true_a_90485113dc7651b43d63f0ab9a53eb0b.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_category_performance`\n\nwhere not(total_revenue_7d >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_revenue_7d", "file_key_name": "models.agg_category_performance", "attached_node": "model.restaurant_data_analytics.agg_category_performance", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_revenue_7d", "model": "{{ get_where_subquery(ref('agg_category_performance')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.not_null_agg_hourly_drink_sales_order_hour_dt.261b9a4fe9": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_hourly_drink_sales_order_hour_dt", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_hourly_drink_sales_order_hour_dt.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_hourly_drink_sales_order_hour_dt.261b9a4fe9", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "not_null_agg_hourly_drink_sales_order_hour_dt"], "alias": "not_null_agg_hourly_drink_sales_order_hour_dt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.4538393, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\not_null_agg_hourly_drink_sales_order_hour_dt.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_hour_dt\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\nwhere order_hour_dt is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_hour_dt", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_hour_dt", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.unique_agg_hourly_drink_sales_order_hour_dt.4361589091": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "unique_agg_hourly_drink_sales_order_hour_dt", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "unique_agg_hourly_drink_sales_order_hour_dt.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.unique_agg_hourly_drink_sales_order_hour_dt.4361589091", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "unique_agg_hourly_drink_sales_order_hour_dt"], "alias": "unique_agg_hourly_drink_sales_order_hour_dt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.45584, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\unique_agg_hourly_drink_sales_order_hour_dt.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select order_hour_dt as unique_field\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n  where order_hour_dt is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_hour_dt", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_hour_dt", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_agg_hourly_drink_sales_order_date.0de88677a0": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_hourly_drink_sales_order_date", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_hourly_drink_sales_order_date.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_hourly_drink_sales_order_date.0de88677a0", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "not_null_agg_hourly_drink_sales_order_date"], "alias": "not_null_agg_hourly_drink_sales_order_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.4578419, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\not_null_agg_hourly_drink_sales_order_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_date\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\nwhere order_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_date", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_date", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_agg_hourly_drink_sales_hour_of_day.2583d9df37": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_hourly_drink_sales_hour_of_day", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_hourly_drink_sales_hour_of_day.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_hourly_drink_sales_hour_of_day.2583d9df37", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "not_null_agg_hourly_drink_sales_hour_of_day"], "alias": "not_null_agg_hourly_drink_sales_hour_of_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.4598434, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\not_null_agg_hourly_drink_sales_hour_of_day.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect hour_of_day\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\nwhere hour_of_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hour_of_day", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hour_of_day", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_drink_sales_hour_of_day__23__0.3e29f6efcf": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_hourly_drink_sales_hour_of_day__23__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_h_be78d3920d3fb0d645557c0d2a802c4f.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_drink_sales_hour_of_day__23__0.3e29f6efcf", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_accepted_range_agg_hourly_drink_sales_hour_of_day__23__0"], "alias": "dbt_utils_accepted_range_agg_h_be78d3920d3fb0d645557c0d2a802c4f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_h_be78d3920d3fb0d645557c0d2a802c4f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_h_be78d3920d3fb0d645557c0d2a802c4f"}, "created_at": 1747516849.4628463, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_h_be78d3920d3fb0d645557c0d2a802c4f\") }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_accepted_range_agg_h_be78d3920d3fb0d645557c0d2a802c4f.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not hour_of_day >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not hour_of_day <= 23\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hour_of_day", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 23, "column_name": "hour_of_day", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_total_drink_items_ordered_per_hour___0.3450c2e2d6": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_drink_sales_total_drink_items_ordered_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_a089e0f2655c9cfcd549ce1f2ea946de.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_total_drink_items_ordered_per_hour___0.3450c2e2d6", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_drink_sales_total_drink_items_ordered_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_a089e0f2655c9cfcd549ce1f2ea946de", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_a089e0f2655c9cfcd549ce1f2ea946de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_a089e0f2655c9cfcd549ce1f2ea946de"}, "created_at": 1747516849.4678516, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_a089e0f2655c9cfcd549ce1f2ea946de\") }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_a089e0f2655c9cfcd549ce1f2ea946de.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n\nwhere not(total_drink_items_ordered_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_drink_items_ordered_per_hour", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_drink_items_ordered_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_total_drink_revenue_per_hour___0.573915afdc": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_drink_sales_total_drink_revenue_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_271744a36685b41647b02bd376105c2d.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_total_drink_revenue_per_hour___0.573915afdc", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_drink_sales_total_drink_revenue_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_271744a36685b41647b02bd376105c2d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_271744a36685b41647b02bd376105c2d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_271744a36685b41647b02bd376105c2d"}, "created_at": 1747516849.4728553, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_271744a36685b41647b02bd376105c2d\") }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_271744a36685b41647b02bd376105c2d.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n\nwhere not(total_drink_revenue_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_drink_revenue_per_hour", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_drink_revenue_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_item_per_hour___0.023de2042a": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_item_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_d873c83a7678b7b4b4fa62e2e7d996d0.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_item_per_hour___0.023de2042a", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_item_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_d873c83a7678b7b4b4fa62e2e7d996d0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_d873c83a7678b7b4b4fa62e2e7d996d0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_d873c83a7678b7b4b4fa62e2e7d996d0"}, "created_at": 1747516849.4788606, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_d873c83a7678b7b4b4fa62e2e7d996d0\") }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_d873c83a7678b7b4b4fa62e2e7d996d0.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n\nwhere not(avg_revenue_per_drink_item_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_drink_item_per_hour", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_revenue_per_drink_item_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_item_per_hour___total_drink_revenue_per_hour.afdadd8a60": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_item_per_hour___total_drink_revenue_per_hour", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_90da00c1178ee011778b64d33603fc8a.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_item_per_hour___total_drink_revenue_per_hour.afdadd8a60", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_item_per_hour___total_drink_revenue_per_hour"], "alias": "dbt_utils_expression_is_true_a_90da00c1178ee011778b64d33603fc8a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_90da00c1178ee011778b64d33603fc8a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_90da00c1178ee011778b64d33603fc8a"}, "created_at": 1747516849.4838655, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_90da00c1178ee011778b64d33603fc8a\") }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_90da00c1178ee011778b64d33603fc8a.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n\nwhere not(avg_revenue_per_drink_item_per_hour <= total_drink_revenue_per_hour)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_drink_item_per_hour", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_drink_revenue_per_hour", "column_name": "avg_revenue_per_drink_item_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.accepted_values_agg_hourly_drink_sales_top_drink_category_name_per_hour__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy.261d498c1b": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "accepted_values_agg_hourly_drink_sales_top_drink_category_name_per_hour__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "accepted_values_agg_hourly_dri_412f65c4a320b98566b4c6731f58d0b7.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.accepted_values_agg_hourly_drink_sales_top_drink_category_name_per_hour__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy.261d498c1b", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "accepted_values_agg_hourly_drink_sales_top_drink_category_name_per_hour__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy"], "alias": "accepted_values_agg_hourly_dri_412f65c4a320b98566b4c6731f58d0b7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_agg_hourly_dri_412f65c4a320b98566b4c6731f58d0b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_agg_hourly_dri_412f65c4a320b98566b4c6731f58d0b7"}, "created_at": 1747516849.4898708, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_agg_hourly_dri_412f65c4a320b98566b4c6731f58d0b7\") }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\accepted_values_agg_hourly_dri_412f65c4a320b98566b4c6731f58d0b7.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        top_drink_category_name_per_hour as value_field,\n        count(*) as n_records\n\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n    group by top_drink_category_name_per_hour\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Beers & Cider','Lo & No Alc','Port & Sherry','Ultimate Steakhouse Cocktails','Time & A Place','Rarities','The Sacred Six','Red Wines','Champagne & Sparkling','Rose Wines','Dessert Wines','White Wines','Magnums','Bordeaux','Burgundy'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_drink_category_name_per_hour", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Beers & Cider", "Lo & No Alc", "Port & Sherry", "Ultimate Steakhouse Cocktails", "Time & A Place", "Rarities", "The Sacred Six", "Red Wines", "Champagne & Sparkling", "Rose Wines", "Dessert Wines", "White Wines", "Magnums", "Bordeaux", "Burgundy"], "column_name": "top_drink_category_name_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_top_drink_category_revenue_per_hour___0.786b3bbdfa": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_drink_sales_top_drink_category_revenue_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_e9dbf82cb2834ada50cf32c72270c93e.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_top_drink_category_revenue_per_hour___0.786b3bbdfa", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_drink_sales_top_drink_category_revenue_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_e9dbf82cb2834ada50cf32c72270c93e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_e9dbf82cb2834ada50cf32c72270c93e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_e9dbf82cb2834ada50cf32c72270c93e"}, "created_at": 1747516849.4948757, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_e9dbf82cb2834ada50cf32c72270c93e\") }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_e9dbf82cb2834ada50cf32c72270c93e.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n\nwhere not(top_drink_category_revenue_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_drink_category_revenue_per_hour", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "top_drink_category_revenue_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_top_drink_category_revenue_per_hour___total_drink_revenue_per_hour.65074ddea5": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_drink_sales_top_drink_category_revenue_per_hour___total_drink_revenue_per_hour", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_844985ec9dc5f89fdf1b8e60b7b19309.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_top_drink_category_revenue_per_hour___total_drink_revenue_per_hour.65074ddea5", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_drink_sales_top_drink_category_revenue_per_hour___total_drink_revenue_per_hour"], "alias": "dbt_utils_expression_is_true_a_844985ec9dc5f89fdf1b8e60b7b19309", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_844985ec9dc5f89fdf1b8e60b7b19309", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_844985ec9dc5f89fdf1b8e60b7b19309"}, "created_at": 1747516849.49988, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_844985ec9dc5f89fdf1b8e60b7b19309\") }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_844985ec9dc5f89fdf1b8e60b7b19309.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n\nwhere not(top_drink_category_revenue_per_hour <= total_drink_revenue_per_hour)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_drink_category_revenue_per_hour", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_drink_revenue_per_hour", "column_name": "top_drink_category_revenue_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_drink_sales_pct_top_drink_cat_of_drink_revenue_per_hour__1__0.e57c775c7b": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_hourly_drink_sales_pct_top_drink_cat_of_drink_revenue_per_hour__1__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_h_6baacab3307cc5eeb88d063e0f41a417.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_drink_sales_pct_top_drink_cat_of_drink_revenue_per_hour__1__0.e57c775c7b", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_accepted_range_agg_hourly_drink_sales_pct_top_drink_cat_of_drink_revenue_per_hour__1__0"], "alias": "dbt_utils_accepted_range_agg_h_6baacab3307cc5eeb88d063e0f41a417", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_h_6baacab3307cc5eeb88d063e0f41a417", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_h_6baacab3307cc5eeb88d063e0f41a417"}, "created_at": 1747516849.5058851, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_h_6baacab3307cc5eeb88d063e0f41a417\") }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_accepted_range_agg_h_6baacab3307cc5eeb88d063e0f41a417.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_top_drink_cat_of_drink_revenue_per_hour >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_top_drink_cat_of_drink_revenue_per_hour <= 1\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_top_drink_cat_of_drink_revenue_per_hour", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_top_drink_cat_of_drink_revenue_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_distinct_drink_tables_per_hour___0.7e82d1f7eb": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_drink_sales_distinct_drink_tables_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_9809d40a21eafa81798238e8eb435f35.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_distinct_drink_tables_per_hour___0.7e82d1f7eb", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_drink_sales_distinct_drink_tables_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_9809d40a21eafa81798238e8eb435f35", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_9809d40a21eafa81798238e8eb435f35", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_9809d40a21eafa81798238e8eb435f35"}, "created_at": 1747516849.51089, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_9809d40a21eafa81798238e8eb435f35\") }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_9809d40a21eafa81798238e8eb435f35.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n\nwhere not(distinct_drink_tables_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "distinct_drink_tables_per_hour", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "distinct_drink_tables_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_distinct_drink_tables_per_hour___50.46da344194": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_drink_sales_distinct_drink_tables_per_hour___50", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_63e8d119101b1bbafe5a447ac46b8090.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_distinct_drink_tables_per_hour___50.46da344194", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_drink_sales_distinct_drink_tables_per_hour___50"], "alias": "dbt_utils_expression_is_true_a_63e8d119101b1bbafe5a447ac46b8090", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_63e8d119101b1bbafe5a447ac46b8090", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_63e8d119101b1bbafe5a447ac46b8090"}, "created_at": 1747516849.5158942, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_63e8d119101b1bbafe5a447ac46b8090\") }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_63e8d119101b1bbafe5a447ac46b8090.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n\nwhere not(distinct_drink_tables_per_hour <= 50)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "distinct_drink_tables_per_hour", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= 50", "column_name": "distinct_drink_tables_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_total_drink_orders_per_hour___0.5ad7584efe": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_drink_sales_total_drink_orders_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_d7548fe2d5a57cac550f1278304258f8.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_total_drink_orders_per_hour___0.5ad7584efe", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_drink_sales_total_drink_orders_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_d7548fe2d5a57cac550f1278304258f8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_d7548fe2d5a57cac550f1278304258f8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_d7548fe2d5a57cac550f1278304258f8"}, "created_at": 1747516849.5219002, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_d7548fe2d5a57cac550f1278304258f8\") }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_d7548fe2d5a57cac550f1278304258f8.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n\nwhere not(total_drink_orders_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_drink_orders_per_hour", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_drink_orders_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_order_per_hour___0.3fed9674e6": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_order_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_ef051f7ca680b086b266fbad1ddbc0fe.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_order_per_hour___0.3fed9674e6", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_order_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_ef051f7ca680b086b266fbad1ddbc0fe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_ef051f7ca680b086b266fbad1ddbc0fe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_ef051f7ca680b086b266fbad1ddbc0fe"}, "created_at": 1747516849.5279057, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_ef051f7ca680b086b266fbad1ddbc0fe\") }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_ef051f7ca680b086b266fbad1ddbc0fe.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n\nwhere not(avg_revenue_per_drink_order_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_drink_order_per_hour", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_revenue_per_drink_order_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_order_per_hour___total_drink_revenue_per_hour.93e1f9af63": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_order_per_hour___total_drink_revenue_per_hour", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_fdc3c1047e1cb56fc5226cfc61912342.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_order_per_hour___total_drink_revenue_per_hour.93e1f9af63", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_order_per_hour___total_drink_revenue_per_hour"], "alias": "dbt_utils_expression_is_true_a_fdc3c1047e1cb56fc5226cfc61912342", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_fdc3c1047e1cb56fc5226cfc61912342", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_fdc3c1047e1cb56fc5226cfc61912342"}, "created_at": 1747516849.5339115, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_fdc3c1047e1cb56fc5226cfc61912342\") }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_fdc3c1047e1cb56fc5226cfc61912342.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n\nwhere not(avg_revenue_per_drink_order_per_hour <= total_drink_revenue_per_hour)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_drink_order_per_hour", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_drink_revenue_per_hour", "column_name": "avg_revenue_per_drink_order_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_items_per_drink_order_per_hour___1.d4e4c2e2a0": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_items_per_drink_order_per_hour___1", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_67be3421b24879bedcd746e9d705671c.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_items_per_drink_order_per_hour___1.d4e4c2e2a0", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_items_per_drink_order_per_hour___1"], "alias": "dbt_utils_expression_is_true_a_67be3421b24879bedcd746e9d705671c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_67be3421b24879bedcd746e9d705671c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_67be3421b24879bedcd746e9d705671c"}, "created_at": 1747516849.5399168, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_67be3421b24879bedcd746e9d705671c\") }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_67be3421b24879bedcd746e9d705671c.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n\nwhere not(avg_items_per_drink_order_per_hour >= 1)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_per_drink_order_per_hour", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 1", "column_name": "avg_items_per_drink_order_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_items_per_drink_order_per_hour___total_drink_items_ordered_per_hour.f3e179be57": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_items_per_drink_order_per_hour___total_drink_items_ordered_per_hour", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_4bef82f70453233e743bea170518c460.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_items_per_drink_order_per_hour___total_drink_items_ordered_per_hour.f3e179be57", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_items_per_drink_order_per_hour___total_drink_items_ordered_per_hour"], "alias": "dbt_utils_expression_is_true_a_4bef82f70453233e743bea170518c460", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_4bef82f70453233e743bea170518c460", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_4bef82f70453233e743bea170518c460"}, "created_at": 1747516849.545922, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_4bef82f70453233e743bea170518c460\") }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_4bef82f70453233e743bea170518c460.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n\nwhere not(avg_items_per_drink_order_per_hour <= total_drink_items_ordered_per_hour)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_per_drink_order_per_hour", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_drink_items_ordered_per_hour", "column_name": "avg_items_per_drink_order_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_unique_drink_items_ordered_per_hour___0.9462412e98": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_drink_sales_unique_drink_items_ordered_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_5efba21be25d41391d9502f554dfa1dc.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_unique_drink_items_ordered_per_hour___0.9462412e98", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_drink_sales_unique_drink_items_ordered_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_5efba21be25d41391d9502f554dfa1dc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_5efba21be25d41391d9502f554dfa1dc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_5efba21be25d41391d9502f554dfa1dc"}, "created_at": 1747516849.5529282, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_5efba21be25d41391d9502f554dfa1dc\") }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_5efba21be25d41391d9502f554dfa1dc.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n\nwhere not(unique_drink_items_ordered_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_drink_items_ordered_per_hour", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "unique_drink_items_ordered_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_drink_category_diversity_per_hour___0.5fdb5ba869": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_drink_sales_drink_category_diversity_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_ccfad7a2ce2ca8b3d4f285986a037521.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_drink_category_diversity_per_hour___0.5fdb5ba869", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_drink_sales_drink_category_diversity_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_ccfad7a2ce2ca8b3d4f285986a037521", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_ccfad7a2ce2ca8b3d4f285986a037521", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_ccfad7a2ce2ca8b3d4f285986a037521"}, "created_at": 1747516849.5619366, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_ccfad7a2ce2ca8b3d4f285986a037521\") }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_ccfad7a2ce2ca8b3d4f285986a037521.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n\nwhere not(drink_category_diversity_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "drink_category_diversity_per_hour", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "drink_category_diversity_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.accepted_values_agg_hourly_drink_sales_is_bar_peak_hour__False__True__False.af5c5a9a75": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "accepted_values_agg_hourly_drink_sales_is_bar_peak_hour__False__True__False", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "accepted_values_agg_hourly_dri_740a1d053ea59dbb0f7322a50817552a.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.accepted_values_agg_hourly_drink_sales_is_bar_peak_hour__False__True__False.af5c5a9a75", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "accepted_values_agg_hourly_drink_sales_is_bar_peak_hour__False__True__False"], "alias": "accepted_values_agg_hourly_dri_740a1d053ea59dbb0f7322a50817552a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_agg_hourly_dri_740a1d053ea59dbb0f7322a50817552a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_agg_hourly_dri_740a1d053ea59dbb0f7322a50817552a"}, "created_at": 1747516849.5679421, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_agg_hourly_dri_740a1d053ea59dbb0f7322a50817552a\") }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\accepted_values_agg_hourly_dri_740a1d053ea59dbb0f7322a50817552a.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        is_bar_peak_hour as value_field,\n        count(*) as n_records\n\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n    group by is_bar_peak_hour\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    True,False\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_bar_peak_hour", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "is_bar_peak_hour", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_items_per_head_per_hour___0.dfaaa0fa7a": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_items_per_head_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_6bbfbae2a07983ed5cef3750ae5c7c88.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_items_per_head_per_hour___0.dfaaa0fa7a", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_items_per_head_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_6bbfbae2a07983ed5cef3750ae5c7c88", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_6bbfbae2a07983ed5cef3750ae5c7c88", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_6bbfbae2a07983ed5cef3750ae5c7c88"}, "created_at": 1747516849.5739233, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_6bbfbae2a07983ed5cef3750ae5c7c88\") }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_6bbfbae2a07983ed5cef3750ae5c7c88.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n\nwhere not(avg_drink_items_per_head_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_drink_items_per_head_per_hour", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_drink_items_per_head_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_items_per_head_per_hour___total_drink_items_ordered_per_hour.812f1ef606": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_items_per_head_per_hour___total_drink_items_ordered_per_hour", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_337178ff967041175cfc83e9ecff0c77.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_items_per_head_per_hour___total_drink_items_ordered_per_hour.812f1ef606", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_items_per_head_per_hour___total_drink_items_ordered_per_hour"], "alias": "dbt_utils_expression_is_true_a_337178ff967041175cfc83e9ecff0c77", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_337178ff967041175cfc83e9ecff0c77", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_337178ff967041175cfc83e9ecff0c77"}, "created_at": 1747516849.578924, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_337178ff967041175cfc83e9ecff0c77\") }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_337178ff967041175cfc83e9ecff0c77.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n\nwhere not(avg_drink_items_per_head_per_hour <= total_drink_items_ordered_per_hour)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_drink_items_per_head_per_hour", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_drink_items_ordered_per_hour", "column_name": "avg_drink_items_per_head_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_revenue_per_head_per_hour___0.cc50bd090d": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_revenue_per_head_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_13b25f52c07149a94d3d58ab5f9fd34e.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_revenue_per_head_per_hour___0.cc50bd090d", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_revenue_per_head_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_13b25f52c07149a94d3d58ab5f9fd34e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_13b25f52c07149a94d3d58ab5f9fd34e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_13b25f52c07149a94d3d58ab5f9fd34e"}, "created_at": 1747516849.583928, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_13b25f52c07149a94d3d58ab5f9fd34e\") }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_13b25f52c07149a94d3d58ab5f9fd34e.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n\nwhere not(avg_drink_revenue_per_head_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_drink_revenue_per_head_per_hour", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_drink_revenue_per_head_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_revenue_per_head_per_hour___total_drink_revenue_per_hour.8ee23b6bc6": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_revenue_per_head_per_hour___total_drink_revenue_per_hour", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_0ad42d0984c1e9dc464ef3cc20f77645.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_revenue_per_head_per_hour___total_drink_revenue_per_hour.8ee23b6bc6", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_revenue_per_head_per_hour___total_drink_revenue_per_hour"], "alias": "dbt_utils_expression_is_true_a_0ad42d0984c1e9dc464ef3cc20f77645", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_0ad42d0984c1e9dc464ef3cc20f77645", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_0ad42d0984c1e9dc464ef3cc20f77645"}, "created_at": 1747516849.589934, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_0ad42d0984c1e9dc464ef3cc20f77645\") }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_0ad42d0984c1e9dc464ef3cc20f77645.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n\nwhere not(avg_drink_revenue_per_head_per_hour <= total_drink_revenue_per_hour)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_drink_revenue_per_head_per_hour", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_drink_revenue_per_hour", "column_name": "avg_drink_revenue_per_head_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.accepted_values_agg_hourly_drink_sales_is_weekend__False__True__False.8f4747307c": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "accepted_values_agg_hourly_drink_sales_is_weekend__False__True__False", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "accepted_values_agg_hourly_dri_8e14b9ce1e5c475b88eb3027f7945cbd.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.accepted_values_agg_hourly_drink_sales_is_weekend__False__True__False.8f4747307c", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "accepted_values_agg_hourly_drink_sales_is_weekend__False__True__False"], "alias": "accepted_values_agg_hourly_dri_8e14b9ce1e5c475b88eb3027f7945cbd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_agg_hourly_dri_8e14b9ce1e5c475b88eb3027f7945cbd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_agg_hourly_dri_8e14b9ce1e5c475b88eb3027f7945cbd"}, "created_at": 1747516849.594939, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_agg_hourly_dri_8e14b9ce1e5c475b88eb3027f7945cbd\") }}", "language": "sql", "refs": [{"name": "agg_hourly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\accepted_values_agg_hourly_dri_8e14b9ce1e5c475b88eb3027f7945cbd.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        is_weekend as value_field,\n        count(*) as n_records\n\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_drink_sales`\n    group by is_weekend\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    True,False\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_weekend", "file_key_name": "models.agg_hourly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_drink_sales", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "is_weekend", "model": "{{ get_where_subquery(ref('agg_hourly_drink_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_agg_hourly_food_sales_order_hour_dt.60db913355": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_hourly_food_sales_order_hour_dt", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_hourly_food_sales_order_hour_dt.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_hourly_food_sales_order_hour_dt.60db913355", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "not_null_agg_hourly_food_sales_order_hour_dt"], "alias": "not_null_agg_hourly_food_sales_order_hour_dt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.6009455, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\not_null_agg_hourly_food_sales_order_hour_dt.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_hour_dt\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\nwhere order_hour_dt is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_hour_dt", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_hour_dt", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.unique_agg_hourly_food_sales_order_hour_dt.7d0717c959": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "unique_agg_hourly_food_sales_order_hour_dt", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "unique_agg_hourly_food_sales_order_hour_dt.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.unique_agg_hourly_food_sales_order_hour_dt.7d0717c959", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "unique_agg_hourly_food_sales_order_hour_dt"], "alias": "unique_agg_hourly_food_sales_order_hour_dt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.602946, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\unique_agg_hourly_food_sales_order_hour_dt.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select order_hour_dt as unique_field\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n  where order_hour_dt is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_hour_dt", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_hour_dt", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_agg_hourly_food_sales_order_date.b7c06f6f07": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_hourly_food_sales_order_date", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_hourly_food_sales_order_date.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_hourly_food_sales_order_date.b7c06f6f07", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "not_null_agg_hourly_food_sales_order_date"], "alias": "not_null_agg_hourly_food_sales_order_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.6059484, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\not_null_agg_hourly_food_sales_order_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_date\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\nwhere order_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_date", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_date", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_agg_hourly_food_sales_hour_of_day.0b52be9331": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_hourly_food_sales_hour_of_day", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_hourly_food_sales_hour_of_day.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_hourly_food_sales_hour_of_day.0b52be9331", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "not_null_agg_hourly_food_sales_hour_of_day"], "alias": "not_null_agg_hourly_food_sales_hour_of_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.6079504, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\not_null_agg_hourly_food_sales_hour_of_day.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect hour_of_day\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\nwhere hour_of_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hour_of_day", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hour_of_day", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_food_sales_hour_of_day__23__0.6b8c470f7f": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_hourly_food_sales_hour_of_day__23__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_h_250bf251c5dd81505e795afb412b01a4.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_food_sales_hour_of_day__23__0.6b8c470f7f", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_accepted_range_agg_hourly_food_sales_hour_of_day__23__0"], "alias": "dbt_utils_accepted_range_agg_h_250bf251c5dd81505e795afb412b01a4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_h_250bf251c5dd81505e795afb412b01a4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_h_250bf251c5dd81505e795afb412b01a4"}, "created_at": 1747516849.6109533, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_h_250bf251c5dd81505e795afb412b01a4\") }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_accepted_range_agg_h_250bf251c5dd81505e795afb412b01a4.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not hour_of_day >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not hour_of_day <= 23\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hour_of_day", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 23, "column_name": "hour_of_day", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_total_food_items_ordered_per_hour___0.7e2b9a6fb4": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_food_sales_total_food_items_ordered_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_2e2d0789378413c765c5364f1234a62d.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_total_food_items_ordered_per_hour___0.7e2b9a6fb4", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_food_sales_total_food_items_ordered_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_2e2d0789378413c765c5364f1234a62d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_2e2d0789378413c765c5364f1234a62d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_2e2d0789378413c765c5364f1234a62d"}, "created_at": 1747516849.6169598, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_2e2d0789378413c765c5364f1234a62d\") }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_2e2d0789378413c765c5364f1234a62d.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n\nwhere not(total_food_items_ordered_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_food_items_ordered_per_hour", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_food_items_ordered_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_total_food_revenue_per_hour___0.f48f0defae": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_food_sales_total_food_revenue_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_24cd19e2653adf296305cd8ddc3d6218.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_total_food_revenue_per_hour___0.f48f0defae", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_food_sales_total_food_revenue_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_24cd19e2653adf296305cd8ddc3d6218", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_24cd19e2653adf296305cd8ddc3d6218", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_24cd19e2653adf296305cd8ddc3d6218"}, "created_at": 1747516849.6229637, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_24cd19e2653adf296305cd8ddc3d6218\") }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_24cd19e2653adf296305cd8ddc3d6218.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n\nwhere not(total_food_revenue_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_food_revenue_per_hour", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_food_revenue_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_item_per_hour___0.c64ad51169": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_item_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_095e50e83678c76f785544184f07ccbe.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_item_per_hour___0.c64ad51169", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_item_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_095e50e83678c76f785544184f07ccbe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_095e50e83678c76f785544184f07ccbe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_095e50e83678c76f785544184f07ccbe"}, "created_at": 1747516849.6289864, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_095e50e83678c76f785544184f07ccbe\") }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_095e50e83678c76f785544184f07ccbe.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n\nwhere not(avg_revenue_per_food_item_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_food_item_per_hour", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_revenue_per_food_item_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_item_per_hour___total_food_revenue_per_hour.d707b49bc0": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_item_per_hour___total_food_revenue_per_hour", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_98b78a72e640a9476c31a9c6b57fe256.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_item_per_hour___total_food_revenue_per_hour.d707b49bc0", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_item_per_hour___total_food_revenue_per_hour"], "alias": "dbt_utils_expression_is_true_a_98b78a72e640a9476c31a9c6b57fe256", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_98b78a72e640a9476c31a9c6b57fe256", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_98b78a72e640a9476c31a9c6b57fe256"}, "created_at": 1747516849.6339765, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_98b78a72e640a9476c31a9c6b57fe256\") }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_98b78a72e640a9476c31a9c6b57fe256.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n\nwhere not(avg_revenue_per_food_item_per_hour <= total_food_revenue_per_hour)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_food_item_per_hour", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_food_revenue_per_hour", "column_name": "avg_revenue_per_food_item_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.accepted_values_agg_hourly_food_sales_top_food_category_name_per_hour__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters.7e80c0ef85": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "accepted_values_agg_hourly_food_sales_top_food_category_name_per_hour__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "accepted_values_agg_hourly_foo_79ff02b2d1941282175de2b8155264a1.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.accepted_values_agg_hourly_food_sales_top_food_category_name_per_hour__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters.7e80c0ef85", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "accepted_values_agg_hourly_food_sales_top_food_category_name_per_hour__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters"], "alias": "accepted_values_agg_hourly_foo_79ff02b2d1941282175de2b8155264a1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_agg_hourly_foo_79ff02b2d1941282175de2b8155264a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_agg_hourly_foo_79ff02b2d1941282175de2b8155264a1"}, "created_at": 1747516849.6399798, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_agg_hourly_foo_79ff02b2d1941282175de2b8155264a1\") }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\accepted_values_agg_hourly_foo_79ff02b2d1941282175de2b8155264a1.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        top_food_category_name_per_hour as value_field,\n        count(*) as n_records\n\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n    group by top_food_category_name_per_hour\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Mains','Large Cuts','Steaks','Cheese','Sides','Sauces','Puddings','Ice-Cream & Sorbet','Extras','Chocolates','Starters'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_food_category_name_per_hour", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Mains", "Large Cuts", "Steaks", "Cheese", "Sides", "Sauces", "Puddings", "Ice-Cream & Sorbet", "Extras", "Chocolates", "Starters"], "column_name": "top_food_category_name_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_top_food_category_revenue_per_hour___0.0421d21b43": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_food_sales_top_food_category_revenue_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_d393809ad3c389bb9819d29fe4248625.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_top_food_category_revenue_per_hour___0.0421d21b43", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_food_sales_top_food_category_revenue_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_d393809ad3c389bb9819d29fe4248625", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_d393809ad3c389bb9819d29fe4248625", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_d393809ad3c389bb9819d29fe4248625"}, "created_at": 1747516849.6459851, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_d393809ad3c389bb9819d29fe4248625\") }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_d393809ad3c389bb9819d29fe4248625.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n\nwhere not(top_food_category_revenue_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_food_category_revenue_per_hour", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "top_food_category_revenue_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_top_food_category_revenue_per_hour___total_food_revenue_per_hour.c04bf973b7": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_food_sales_top_food_category_revenue_per_hour___total_food_revenue_per_hour", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_d077580317921775a0b7d848177ab7ab.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_top_food_category_revenue_per_hour___total_food_revenue_per_hour.c04bf973b7", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_food_sales_top_food_category_revenue_per_hour___total_food_revenue_per_hour"], "alias": "dbt_utils_expression_is_true_a_d077580317921775a0b7d848177ab7ab", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_d077580317921775a0b7d848177ab7ab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_d077580317921775a0b7d848177ab7ab"}, "created_at": 1747516849.6519918, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_d077580317921775a0b7d848177ab7ab\") }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_d077580317921775a0b7d848177ab7ab.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n\nwhere not(top_food_category_revenue_per_hour <= total_food_revenue_per_hour)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_food_category_revenue_per_hour", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_food_revenue_per_hour", "column_name": "top_food_category_revenue_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_food_sales_pct_top_food_cat_of_food_revenue_per_hour__1__0.882cffd670": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_hourly_food_sales_pct_top_food_cat_of_food_revenue_per_hour__1__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_h_a731b5e37986c4549e46a8b97391ef6a.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_food_sales_pct_top_food_cat_of_food_revenue_per_hour__1__0.882cffd670", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_accepted_range_agg_hourly_food_sales_pct_top_food_cat_of_food_revenue_per_hour__1__0"], "alias": "dbt_utils_accepted_range_agg_h_a731b5e37986c4549e46a8b97391ef6a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_h_a731b5e37986c4549e46a8b97391ef6a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_h_a731b5e37986c4549e46a8b97391ef6a"}, "created_at": 1747516849.6569953, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_h_a731b5e37986c4549e46a8b97391ef6a\") }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_accepted_range_agg_h_a731b5e37986c4549e46a8b97391ef6a.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_top_food_cat_of_food_revenue_per_hour >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_top_food_cat_of_food_revenue_per_hour <= 1\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_top_food_cat_of_food_revenue_per_hour", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_top_food_cat_of_food_revenue_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_distinct_food_tables_per_hour___0.62c5da7a03": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_food_sales_distinct_food_tables_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_8bbc8bcfe35254f695561d9ca4aff943.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_distinct_food_tables_per_hour___0.62c5da7a03", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_food_sales_distinct_food_tables_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_8bbc8bcfe35254f695561d9ca4aff943", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_8bbc8bcfe35254f695561d9ca4aff943", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_8bbc8bcfe35254f695561d9ca4aff943"}, "created_at": 1747516849.6619997, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_8bbc8bcfe35254f695561d9ca4aff943\") }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_8bbc8bcfe35254f695561d9ca4aff943.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n\nwhere not(distinct_food_tables_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "distinct_food_tables_per_hour", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "distinct_food_tables_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_distinct_food_tables_per_hour___50.2b0d3c2512": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_food_sales_distinct_food_tables_per_hour___50", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_333b30adff7e879bb87009706dc5d1e9.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_distinct_food_tables_per_hour___50.2b0d3c2512", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_food_sales_distinct_food_tables_per_hour___50"], "alias": "dbt_utils_expression_is_true_a_333b30adff7e879bb87009706dc5d1e9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_333b30adff7e879bb87009706dc5d1e9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_333b30adff7e879bb87009706dc5d1e9"}, "created_at": 1747516849.6690059, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_333b30adff7e879bb87009706dc5d1e9\") }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_333b30adff7e879bb87009706dc5d1e9.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n\nwhere not(distinct_food_tables_per_hour <= 50)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "distinct_food_tables_per_hour", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= 50", "column_name": "distinct_food_tables_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_total_mains_ordered_per_hour___0.a8d70207b0": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_food_sales_total_mains_ordered_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_28d6abe7f5e1987dafe0642e6391dc65.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_total_mains_ordered_per_hour___0.a8d70207b0", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_food_sales_total_mains_ordered_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_28d6abe7f5e1987dafe0642e6391dc65", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_28d6abe7f5e1987dafe0642e6391dc65", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_28d6abe7f5e1987dafe0642e6391dc65"}, "created_at": 1747516849.6750112, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_28d6abe7f5e1987dafe0642e6391dc65\") }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_28d6abe7f5e1987dafe0642e6391dc65.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n\nwhere not(total_mains_ordered_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_mains_ordered_per_hour", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_mains_ordered_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_food_revenue_per_head_per_hour___0.b99e787c27": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_food_sales_avg_food_revenue_per_head_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_040cdfa45908e47c521eb9ef8196e71c.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_food_revenue_per_head_per_hour___0.b99e787c27", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_food_sales_avg_food_revenue_per_head_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_040cdfa45908e47c521eb9ef8196e71c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_040cdfa45908e47c521eb9ef8196e71c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_040cdfa45908e47c521eb9ef8196e71c"}, "created_at": 1747516849.6810162, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_040cdfa45908e47c521eb9ef8196e71c\") }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_040cdfa45908e47c521eb9ef8196e71c.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n\nwhere not(avg_food_revenue_per_head_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_food_revenue_per_head_per_hour", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_food_revenue_per_head_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_food_items_per_head_per_hour___0.b363014e6d": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_food_sales_avg_food_items_per_head_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_94d5b7c2fbc0d41ce923997b3e8c3262.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_food_items_per_head_per_hour___0.b363014e6d", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_food_sales_avg_food_items_per_head_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_94d5b7c2fbc0d41ce923997b3e8c3262", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_94d5b7c2fbc0d41ce923997b3e8c3262", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_94d5b7c2fbc0d41ce923997b3e8c3262"}, "created_at": 1747516849.6870217, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_94d5b7c2fbc0d41ce923997b3e8c3262\") }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_94d5b7c2fbc0d41ce923997b3e8c3262.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n\nwhere not(avg_food_items_per_head_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_food_items_per_head_per_hour", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_food_items_per_head_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_total_food_orders_per_hour___0.51dd4b1e73": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_food_sales_total_food_orders_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_bbcb2d71ca55391d72b55e23080aa829.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_total_food_orders_per_hour___0.51dd4b1e73", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_food_sales_total_food_orders_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_bbcb2d71ca55391d72b55e23080aa829", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_bbcb2d71ca55391d72b55e23080aa829", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_bbcb2d71ca55391d72b55e23080aa829"}, "created_at": 1747516849.6920261, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_bbcb2d71ca55391d72b55e23080aa829\") }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_bbcb2d71ca55391d72b55e23080aa829.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n\nwhere not(total_food_orders_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_food_orders_per_hour", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_food_orders_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_order_per_hour___0.c7f011b15f": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_order_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_2cd9ab1538e9ffe03b33319e20c0adec.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_order_per_hour___0.c7f011b15f", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_order_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_2cd9ab1538e9ffe03b33319e20c0adec", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_2cd9ab1538e9ffe03b33319e20c0adec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_2cd9ab1538e9ffe03b33319e20c0adec"}, "created_at": 1747516849.6980329, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_2cd9ab1538e9ffe03b33319e20c0adec\") }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_2cd9ab1538e9ffe03b33319e20c0adec.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n\nwhere not(avg_revenue_per_food_order_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_food_order_per_hour", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_revenue_per_food_order_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_order_per_hour___total_food_revenue_per_hour.a2c4407d85": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_order_per_hour___total_food_revenue_per_hour", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_438c77b7fd32153970517a7617a3dcaf.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_order_per_hour___total_food_revenue_per_hour.a2c4407d85", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_order_per_hour___total_food_revenue_per_hour"], "alias": "dbt_utils_expression_is_true_a_438c77b7fd32153970517a7617a3dcaf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_438c77b7fd32153970517a7617a3dcaf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_438c77b7fd32153970517a7617a3dcaf"}, "created_at": 1747516849.7040377, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_438c77b7fd32153970517a7617a3dcaf\") }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_438c77b7fd32153970517a7617a3dcaf.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n\nwhere not(avg_revenue_per_food_order_per_hour <= total_food_revenue_per_hour)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_food_order_per_hour", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_food_revenue_per_hour", "column_name": "avg_revenue_per_food_order_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_items_per_food_order_per_hour___1.2864290ce4": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_food_sales_avg_items_per_food_order_per_hour___1", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_a8f7aa405f8267677bd06fe2f1c1efe0.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_items_per_food_order_per_hour___1.2864290ce4", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_food_sales_avg_items_per_food_order_per_hour___1"], "alias": "dbt_utils_expression_is_true_a_a8f7aa405f8267677bd06fe2f1c1efe0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_a8f7aa405f8267677bd06fe2f1c1efe0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_a8f7aa405f8267677bd06fe2f1c1efe0"}, "created_at": 1747516849.709042, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_a8f7aa405f8267677bd06fe2f1c1efe0\") }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_a8f7aa405f8267677bd06fe2f1c1efe0.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n\nwhere not(avg_items_per_food_order_per_hour >= 1)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_per_food_order_per_hour", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 1", "column_name": "avg_items_per_food_order_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_items_per_food_order_per_hour___total_food_items_ordered_per_hour.4940f6a78f": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_food_sales_avg_items_per_food_order_per_hour___total_food_items_ordered_per_hour", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_bbff0e9d2e1b026203163b488066e828.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_items_per_food_order_per_hour___total_food_items_ordered_per_hour.4940f6a78f", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_food_sales_avg_items_per_food_order_per_hour___total_food_items_ordered_per_hour"], "alias": "dbt_utils_expression_is_true_a_bbff0e9d2e1b026203163b488066e828", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_bbff0e9d2e1b026203163b488066e828", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_bbff0e9d2e1b026203163b488066e828"}, "created_at": 1747516849.7150474, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_bbff0e9d2e1b026203163b488066e828\") }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_bbff0e9d2e1b026203163b488066e828.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n\nwhere not(avg_items_per_food_order_per_hour <= total_food_items_ordered_per_hour)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_per_food_order_per_hour", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_food_items_ordered_per_hour", "column_name": "avg_items_per_food_order_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_unique_food_items_ordered_per_hour___0.0432836dff": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_food_sales_unique_food_items_ordered_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_cec3c666a0910de2924ceeed763ac891.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_unique_food_items_ordered_per_hour___0.0432836dff", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_food_sales_unique_food_items_ordered_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_cec3c666a0910de2924ceeed763ac891", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_cec3c666a0910de2924ceeed763ac891", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_cec3c666a0910de2924ceeed763ac891"}, "created_at": 1747516849.721053, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_cec3c666a0910de2924ceeed763ac891\") }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_cec3c666a0910de2924ceeed763ac891.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n\nwhere not(unique_food_items_ordered_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_food_items_ordered_per_hour", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "unique_food_items_ordered_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_food_category_diversity_per_hour___1.41c806a20a": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_food_sales_food_category_diversity_per_hour___1", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_80e75fd1bf08b4039a57fc0647d66b54.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_food_category_diversity_per_hour___1.41c806a20a", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_food_sales_food_category_diversity_per_hour___1"], "alias": "dbt_utils_expression_is_true_a_80e75fd1bf08b4039a57fc0647d66b54", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_80e75fd1bf08b4039a57fc0647d66b54", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_80e75fd1bf08b4039a57fc0647d66b54"}, "created_at": 1747516849.7260578, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_80e75fd1bf08b4039a57fc0647d66b54\") }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_80e75fd1bf08b4039a57fc0647d66b54.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n\nwhere not(food_category_diversity_per_hour >= 1)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "food_category_diversity_per_hour", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 1", "column_name": "food_category_diversity_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.accepted_values_agg_hourly_food_sales_is_weekend__False__True__False.1e07b9297e": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "accepted_values_agg_hourly_food_sales_is_weekend__False__True__False", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "accepted_values_agg_hourly_foo_613e4a33a388ac1c8a0e7d61d35902f2.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.accepted_values_agg_hourly_food_sales_is_weekend__False__True__False.1e07b9297e", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "accepted_values_agg_hourly_food_sales_is_weekend__False__True__False"], "alias": "accepted_values_agg_hourly_foo_613e4a33a388ac1c8a0e7d61d35902f2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_agg_hourly_foo_613e4a33a388ac1c8a0e7d61d35902f2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_agg_hourly_foo_613e4a33a388ac1c8a0e7d61d35902f2"}, "created_at": 1747516849.732063, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_agg_hourly_foo_613e4a33a388ac1c8a0e7d61d35902f2\") }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\accepted_values_agg_hourly_foo_613e4a33a388ac1c8a0e7d61d35902f2.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        is_weekend as value_field,\n        count(*) as n_records\n\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n    group by is_weekend\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    True,False\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_weekend", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "is_weekend", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.accepted_values_agg_hourly_food_sales_is_kitchen_peak_hour__False__True__False.8f523c339e": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "accepted_values_agg_hourly_food_sales_is_kitchen_peak_hour__False__True__False", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "accepted_values_agg_hourly_foo_69a122b19a79a27208a826430bb490a4.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.accepted_values_agg_hourly_food_sales_is_kitchen_peak_hour__False__True__False.8f523c339e", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "accepted_values_agg_hourly_food_sales_is_kitchen_peak_hour__False__True__False"], "alias": "accepted_values_agg_hourly_foo_69a122b19a79a27208a826430bb490a4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_agg_hourly_foo_69a122b19a79a27208a826430bb490a4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_agg_hourly_foo_69a122b19a79a27208a826430bb490a4"}, "created_at": 1747516849.738069, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_agg_hourly_foo_69a122b19a79a27208a826430bb490a4\") }}", "language": "sql", "refs": [{"name": "agg_hourly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\accepted_values_agg_hourly_foo_69a122b19a79a27208a826430bb490a4.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        is_kitchen_peak_hour as value_field,\n        count(*) as n_records\n\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_food_sales`\n    group by is_kitchen_peak_hour\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    True,False\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_kitchen_peak_hour", "file_key_name": "models.agg_hourly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_food_sales", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "is_kitchen_peak_hour", "model": "{{ get_where_subquery(ref('agg_hourly_food_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_agg_hourly_total_sales_order_hour_dt.97b59b9388": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_hourly_total_sales_order_hour_dt", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_hourly_total_sales_order_hour_dt.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_hourly_total_sales_order_hour_dt.97b59b9388", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "not_null_agg_hourly_total_sales_order_hour_dt"], "alias": "not_null_agg_hourly_total_sales_order_hour_dt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.7430732, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\not_null_agg_hourly_total_sales_order_hour_dt.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_hour_dt\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\nwhere order_hour_dt is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_hour_dt", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_hour_dt", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.unique_agg_hourly_total_sales_order_hour_dt.e9ebac77c1": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "unique_agg_hourly_total_sales_order_hour_dt", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "unique_agg_hourly_total_sales_order_hour_dt.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.unique_agg_hourly_total_sales_order_hour_dt.e9ebac77c1", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "unique_agg_hourly_total_sales_order_hour_dt"], "alias": "unique_agg_hourly_total_sales_order_hour_dt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.7450762, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\unique_agg_hourly_total_sales_order_hour_dt.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select order_hour_dt as unique_field\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n  where order_hour_dt is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_hour_dt", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_hour_dt", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_agg_hourly_total_sales_order_date.3f19fbb9cc": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_hourly_total_sales_order_date", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_hourly_total_sales_order_date.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_hourly_total_sales_order_date.3f19fbb9cc", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "not_null_agg_hourly_total_sales_order_date"], "alias": "not_null_agg_hourly_total_sales_order_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.747078, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\not_null_agg_hourly_total_sales_order_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_date\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\nwhere order_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_date", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_date", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_agg_hourly_total_sales_hour_of_day.1d078c6715": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_hourly_total_sales_hour_of_day", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_hourly_total_sales_hour_of_day.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_hourly_total_sales_hour_of_day.1d078c6715", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "not_null_agg_hourly_total_sales_hour_of_day"], "alias": "not_null_agg_hourly_total_sales_hour_of_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.7490795, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\not_null_agg_hourly_total_sales_hour_of_day.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect hour_of_day\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\nwhere hour_of_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hour_of_day", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hour_of_day", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_total_sales_hour_of_day__23__0.a164d43343": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_hourly_total_sales_hour_of_day__23__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_h_164e2022801c666a472e315de4f980f2.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_total_sales_hour_of_day__23__0.a164d43343", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_accepted_range_agg_hourly_total_sales_hour_of_day__23__0"], "alias": "dbt_utils_accepted_range_agg_h_164e2022801c666a472e315de4f980f2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_h_164e2022801c666a472e315de4f980f2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_h_164e2022801c666a472e315de4f980f2"}, "created_at": 1747516849.752082, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_h_164e2022801c666a472e315de4f980f2\") }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_accepted_range_agg_h_164e2022801c666a472e315de4f980f2.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not hour_of_day >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not hour_of_day <= 23\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hour_of_day", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 23, "column_name": "hour_of_day", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_total_items_ordered_per_hour___0.a6ec55afbf": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_total_sales_total_items_ordered_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_56a32fd4cb3ab1b102970b10bd12cc0b.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_total_items_ordered_per_hour___0.a6ec55afbf", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_total_sales_total_items_ordered_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_56a32fd4cb3ab1b102970b10bd12cc0b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_56a32fd4cb3ab1b102970b10bd12cc0b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_56a32fd4cb3ab1b102970b10bd12cc0b"}, "created_at": 1747516849.757087, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_56a32fd4cb3ab1b102970b10bd12cc0b\") }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_56a32fd4cb3ab1b102970b10bd12cc0b.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n\nwhere not(total_items_ordered_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_items_ordered_per_hour", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_items_ordered_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_total_revenue_per_hour___0.b50fc0b8bb": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_total_sales_total_revenue_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_36cb251507042c7621b828aa2d2dbcf0.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_total_revenue_per_hour___0.b50fc0b8bb", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_total_sales_total_revenue_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_36cb251507042c7621b828aa2d2dbcf0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_36cb251507042c7621b828aa2d2dbcf0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_36cb251507042c7621b828aa2d2dbcf0"}, "created_at": 1747516849.7620916, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_36cb251507042c7621b828aa2d2dbcf0\") }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_36cb251507042c7621b828aa2d2dbcf0.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n\nwhere not(total_revenue_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_revenue_per_hour", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_revenue_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_item_per_hour___0.2da1f4aa0c": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_item_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_48eab4f77a8eb2d476043573fd5c8dfd.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_item_per_hour___0.2da1f4aa0c", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_item_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_48eab4f77a8eb2d476043573fd5c8dfd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_48eab4f77a8eb2d476043573fd5c8dfd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_48eab4f77a8eb2d476043573fd5c8dfd"}, "created_at": 1747516849.7670963, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_48eab4f77a8eb2d476043573fd5c8dfd\") }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_48eab4f77a8eb2d476043573fd5c8dfd.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n\nwhere not(avg_revenue_per_item_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_item_per_hour", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_revenue_per_item_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_item_per_hour___total_revenue_per_hour.92ca689742": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_item_per_hour___total_revenue_per_hour", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_6c53a0a69088fb273a5828c1f207d56c.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_item_per_hour___total_revenue_per_hour.92ca689742", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_item_per_hour___total_revenue_per_hour"], "alias": "dbt_utils_expression_is_true_a_6c53a0a69088fb273a5828c1f207d56c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_6c53a0a69088fb273a5828c1f207d56c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_6c53a0a69088fb273a5828c1f207d56c"}, "created_at": 1747516849.7721007, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_6c53a0a69088fb273a5828c1f207d56c\") }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_6c53a0a69088fb273a5828c1f207d56c.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n\nwhere not(avg_revenue_per_item_per_hour <= total_revenue_per_hour)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_item_per_hour", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_revenue_per_hour", "column_name": "avg_revenue_per_item_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_total_sales_pct_food_revenue_per_hour__1__0.d3cf0985ff": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_hourly_total_sales_pct_food_revenue_per_hour__1__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_h_ca943096a941f43c904b57237db5218b.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_total_sales_pct_food_revenue_per_hour__1__0.d3cf0985ff", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_accepted_range_agg_hourly_total_sales_pct_food_revenue_per_hour__1__0"], "alias": "dbt_utils_accepted_range_agg_h_ca943096a941f43c904b57237db5218b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_h_ca943096a941f43c904b57237db5218b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_h_ca943096a941f43c904b57237db5218b"}, "created_at": 1747516849.7771056, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_h_ca943096a941f43c904b57237db5218b\") }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_accepted_range_agg_h_ca943096a941f43c904b57237db5218b.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_food_revenue_per_hour >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_food_revenue_per_hour <= 1\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_food_revenue_per_hour", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_food_revenue_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_total_sales_pct_drink_revenue_per_hour__1__0.6205b4143a": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_hourly_total_sales_pct_drink_revenue_per_hour__1__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_h_f952cf27af9ba795ce306dad3622dfdf.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_total_sales_pct_drink_revenue_per_hour__1__0.6205b4143a", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_accepted_range_agg_hourly_total_sales_pct_drink_revenue_per_hour__1__0"], "alias": "dbt_utils_accepted_range_agg_h_f952cf27af9ba795ce306dad3622dfdf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_h_f952cf27af9ba795ce306dad3622dfdf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_h_f952cf27af9ba795ce306dad3622dfdf"}, "created_at": 1747516849.7851126, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_h_f952cf27af9ba795ce306dad3622dfdf\") }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_accepted_range_agg_h_f952cf27af9ba795ce306dad3622dfdf.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_drink_revenue_per_hour >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_drink_revenue_per_hour <= 1\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_drink_revenue_per_hour", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_drink_revenue_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_top_category_revenue_per_hour___0.6b3387f990": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_total_sales_top_category_revenue_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_884a5848f39d482560488fa65fc47ca6.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_top_category_revenue_per_hour___0.6b3387f990", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_total_sales_top_category_revenue_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_884a5848f39d482560488fa65fc47ca6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_884a5848f39d482560488fa65fc47ca6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_884a5848f39d482560488fa65fc47ca6"}, "created_at": 1747516849.790119, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_884a5848f39d482560488fa65fc47ca6\") }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_884a5848f39d482560488fa65fc47ca6.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n\nwhere not(top_category_revenue_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_category_revenue_per_hour", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "top_category_revenue_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_top_category_revenue_per_hour___total_revenue_per_hour.a785668cfe": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_total_sales_top_category_revenue_per_hour___total_revenue_per_hour", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_59c6b8ee0a1f135a5a86cfd43d910f11.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_top_category_revenue_per_hour___total_revenue_per_hour.a785668cfe", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_total_sales_top_category_revenue_per_hour___total_revenue_per_hour"], "alias": "dbt_utils_expression_is_true_a_59c6b8ee0a1f135a5a86cfd43d910f11", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_59c6b8ee0a1f135a5a86cfd43d910f11", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_59c6b8ee0a1f135a5a86cfd43d910f11"}, "created_at": 1747516849.7951233, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_59c6b8ee0a1f135a5a86cfd43d910f11\") }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_59c6b8ee0a1f135a5a86cfd43d910f11.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n\nwhere not(top_category_revenue_per_hour <= total_revenue_per_hour)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_category_revenue_per_hour", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_revenue_per_hour", "column_name": "top_category_revenue_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_total_sales_pct_top_cat_of_total_revenue_per_hour__1__0.e9c1cb9011": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_hourly_total_sales_pct_top_cat_of_total_revenue_per_hour__1__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_h_de3f172693bfa9eafab506c41dc41f6f.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_total_sales_pct_top_cat_of_total_revenue_per_hour__1__0.e9c1cb9011", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_accepted_range_agg_hourly_total_sales_pct_top_cat_of_total_revenue_per_hour__1__0"], "alias": "dbt_utils_accepted_range_agg_h_de3f172693bfa9eafab506c41dc41f6f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_h_de3f172693bfa9eafab506c41dc41f6f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_h_de3f172693bfa9eafab506c41dc41f6f"}, "created_at": 1747516849.8001285, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_h_de3f172693bfa9eafab506c41dc41f6f\") }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_accepted_range_agg_h_de3f172693bfa9eafab506c41dc41f6f.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_top_cat_of_total_revenue_per_hour >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_top_cat_of_total_revenue_per_hour <= 1\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_top_cat_of_total_revenue_per_hour", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_top_cat_of_total_revenue_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_distinct_tables_per_hour___0.7b7e4b646d": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_total_sales_distinct_tables_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_d6f30ac32de2a3a6a89c03affe8b8a49.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_distinct_tables_per_hour___0.7b7e4b646d", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_total_sales_distinct_tables_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_d6f30ac32de2a3a6a89c03affe8b8a49", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_d6f30ac32de2a3a6a89c03affe8b8a49", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_d6f30ac32de2a3a6a89c03affe8b8a49"}, "created_at": 1747516849.8051326, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_d6f30ac32de2a3a6a89c03affe8b8a49\") }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_d6f30ac32de2a3a6a89c03affe8b8a49.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n\nwhere not(distinct_tables_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "distinct_tables_per_hour", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "distinct_tables_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_distinct_tables_per_hour___50.0ba73e9b1e": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_total_sales_distinct_tables_per_hour___50", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_313601a37eba4ffc5fa2657e63de49d8.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_distinct_tables_per_hour___50.0ba73e9b1e", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_total_sales_distinct_tables_per_hour___50"], "alias": "dbt_utils_expression_is_true_a_313601a37eba4ffc5fa2657e63de49d8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_313601a37eba4ffc5fa2657e63de49d8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_313601a37eba4ffc5fa2657e63de49d8"}, "created_at": 1747516849.8101375, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_313601a37eba4ffc5fa2657e63de49d8\") }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_313601a37eba4ffc5fa2657e63de49d8.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n\nwhere not(distinct_tables_per_hour <= 50)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "distinct_tables_per_hour", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= 50", "column_name": "distinct_tables_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_total_new_customers_per_hour___0.05f359783c": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_total_sales_total_new_customers_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_5647524496e479ce1797a50bd7790a1d.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_total_new_customers_per_hour___0.05f359783c", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_total_sales_total_new_customers_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_5647524496e479ce1797a50bd7790a1d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_5647524496e479ce1797a50bd7790a1d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_5647524496e479ce1797a50bd7790a1d"}, "created_at": 1747516849.8151417, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_5647524496e479ce1797a50bd7790a1d\") }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_5647524496e479ce1797a50bd7790a1d.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n\nwhere not(total_new_customers_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_new_customers_per_hour", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_new_customers_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_head_per_hour___0.d9780ac8b5": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_head_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_49b6b03fc4cfc2f4dff6107b3f375924.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_head_per_hour___0.d9780ac8b5", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_head_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_49b6b03fc4cfc2f4dff6107b3f375924", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_49b6b03fc4cfc2f4dff6107b3f375924", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_49b6b03fc4cfc2f4dff6107b3f375924"}, "created_at": 1747516849.8201468, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_49b6b03fc4cfc2f4dff6107b3f375924\") }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_49b6b03fc4cfc2f4dff6107b3f375924.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n\nwhere not(avg_revenue_per_head_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_head_per_hour", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_revenue_per_head_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_items_ordered_per_head_per_hour___0.9e7dc2a3af": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_total_sales_avg_items_ordered_per_head_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_1c6ce7381f9dedadbbff8c1e59170e9d.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_items_ordered_per_head_per_hour___0.9e7dc2a3af", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_total_sales_avg_items_ordered_per_head_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_1c6ce7381f9dedadbbff8c1e59170e9d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_1c6ce7381f9dedadbbff8c1e59170e9d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_1c6ce7381f9dedadbbff8c1e59170e9d"}, "created_at": 1747516849.8251507, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_1c6ce7381f9dedadbbff8c1e59170e9d\") }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_1c6ce7381f9dedadbbff8c1e59170e9d.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n\nwhere not(avg_items_ordered_per_head_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_ordered_per_head_per_hour", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_items_ordered_per_head_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_total_orders_per_hour___0.dbaea66183": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_total_sales_total_orders_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_c409a1ea42feb3f3fe3a7b69c0d69709.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_total_orders_per_hour___0.dbaea66183", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_total_sales_total_orders_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_c409a1ea42feb3f3fe3a7b69c0d69709", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_c409a1ea42feb3f3fe3a7b69c0d69709", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_c409a1ea42feb3f3fe3a7b69c0d69709"}, "created_at": 1747516849.8301556, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_c409a1ea42feb3f3fe3a7b69c0d69709\") }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_c409a1ea42feb3f3fe3a7b69c0d69709.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n\nwhere not(total_orders_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_orders_per_hour", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_orders_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_order_per_hour___0.6291f71cf1": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_order_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_95a2796e44bcad769dbde32f8f08e4a6.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_order_per_hour___0.6291f71cf1", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_order_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_95a2796e44bcad769dbde32f8f08e4a6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_95a2796e44bcad769dbde32f8f08e4a6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_95a2796e44bcad769dbde32f8f08e4a6"}, "created_at": 1747516849.8361611, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_95a2796e44bcad769dbde32f8f08e4a6\") }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_95a2796e44bcad769dbde32f8f08e4a6.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n\nwhere not(avg_revenue_per_order_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_order_per_hour", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_revenue_per_order_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_order_per_hour___total_revenue_per_hour.25d1529a32": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_order_per_hour___total_revenue_per_hour", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_b632ed4c4df5fc783705b1011de0d499.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_order_per_hour___total_revenue_per_hour.25d1529a32", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_order_per_hour___total_revenue_per_hour"], "alias": "dbt_utils_expression_is_true_a_b632ed4c4df5fc783705b1011de0d499", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_b632ed4c4df5fc783705b1011de0d499", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_b632ed4c4df5fc783705b1011de0d499"}, "created_at": 1747516849.841165, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_b632ed4c4df5fc783705b1011de0d499\") }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_b632ed4c4df5fc783705b1011de0d499.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n\nwhere not(avg_revenue_per_order_per_hour <= total_revenue_per_hour)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_order_per_hour", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_revenue_per_hour", "column_name": "avg_revenue_per_order_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_items_per_order_per_hour___1.c414496d06": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_total_sales_avg_items_per_order_per_hour___1", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_66bf859e815c2e917edad6e8f9ac7ea2.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_items_per_order_per_hour___1.c414496d06", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_total_sales_avg_items_per_order_per_hour___1"], "alias": "dbt_utils_expression_is_true_a_66bf859e815c2e917edad6e8f9ac7ea2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_66bf859e815c2e917edad6e8f9ac7ea2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_66bf859e815c2e917edad6e8f9ac7ea2"}, "created_at": 1747516849.8471708, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_66bf859e815c2e917edad6e8f9ac7ea2\") }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_66bf859e815c2e917edad6e8f9ac7ea2.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n\nwhere not(avg_items_per_order_per_hour >= 1)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_per_order_per_hour", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 1", "column_name": "avg_items_per_order_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_items_per_order_per_hour___total_items_ordered_per_hour.f026e27c1b": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_total_sales_avg_items_per_order_per_hour___total_items_ordered_per_hour", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_27429be1d091a83f6a503d69997259d7.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_items_per_order_per_hour___total_items_ordered_per_hour.f026e27c1b", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_total_sales_avg_items_per_order_per_hour___total_items_ordered_per_hour"], "alias": "dbt_utils_expression_is_true_a_27429be1d091a83f6a503d69997259d7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_27429be1d091a83f6a503d69997259d7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_27429be1d091a83f6a503d69997259d7"}, "created_at": 1747516849.8521755, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_27429be1d091a83f6a503d69997259d7\") }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_27429be1d091a83f6a503d69997259d7.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n\nwhere not(avg_items_per_order_per_hour <= total_items_ordered_per_hour)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_per_order_per_hour", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_items_ordered_per_hour", "column_name": "avg_items_per_order_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_unique_items_ordered_per_hour___0.b1f25f6421": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_total_sales_unique_items_ordered_per_hour___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_4e86279c9549bc0de04430cebe339ec4.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_unique_items_ordered_per_hour___0.b1f25f6421", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_total_sales_unique_items_ordered_per_hour___0"], "alias": "dbt_utils_expression_is_true_a_4e86279c9549bc0de04430cebe339ec4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_4e86279c9549bc0de04430cebe339ec4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_4e86279c9549bc0de04430cebe339ec4"}, "created_at": 1747516849.8581815, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_4e86279c9549bc0de04430cebe339ec4\") }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_4e86279c9549bc0de04430cebe339ec4.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n\nwhere not(unique_items_ordered_per_hour >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_items_ordered_per_hour", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "unique_items_ordered_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_category_diversity_per_hour___1.e51151b9dc": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_hourly_total_sales_category_diversity_per_hour___1", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_ceb07c105f4fe6b35b66af197a4b5fad.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_category_diversity_per_hour___1.e51151b9dc", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_hourly_total_sales_category_diversity_per_hour___1"], "alias": "dbt_utils_expression_is_true_a_ceb07c105f4fe6b35b66af197a4b5fad", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_ceb07c105f4fe6b35b66af197a4b5fad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_ceb07c105f4fe6b35b66af197a4b5fad"}, "created_at": 1747516849.863186, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_ceb07c105f4fe6b35b66af197a4b5fad\") }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_ceb07c105f4fe6b35b66af197a4b5fad.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n\nwhere not(category_diversity_per_hour >= 1)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category_diversity_per_hour", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 1", "column_name": "category_diversity_per_hour", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.accepted_values_agg_hourly_total_sales_is_weekend__False__True__False.c8919b8fab": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "accepted_values_agg_hourly_total_sales_is_weekend__False__True__False", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "accepted_values_agg_hourly_tot_30ce8229a1ae620a7930ddc73cede958.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.accepted_values_agg_hourly_total_sales_is_weekend__False__True__False.c8919b8fab", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "accepted_values_agg_hourly_total_sales_is_weekend__False__True__False"], "alias": "accepted_values_agg_hourly_tot_30ce8229a1ae620a7930ddc73cede958", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_agg_hourly_tot_30ce8229a1ae620a7930ddc73cede958", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_agg_hourly_tot_30ce8229a1ae620a7930ddc73cede958"}, "created_at": 1747516849.8694172, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_agg_hourly_tot_30ce8229a1ae620a7930ddc73cede958\") }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\accepted_values_agg_hourly_tot_30ce8229a1ae620a7930ddc73cede958.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        is_weekend as value_field,\n        count(*) as n_records\n\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n    group by is_weekend\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    True,False\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_weekend", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "is_weekend", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.accepted_values_agg_hourly_total_sales_is_peak_hour__False__True__False.a383e22e95": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "accepted_values_agg_hourly_total_sales_is_peak_hour__False__True__False", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "accepted_values_agg_hourly_tot_cfce337cc566cc436c5c2cb8cfc2b224.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.accepted_values_agg_hourly_total_sales_is_peak_hour__False__True__False.a383e22e95", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "accepted_values_agg_hourly_total_sales_is_peak_hour__False__True__False"], "alias": "accepted_values_agg_hourly_tot_cfce337cc566cc436c5c2cb8cfc2b224", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_agg_hourly_tot_cfce337cc566cc436c5c2cb8cfc2b224", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_agg_hourly_tot_cfce337cc566cc436c5c2cb8cfc2b224"}, "created_at": 1747516849.87442, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_agg_hourly_tot_cfce337cc566cc436c5c2cb8cfc2b224\") }}", "language": "sql", "refs": [{"name": "agg_hourly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_hourly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\accepted_values_agg_hourly_tot_cfce337cc566cc436c5c2cb8cfc2b224.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        is_peak_hour as value_field,\n        count(*) as n_records\n\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_hourly_total_sales`\n    group by is_peak_hour\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    True,False\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_peak_hour", "file_key_name": "models.agg_hourly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_hourly_total_sales", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "is_peak_hour", "model": "{{ get_where_subquery(ref('agg_hourly_total_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_agg_daily_food_sales_order_date.1329693b01": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_daily_food_sales_order_date", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_daily_food_sales_order_date.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_daily_food_sales_order_date.1329693b01", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "not_null_agg_daily_food_sales_order_date"], "alias": "not_null_agg_daily_food_sales_order_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.8794281, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\not_null_agg_daily_food_sales_order_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_date\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\nwhere order_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_date", "file_key_name": "models.agg_daily_food_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_food_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_date", "model": "{{ get_where_subquery(ref('agg_daily_food_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.unique_agg_daily_food_sales_order_date.e87d78ab38": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "unique_agg_daily_food_sales_order_date", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "unique_agg_daily_food_sales_order_date.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.unique_agg_daily_food_sales_order_date.e87d78ab38", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "unique_agg_daily_food_sales_order_date"], "alias": "unique_agg_daily_food_sales_order_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.8814297, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\unique_agg_daily_food_sales_order_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select order_date as unique_field\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n  where order_date is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_date", "file_key_name": "models.agg_daily_food_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_food_sales", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_date", "model": "{{ get_where_subquery(ref('agg_daily_food_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_total_food_items_sold_all_day___0.e94072a7cb": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_food_sales_total_food_items_sold_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_9ff6ffa003531362cfdacd53c2b6469f.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_total_food_items_sold_all_day___0.e94072a7cb", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_food_sales_total_food_items_sold_all_day___0"], "alias": "dbt_utils_expression_is_true_a_9ff6ffa003531362cfdacd53c2b6469f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_9ff6ffa003531362cfdacd53c2b6469f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_9ff6ffa003531362cfdacd53c2b6469f"}, "created_at": 1747516849.8834326, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_9ff6ffa003531362cfdacd53c2b6469f\") }}", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_9ff6ffa003531362cfdacd53c2b6469f.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n\nwhere not(total_food_items_sold_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_food_items_sold_all_day", "file_key_name": "models.agg_daily_food_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_food_items_sold_all_day", "model": "{{ get_where_subquery(ref('agg_daily_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_total_daily_food_revenue___0.675f634dc2": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_food_sales_total_daily_food_revenue___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_1b1a851020833a081228d31521158bcb.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_total_daily_food_revenue___0.675f634dc2", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_food_sales_total_daily_food_revenue___0"], "alias": "dbt_utils_expression_is_true_a_1b1a851020833a081228d31521158bcb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_1b1a851020833a081228d31521158bcb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_1b1a851020833a081228d31521158bcb"}, "created_at": 1747516849.8884392, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_1b1a851020833a081228d31521158bcb\") }}", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_1b1a851020833a081228d31521158bcb.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n\nwhere not(total_daily_food_revenue >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_daily_food_revenue", "file_key_name": "models.agg_daily_food_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_daily_food_revenue", "model": "{{ get_where_subquery(ref('agg_daily_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_daily_revenue_per_food_item___0.0a2459d06e": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_food_sales_avg_daily_revenue_per_food_item___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_1783360397d11bb066e38319c99f917e.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_daily_revenue_per_food_item___0.0a2459d06e", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_food_sales_avg_daily_revenue_per_food_item___0"], "alias": "dbt_utils_expression_is_true_a_1783360397d11bb066e38319c99f917e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_1783360397d11bb066e38319c99f917e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_1783360397d11bb066e38319c99f917e"}, "created_at": 1747516849.8934436, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_1783360397d11bb066e38319c99f917e\") }}", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_1783360397d11bb066e38319c99f917e.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n\nwhere not(avg_daily_revenue_per_food_item >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_daily_revenue_per_food_item", "file_key_name": "models.agg_daily_food_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_daily_revenue_per_food_item", "model": "{{ get_where_subquery(ref('agg_daily_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_food_category_diversity_all_day___0.b5412e1e33": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_food_sales_food_category_diversity_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_1ef43e524a82fc1eef4b7f7e28b8883d.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_food_category_diversity_all_day___0.b5412e1e33", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_food_sales_food_category_diversity_all_day___0"], "alias": "dbt_utils_expression_is_true_a_1ef43e524a82fc1eef4b7f7e28b8883d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_1ef43e524a82fc1eef4b7f7e28b8883d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_1ef43e524a82fc1eef4b7f7e28b8883d"}, "created_at": 1747516849.8984518, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_1ef43e524a82fc1eef4b7f7e28b8883d\") }}", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_1ef43e524a82fc1eef4b7f7e28b8883d.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n\nwhere not(food_category_diversity_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "food_category_diversity_all_day", "file_key_name": "models.agg_daily_food_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "food_category_diversity_all_day", "model": "{{ get_where_subquery(ref('agg_daily_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.accepted_values_agg_daily_food_sales_top_daily_food_category_name__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters.b33fb8893d": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "accepted_values_agg_daily_food_sales_top_daily_food_category_name__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "accepted_values_agg_daily_food_1faed353a39aa326fe839da36eee2753.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.accepted_values_agg_daily_food_sales_top_daily_food_category_name__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters.b33fb8893d", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "accepted_values_agg_daily_food_sales_top_daily_food_category_name__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters"], "alias": "accepted_values_agg_daily_food_1faed353a39aa326fe839da36eee2753", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_agg_daily_food_1faed353a39aa326fe839da36eee2753", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_agg_daily_food_1faed353a39aa326fe839da36eee2753"}, "created_at": 1747516849.9034562, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_agg_daily_food_1faed353a39aa326fe839da36eee2753\") }}", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\accepted_values_agg_daily_food_1faed353a39aa326fe839da36eee2753.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        top_daily_food_category_name as value_field,\n        count(*) as n_records\n\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n    group by top_daily_food_category_name\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Mains','Large Cuts','Steaks','Cheese','Sides','Sauces','Puddings','Ice-Cream & Sorbet','Extras','Chocolates','Starters'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_daily_food_category_name", "file_key_name": "models.agg_daily_food_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_food_sales", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Mains", "Large Cuts", "Steaks", "Cheese", "Sides", "Sauces", "Puddings", "Ice-Cream & Sorbet", "Extras", "Chocolates", "Starters"], "column_name": "top_daily_food_category_name", "model": "{{ get_where_subquery(ref('agg_daily_food_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_top_daily_food_category_revenue___0.f8dcedd1db": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_food_sales_top_daily_food_category_revenue___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_4bcc443037d3a5d58bc0fd81d24c3867.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_top_daily_food_category_revenue___0.f8dcedd1db", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_food_sales_top_daily_food_category_revenue___0"], "alias": "dbt_utils_expression_is_true_a_4bcc443037d3a5d58bc0fd81d24c3867", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_4bcc443037d3a5d58bc0fd81d24c3867", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_4bcc443037d3a5d58bc0fd81d24c3867"}, "created_at": 1747516849.908465, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_4bcc443037d3a5d58bc0fd81d24c3867\") }}", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_4bcc443037d3a5d58bc0fd81d24c3867.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n\nwhere not(top_daily_food_category_revenue >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_daily_food_category_revenue", "file_key_name": "models.agg_daily_food_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "top_daily_food_category_revenue", "model": "{{ get_where_subquery(ref('agg_daily_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_top_daily_food_category_revenue___total_daily_food_revenue.0cd87cbf08": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_food_sales_top_daily_food_category_revenue___total_daily_food_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_970f6a151cd16590d257d2633c8fd21d.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_top_daily_food_category_revenue___total_daily_food_revenue.0cd87cbf08", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_food_sales_top_daily_food_category_revenue___total_daily_food_revenue"], "alias": "dbt_utils_expression_is_true_a_970f6a151cd16590d257d2633c8fd21d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_970f6a151cd16590d257d2633c8fd21d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_970f6a151cd16590d257d2633c8fd21d"}, "created_at": 1747516849.9144702, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_970f6a151cd16590d257d2633c8fd21d\") }}", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_970f6a151cd16590d257d2633c8fd21d.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n\nwhere not(top_daily_food_category_revenue <= total_daily_food_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_daily_food_category_revenue", "file_key_name": "models.agg_daily_food_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_daily_food_revenue", "column_name": "top_daily_food_category_revenue", "model": "{{ get_where_subquery(ref('agg_daily_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_food_sales_pct_top_food_cat_from_daily_food_revenue__1__0.794f2beb78": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_daily_food_sales_pct_top_food_cat_from_daily_food_revenue__1__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_d_1aff7f642281083ada2b23eef60c35b7.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_food_sales_pct_top_food_cat_from_daily_food_revenue__1__0.794f2beb78", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_accepted_range_agg_daily_food_sales_pct_top_food_cat_from_daily_food_revenue__1__0"], "alias": "dbt_utils_accepted_range_agg_d_1aff7f642281083ada2b23eef60c35b7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_d_1aff7f642281083ada2b23eef60c35b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_d_1aff7f642281083ada2b23eef60c35b7"}, "created_at": 1747516849.9204762, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_d_1aff7f642281083ada2b23eef60c35b7\") }}", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_accepted_range_agg_d_1aff7f642281083ada2b23eef60c35b7.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_top_food_cat_from_daily_food_revenue >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_top_food_cat_from_daily_food_revenue <= 1\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_top_food_cat_from_daily_food_revenue", "file_key_name": "models.agg_daily_food_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_food_sales", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_top_food_cat_from_daily_food_revenue", "model": "{{ get_where_subquery(ref('agg_daily_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_distinct_food_tables_all_day___0.d18f978716": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_food_sales_distinct_food_tables_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_5c302f08c09862140108a7b2c10c6a42.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_distinct_food_tables_all_day___0.d18f978716", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_food_sales_distinct_food_tables_all_day___0"], "alias": "dbt_utils_expression_is_true_a_5c302f08c09862140108a7b2c10c6a42", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_5c302f08c09862140108a7b2c10c6a42", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_5c302f08c09862140108a7b2c10c6a42"}, "created_at": 1747516849.92548, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_5c302f08c09862140108a7b2c10c6a42\") }}", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_5c302f08c09862140108a7b2c10c6a42.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n\nwhere not(distinct_food_tables_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "distinct_food_tables_all_day", "file_key_name": "models.agg_daily_food_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "distinct_food_tables_all_day", "model": "{{ get_where_subquery(ref('agg_daily_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_total_food_orders_all_day___0.6ef55829f2": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_food_sales_total_food_orders_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_5b2914f6301478fa0ca6fb50ec5a9b3c.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_total_food_orders_all_day___0.6ef55829f2", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_food_sales_total_food_orders_all_day___0"], "alias": "dbt_utils_expression_is_true_a_5b2914f6301478fa0ca6fb50ec5a9b3c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_5b2914f6301478fa0ca6fb50ec5a9b3c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_5b2914f6301478fa0ca6fb50ec5a9b3c"}, "created_at": 1747516849.9308784, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_5b2914f6301478fa0ca6fb50ec5a9b3c\") }}", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_5b2914f6301478fa0ca6fb50ec5a9b3c.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n\nwhere not(total_food_orders_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_food_orders_all_day", "file_key_name": "models.agg_daily_food_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_food_orders_all_day", "model": "{{ get_where_subquery(ref('agg_daily_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_revenue_per_food_order_all_day___0.2e1f57b14e": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_food_sales_avg_revenue_per_food_order_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_6727827a7a1ed3a40a3132638c80f0b5.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_revenue_per_food_order_all_day___0.2e1f57b14e", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_food_sales_avg_revenue_per_food_order_all_day___0"], "alias": "dbt_utils_expression_is_true_a_6727827a7a1ed3a40a3132638c80f0b5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_6727827a7a1ed3a40a3132638c80f0b5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_6727827a7a1ed3a40a3132638c80f0b5"}, "created_at": 1747516849.9358828, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_6727827a7a1ed3a40a3132638c80f0b5\") }}", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_6727827a7a1ed3a40a3132638c80f0b5.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n\nwhere not(avg_revenue_per_food_order_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_food_order_all_day", "file_key_name": "models.agg_daily_food_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_revenue_per_food_order_all_day", "model": "{{ get_where_subquery(ref('agg_daily_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_revenue_per_food_order_all_day___total_daily_food_revenue.f0b464756f": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_food_sales_avg_revenue_per_food_order_all_day___total_daily_food_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_9956d08910bb186140c643845650a752.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_revenue_per_food_order_all_day___total_daily_food_revenue.f0b464756f", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_food_sales_avg_revenue_per_food_order_all_day___total_daily_food_revenue"], "alias": "dbt_utils_expression_is_true_a_9956d08910bb186140c643845650a752", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_9956d08910bb186140c643845650a752", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_9956d08910bb186140c643845650a752"}, "created_at": 1747516849.9428813, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_9956d08910bb186140c643845650a752\") }}", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_9956d08910bb186140c643845650a752.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n\nwhere not(avg_revenue_per_food_order_all_day <= total_daily_food_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_food_order_all_day", "file_key_name": "models.agg_daily_food_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_daily_food_revenue", "column_name": "avg_revenue_per_food_order_all_day", "model": "{{ get_where_subquery(ref('agg_daily_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_items_per_food_order_all_day___1.aa27ff7b31": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_food_sales_avg_items_per_food_order_all_day___1", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_59e85d56e0a89d9f5dbc406944d54fbd.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_items_per_food_order_all_day___1.aa27ff7b31", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_food_sales_avg_items_per_food_order_all_day___1"], "alias": "dbt_utils_expression_is_true_a_59e85d56e0a89d9f5dbc406944d54fbd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_59e85d56e0a89d9f5dbc406944d54fbd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_59e85d56e0a89d9f5dbc406944d54fbd"}, "created_at": 1747516849.9478867, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_59e85d56e0a89d9f5dbc406944d54fbd\") }}", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_59e85d56e0a89d9f5dbc406944d54fbd.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n\nwhere not(avg_items_per_food_order_all_day >= 1)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_per_food_order_all_day", "file_key_name": "models.agg_daily_food_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 1", "column_name": "avg_items_per_food_order_all_day", "model": "{{ get_where_subquery(ref('agg_daily_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_items_per_food_order_all_day___total_food_items_sold_all_day.0ddf9da8c2": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_food_sales_avg_items_per_food_order_all_day___total_food_items_sold_all_day", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_afdbe16b034a0de2242a75ae61693dac.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_items_per_food_order_all_day___total_food_items_sold_all_day.0ddf9da8c2", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_food_sales_avg_items_per_food_order_all_day___total_food_items_sold_all_day"], "alias": "dbt_utils_expression_is_true_a_afdbe16b034a0de2242a75ae61693dac", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_afdbe16b034a0de2242a75ae61693dac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_afdbe16b034a0de2242a75ae61693dac"}, "created_at": 1747516849.9528904, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_afdbe16b034a0de2242a75ae61693dac\") }}", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_afdbe16b034a0de2242a75ae61693dac.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n\nwhere not(avg_items_per_food_order_all_day <= total_food_items_sold_all_day)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_per_food_order_all_day", "file_key_name": "models.agg_daily_food_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_food_items_sold_all_day", "column_name": "avg_items_per_food_order_all_day", "model": "{{ get_where_subquery(ref('agg_daily_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_total_customers_all_day___0.839c694190": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_food_sales_total_customers_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_eade2b6b3be9c02db2a54cc3d5a19e24.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_total_customers_all_day___0.839c694190", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_food_sales_total_customers_all_day___0"], "alias": "dbt_utils_expression_is_true_a_eade2b6b3be9c02db2a54cc3d5a19e24", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_eade2b6b3be9c02db2a54cc3d5a19e24", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_eade2b6b3be9c02db2a54cc3d5a19e24"}, "created_at": 1747516849.9588766, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_eade2b6b3be9c02db2a54cc3d5a19e24\") }}", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_eade2b6b3be9c02db2a54cc3d5a19e24.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n\nwhere not(total_customers_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_customers_all_day", "file_key_name": "models.agg_daily_food_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_customers_all_day", "model": "{{ get_where_subquery(ref('agg_daily_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_revenue_per_head_all_day___0.91a6d5c72f": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_revenue_per_head_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_2ac130f9b9c71d7eb5fdf9605821ea90.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_revenue_per_head_all_day___0.91a6d5c72f", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_revenue_per_head_all_day___0"], "alias": "dbt_utils_expression_is_true_a_2ac130f9b9c71d7eb5fdf9605821ea90", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_2ac130f9b9c71d7eb5fdf9605821ea90", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_2ac130f9b9c71d7eb5fdf9605821ea90"}, "created_at": 1747516849.9638813, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_2ac130f9b9c71d7eb5fdf9605821ea90\") }}", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_2ac130f9b9c71d7eb5fdf9605821ea90.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n\nwhere not(avg_food_revenue_per_head_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_food_revenue_per_head_all_day", "file_key_name": "models.agg_daily_food_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_food_revenue_per_head_all_day", "model": "{{ get_where_subquery(ref('agg_daily_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_revenue_per_head_all_day___total_daily_food_revenue.a81083db0e": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_revenue_per_head_all_day___total_daily_food_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_d4945f5131db51fa8bb832c9a027007f.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_revenue_per_head_all_day___total_daily_food_revenue.a81083db0e", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_revenue_per_head_all_day___total_daily_food_revenue"], "alias": "dbt_utils_expression_is_true_a_d4945f5131db51fa8bb832c9a027007f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_d4945f5131db51fa8bb832c9a027007f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_d4945f5131db51fa8bb832c9a027007f"}, "created_at": 1747516849.969886, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_d4945f5131db51fa8bb832c9a027007f\") }}", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_d4945f5131db51fa8bb832c9a027007f.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n\nwhere not(avg_food_revenue_per_head_all_day <= total_daily_food_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_food_revenue_per_head_all_day", "file_key_name": "models.agg_daily_food_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_daily_food_revenue", "column_name": "avg_food_revenue_per_head_all_day", "model": "{{ get_where_subquery(ref('agg_daily_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_items_per_head_all_day___0.1013ce16d7": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_items_per_head_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_bca58fe2f011fe24beecdb53851eb5ad.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_items_per_head_all_day___0.1013ce16d7", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_items_per_head_all_day___0"], "alias": "dbt_utils_expression_is_true_a_bca58fe2f011fe24beecdb53851eb5ad", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_bca58fe2f011fe24beecdb53851eb5ad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_bca58fe2f011fe24beecdb53851eb5ad"}, "created_at": 1747516849.9748905, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_bca58fe2f011fe24beecdb53851eb5ad\") }}", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_bca58fe2f011fe24beecdb53851eb5ad.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n\nwhere not(avg_food_items_per_head_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_food_items_per_head_all_day", "file_key_name": "models.agg_daily_food_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_food_items_per_head_all_day", "model": "{{ get_where_subquery(ref('agg_daily_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_items_per_head_all_day___total_food_items_sold_all_day.5655082675": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_items_per_head_all_day___total_food_items_sold_all_day", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_5c37c426280ad7f4b9e8de18c82e42a0.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_items_per_head_all_day___total_food_items_sold_all_day.5655082675", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_items_per_head_all_day___total_food_items_sold_all_day"], "alias": "dbt_utils_expression_is_true_a_5c37c426280ad7f4b9e8de18c82e42a0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_5c37c426280ad7f4b9e8de18c82e42a0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_5c37c426280ad7f4b9e8de18c82e42a0"}, "created_at": 1747516849.9798965, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_5c37c426280ad7f4b9e8de18c82e42a0\") }}", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_5c37c426280ad7f4b9e8de18c82e42a0.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n\nwhere not(avg_food_items_per_head_all_day <= total_food_items_sold_all_day)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_food_items_per_head_all_day", "file_key_name": "models.agg_daily_food_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_food_items_sold_all_day", "column_name": "avg_food_items_per_head_all_day", "model": "{{ get_where_subquery(ref('agg_daily_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_unique_food_items_ordered_all_day___0.3716d579f5": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_food_sales_unique_food_items_ordered_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_8472e45c2d3248dbd158db4ba9471c3b.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_unique_food_items_ordered_all_day___0.3716d579f5", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_food_sales_unique_food_items_ordered_all_day___0"], "alias": "dbt_utils_expression_is_true_a_8472e45c2d3248dbd158db4ba9471c3b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_8472e45c2d3248dbd158db4ba9471c3b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_8472e45c2d3248dbd158db4ba9471c3b"}, "created_at": 1747516849.9859016, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_8472e45c2d3248dbd158db4ba9471c3b\") }}", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_8472e45c2d3248dbd158db4ba9471c3b.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n\nwhere not(unique_food_items_ordered_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_food_items_ordered_all_day", "file_key_name": "models.agg_daily_food_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "unique_food_items_ordered_all_day", "model": "{{ get_where_subquery(ref('agg_daily_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.accepted_values_agg_daily_food_sales_is_weekend__False__True__False.4a2a5dc77c": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "accepted_values_agg_daily_food_sales_is_weekend__False__True__False", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "accepted_values_agg_daily_food_7d5b1ad69d82f01825040fef5aab12c5.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.accepted_values_agg_daily_food_sales_is_weekend__False__True__False.4a2a5dc77c", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "accepted_values_agg_daily_food_sales_is_weekend__False__True__False"], "alias": "accepted_values_agg_daily_food_7d5b1ad69d82f01825040fef5aab12c5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_agg_daily_food_7d5b1ad69d82f01825040fef5aab12c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_agg_daily_food_7d5b1ad69d82f01825040fef5aab12c5"}, "created_at": 1747516849.990913, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_agg_daily_food_7d5b1ad69d82f01825040fef5aab12c5\") }}", "language": "sql", "refs": [{"name": "agg_daily_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\accepted_values_agg_daily_food_7d5b1ad69d82f01825040fef5aab12c5.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        is_weekend as value_field,\n        count(*) as n_records\n\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_food_sales`\n    group by is_weekend\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    True,False\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_weekend", "file_key_name": "models.agg_daily_food_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_food_sales", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "is_weekend", "model": "{{ get_where_subquery(ref('agg_daily_food_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_agg_daily_drink_sales_order_date.a15b02f884": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_daily_drink_sales_order_date", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_daily_drink_sales_order_date.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_daily_drink_sales_order_date.a15b02f884", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "not_null_agg_daily_drink_sales_order_date"], "alias": "not_null_agg_daily_drink_sales_order_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.9959168, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\not_null_agg_daily_drink_sales_order_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_date\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\nwhere order_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_date", "file_key_name": "models.agg_daily_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_drink_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_date", "model": "{{ get_where_subquery(ref('agg_daily_drink_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.unique_agg_daily_drink_sales_order_date.37388b3ec8": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "unique_agg_daily_drink_sales_order_date", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "unique_agg_daily_drink_sales_order_date.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.unique_agg_daily_drink_sales_order_date.37388b3ec8", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "unique_agg_daily_drink_sales_order_date"], "alias": "unique_agg_daily_drink_sales_order_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516849.9979434, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\unique_agg_daily_drink_sales_order_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select order_date as unique_field\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n  where order_date is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_date", "file_key_name": "models.agg_daily_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_drink_sales", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_date", "model": "{{ get_where_subquery(ref('agg_daily_drink_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_total_drink_items_ordered_all_day___0.0a862aa1bf": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_drink_sales_total_drink_items_ordered_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_3bbbe762d3744588b40fca82ec2c5a22.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_total_drink_items_ordered_all_day___0.0a862aa1bf", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_drink_sales_total_drink_items_ordered_all_day___0"], "alias": "dbt_utils_expression_is_true_a_3bbbe762d3744588b40fca82ec2c5a22", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_3bbbe762d3744588b40fca82ec2c5a22", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_3bbbe762d3744588b40fca82ec2c5a22"}, "created_at": 1747516850.0009282, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_3bbbe762d3744588b40fca82ec2c5a22\") }}", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_3bbbe762d3744588b40fca82ec2c5a22.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n\nwhere not(total_drink_items_ordered_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_drink_items_ordered_all_day", "file_key_name": "models.agg_daily_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_drink_items_ordered_all_day", "model": "{{ get_where_subquery(ref('agg_daily_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_total_daily_drink_revenue___0.999b27f967": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_drink_sales_total_daily_drink_revenue___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_b6212b3ed89809e477810be8940581d7.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_total_daily_drink_revenue___0.999b27f967", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_drink_sales_total_daily_drink_revenue___0"], "alias": "dbt_utils_expression_is_true_a_b6212b3ed89809e477810be8940581d7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_b6212b3ed89809e477810be8940581d7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_b6212b3ed89809e477810be8940581d7"}, "created_at": 1747516850.0059316, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_b6212b3ed89809e477810be8940581d7\") }}", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_b6212b3ed89809e477810be8940581d7.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n\nwhere not(total_daily_drink_revenue >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_daily_drink_revenue", "file_key_name": "models.agg_daily_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_daily_drink_revenue", "model": "{{ get_where_subquery(ref('agg_daily_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_daily_revenue_per_drink_item___0.64a7e65dd8": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_drink_sales_avg_daily_revenue_per_drink_item___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_666051507edb78d91316bdb9b9f313cc.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_daily_revenue_per_drink_item___0.64a7e65dd8", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_drink_sales_avg_daily_revenue_per_drink_item___0"], "alias": "dbt_utils_expression_is_true_a_666051507edb78d91316bdb9b9f313cc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_666051507edb78d91316bdb9b9f313cc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_666051507edb78d91316bdb9b9f313cc"}, "created_at": 1747516850.0109425, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_666051507edb78d91316bdb9b9f313cc\") }}", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_666051507edb78d91316bdb9b9f313cc.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n\nwhere not(avg_daily_revenue_per_drink_item >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_daily_revenue_per_drink_item", "file_key_name": "models.agg_daily_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_daily_revenue_per_drink_item", "model": "{{ get_where_subquery(ref('agg_daily_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_drink_category_diversity_all_day___0.841422b2c0": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_drink_sales_drink_category_diversity_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_3f3a1de00703e6b6feb74c1d33eeaa1f.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_drink_category_diversity_all_day___0.841422b2c0", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_drink_sales_drink_category_diversity_all_day___0"], "alias": "dbt_utils_expression_is_true_a_3f3a1de00703e6b6feb74c1d33eeaa1f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_3f3a1de00703e6b6feb74c1d33eeaa1f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_3f3a1de00703e6b6feb74c1d33eeaa1f"}, "created_at": 1747516850.015946, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_3f3a1de00703e6b6feb74c1d33eeaa1f\") }}", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_3f3a1de00703e6b6feb74c1d33eeaa1f.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n\nwhere not(drink_category_diversity_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "drink_category_diversity_all_day", "file_key_name": "models.agg_daily_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "drink_category_diversity_all_day", "model": "{{ get_where_subquery(ref('agg_daily_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.accepted_values_agg_daily_drink_sales_top_daily_drink_category_name__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy.947a6cc3bc": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "accepted_values_agg_daily_drink_sales_top_daily_drink_category_name__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "accepted_values_agg_daily_drin_659bd6c745bf2ce1ef7c788a12a19a35.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.accepted_values_agg_daily_drink_sales_top_daily_drink_category_name__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy.947a6cc3bc", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "accepted_values_agg_daily_drink_sales_top_daily_drink_category_name__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy"], "alias": "accepted_values_agg_daily_drin_659bd6c745bf2ce1ef7c788a12a19a35", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_agg_daily_drin_659bd6c745bf2ce1ef7c788a12a19a35", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_agg_daily_drin_659bd6c745bf2ce1ef7c788a12a19a35"}, "created_at": 1747516850.0219584, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_agg_daily_drin_659bd6c745bf2ce1ef7c788a12a19a35\") }}", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\accepted_values_agg_daily_drin_659bd6c745bf2ce1ef7c788a12a19a35.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        top_daily_drink_category_name as value_field,\n        count(*) as n_records\n\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n    group by top_daily_drink_category_name\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Beers & Cider','Lo & No Alc','Port & Sherry','Ultimate Steakhouse Cocktails','Time & A Place','Rarities','The Sacred Six','Red Wines','Champagne & Sparkling','Rose Wines','Dessert Wines','White Wines','Magnums','Bordeaux','Burgundy'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_daily_drink_category_name", "file_key_name": "models.agg_daily_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_drink_sales", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Beers & Cider", "Lo & No Alc", "Port & Sherry", "Ultimate Steakhouse Cocktails", "Time & A Place", "Rarities", "The Sacred Six", "Red Wines", "Champagne & Sparkling", "Rose Wines", "Dessert Wines", "White Wines", "Magnums", "Bordeaux", "Burgundy"], "column_name": "top_daily_drink_category_name", "model": "{{ get_where_subquery(ref('agg_daily_drink_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_top_daily_drink_category_revenue___0.10b8e32fdf": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_drink_sales_top_daily_drink_category_revenue___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_8a90832dbd2b19d70a4c6d6c1bc6ffbd.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_top_daily_drink_category_revenue___0.10b8e32fdf", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_drink_sales_top_daily_drink_category_revenue___0"], "alias": "dbt_utils_expression_is_true_a_8a90832dbd2b19d70a4c6d6c1bc6ffbd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_8a90832dbd2b19d70a4c6d6c1bc6ffbd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_8a90832dbd2b19d70a4c6d6c1bc6ffbd"}, "created_at": 1747516850.0269632, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_8a90832dbd2b19d70a4c6d6c1bc6ffbd\") }}", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_8a90832dbd2b19d70a4c6d6c1bc6ffbd.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n\nwhere not(top_daily_drink_category_revenue >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_daily_drink_category_revenue", "file_key_name": "models.agg_daily_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "top_daily_drink_category_revenue", "model": "{{ get_where_subquery(ref('agg_daily_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_top_daily_drink_category_revenue___total_daily_drink_revenue.f566520520": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_drink_sales_top_daily_drink_category_revenue___total_daily_drink_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_2d46da4c5912d447a1a45e06bd45ce12.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_top_daily_drink_category_revenue___total_daily_drink_revenue.f566520520", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_drink_sales_top_daily_drink_category_revenue___total_daily_drink_revenue"], "alias": "dbt_utils_expression_is_true_a_2d46da4c5912d447a1a45e06bd45ce12", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_2d46da4c5912d447a1a45e06bd45ce12", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_2d46da4c5912d447a1a45e06bd45ce12"}, "created_at": 1747516850.032975, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_2d46da4c5912d447a1a45e06bd45ce12\") }}", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_2d46da4c5912d447a1a45e06bd45ce12.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n\nwhere not(top_daily_drink_category_revenue <= total_daily_drink_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_daily_drink_category_revenue", "file_key_name": "models.agg_daily_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_daily_drink_revenue", "column_name": "top_daily_drink_category_revenue", "model": "{{ get_where_subquery(ref('agg_daily_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_drink_sales_pct_top_drink_cat_from_daily_drink_revenue__1__0.d43351dfda": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_daily_drink_sales_pct_top_drink_cat_from_daily_drink_revenue__1__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_d_a0a4b02b01cfb1b094fb8f4074494b09.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_drink_sales_pct_top_drink_cat_from_daily_drink_revenue__1__0.d43351dfda", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_accepted_range_agg_daily_drink_sales_pct_top_drink_cat_from_daily_drink_revenue__1__0"], "alias": "dbt_utils_accepted_range_agg_d_a0a4b02b01cfb1b094fb8f4074494b09", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_d_a0a4b02b01cfb1b094fb8f4074494b09", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_d_a0a4b02b01cfb1b094fb8f4074494b09"}, "created_at": 1747516850.0389867, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_d_a0a4b02b01cfb1b094fb8f4074494b09\") }}", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_accepted_range_agg_d_a0a4b02b01cfb1b094fb8f4074494b09.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_top_drink_cat_from_daily_drink_revenue >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_top_drink_cat_from_daily_drink_revenue <= 1\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_top_drink_cat_from_daily_drink_revenue", "file_key_name": "models.agg_daily_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_drink_sales", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_top_drink_cat_from_daily_drink_revenue", "model": "{{ get_where_subquery(ref('agg_daily_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_distinct_drink_tables_all_day___0.2f1ed6c9dd": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_drink_sales_distinct_drink_tables_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_0b6acc9ea04335e5bc4c8b1bb26037b0.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_distinct_drink_tables_all_day___0.2f1ed6c9dd", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_drink_sales_distinct_drink_tables_all_day___0"], "alias": "dbt_utils_expression_is_true_a_0b6acc9ea04335e5bc4c8b1bb26037b0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_0b6acc9ea04335e5bc4c8b1bb26037b0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_0b6acc9ea04335e5bc4c8b1bb26037b0"}, "created_at": 1747516850.0439901, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_0b6acc9ea04335e5bc4c8b1bb26037b0\") }}", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_0b6acc9ea04335e5bc4c8b1bb26037b0.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n\nwhere not(distinct_drink_tables_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "distinct_drink_tables_all_day", "file_key_name": "models.agg_daily_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "distinct_drink_tables_all_day", "model": "{{ get_where_subquery(ref('agg_daily_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_total_drink_orders_all_day___0.0a5caa04e6": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_drink_sales_total_drink_orders_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_acc21b438dd60bfebab0091d12cda06f.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_total_drink_orders_all_day___0.0a5caa04e6", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_drink_sales_total_drink_orders_all_day___0"], "alias": "dbt_utils_expression_is_true_a_acc21b438dd60bfebab0091d12cda06f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_acc21b438dd60bfebab0091d12cda06f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_acc21b438dd60bfebab0091d12cda06f"}, "created_at": 1747516850.0510006, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_acc21b438dd60bfebab0091d12cda06f\") }}", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_acc21b438dd60bfebab0091d12cda06f.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n\nwhere not(total_drink_orders_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_drink_orders_all_day", "file_key_name": "models.agg_daily_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_drink_orders_all_day", "model": "{{ get_where_subquery(ref('agg_daily_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_revenue_per_drink_order_all_day___0.f3b66c426d": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_drink_sales_avg_revenue_per_drink_order_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_044b3bced05c86babfa822ccb401a081.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_revenue_per_drink_order_all_day___0.f3b66c426d", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_drink_sales_avg_revenue_per_drink_order_all_day___0"], "alias": "dbt_utils_expression_is_true_a_044b3bced05c86babfa822ccb401a081", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_044b3bced05c86babfa822ccb401a081", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_044b3bced05c86babfa822ccb401a081"}, "created_at": 1747516850.056005, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_044b3bced05c86babfa822ccb401a081\") }}", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_044b3bced05c86babfa822ccb401a081.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n\nwhere not(avg_revenue_per_drink_order_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_drink_order_all_day", "file_key_name": "models.agg_daily_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_revenue_per_drink_order_all_day", "model": "{{ get_where_subquery(ref('agg_daily_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_revenue_per_drink_order_all_day___total_daily_drink_revenue.9cec8cd318": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_drink_sales_avg_revenue_per_drink_order_all_day___total_daily_drink_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_e0636108f976e52809cd28336682981f.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_revenue_per_drink_order_all_day___total_daily_drink_revenue.9cec8cd318", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_drink_sales_avg_revenue_per_drink_order_all_day___total_daily_drink_revenue"], "alias": "dbt_utils_expression_is_true_a_e0636108f976e52809cd28336682981f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_e0636108f976e52809cd28336682981f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_e0636108f976e52809cd28336682981f"}, "created_at": 1747516850.0610309, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_e0636108f976e52809cd28336682981f\") }}", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_e0636108f976e52809cd28336682981f.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n\nwhere not(avg_revenue_per_drink_order_all_day <= total_daily_drink_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_drink_order_all_day", "file_key_name": "models.agg_daily_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_daily_drink_revenue", "column_name": "avg_revenue_per_drink_order_all_day", "model": "{{ get_where_subquery(ref('agg_daily_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_items_per_drink_order_all_day___1.55f81a3337": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_drink_sales_avg_items_per_drink_order_all_day___1", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_89ff3ab62ceb8c34d7645a2824746fae.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_items_per_drink_order_all_day___1.55f81a3337", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_drink_sales_avg_items_per_drink_order_all_day___1"], "alias": "dbt_utils_expression_is_true_a_89ff3ab62ceb8c34d7645a2824746fae", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_89ff3ab62ceb8c34d7645a2824746fae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_89ff3ab62ceb8c34d7645a2824746fae"}, "created_at": 1747516850.0660365, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_89ff3ab62ceb8c34d7645a2824746fae\") }}", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_89ff3ab62ceb8c34d7645a2824746fae.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n\nwhere not(avg_items_per_drink_order_all_day >= 1)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_per_drink_order_all_day", "file_key_name": "models.agg_daily_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 1", "column_name": "avg_items_per_drink_order_all_day", "model": "{{ get_where_subquery(ref('agg_daily_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_items_per_drink_order_all_day___total_drink_items_ordered_all_day.616d1ab7c6": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_drink_sales_avg_items_per_drink_order_all_day___total_drink_items_ordered_all_day", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_6210e44b71f1795aa78f41d622ba9900.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_items_per_drink_order_all_day___total_drink_items_ordered_all_day.616d1ab7c6", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_drink_sales_avg_items_per_drink_order_all_day___total_drink_items_ordered_all_day"], "alias": "dbt_utils_expression_is_true_a_6210e44b71f1795aa78f41d622ba9900", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_6210e44b71f1795aa78f41d622ba9900", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_6210e44b71f1795aa78f41d622ba9900"}, "created_at": 1747516850.0710435, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_6210e44b71f1795aa78f41d622ba9900\") }}", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_6210e44b71f1795aa78f41d622ba9900.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n\nwhere not(avg_items_per_drink_order_all_day <= total_drink_items_ordered_all_day)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_per_drink_order_all_day", "file_key_name": "models.agg_daily_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_drink_items_ordered_all_day", "column_name": "avg_items_per_drink_order_all_day", "model": "{{ get_where_subquery(ref('agg_daily_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_total_customers_all_day___0.3614fd7ba9": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_drink_sales_total_customers_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_d16230d04f369f53d236e62037eaed77.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_total_customers_all_day___0.3614fd7ba9", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_drink_sales_total_customers_all_day___0"], "alias": "dbt_utils_expression_is_true_a_d16230d04f369f53d236e62037eaed77", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_d16230d04f369f53d236e62037eaed77", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_d16230d04f369f53d236e62037eaed77"}, "created_at": 1747516850.0760484, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_d16230d04f369f53d236e62037eaed77\") }}", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_d16230d04f369f53d236e62037eaed77.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n\nwhere not(total_customers_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_customers_all_day", "file_key_name": "models.agg_daily_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_customers_all_day", "model": "{{ get_where_subquery(ref('agg_daily_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_revenue_per_head_all_day___0.730a042cc8": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_revenue_per_head_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_f88e8f29bf990a3c52fcaad082721587.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_revenue_per_head_all_day___0.730a042cc8", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_revenue_per_head_all_day___0"], "alias": "dbt_utils_expression_is_true_a_f88e8f29bf990a3c52fcaad082721587", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_f88e8f29bf990a3c52fcaad082721587", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_f88e8f29bf990a3c52fcaad082721587"}, "created_at": 1747516850.081, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_f88e8f29bf990a3c52fcaad082721587\") }}", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_f88e8f29bf990a3c52fcaad082721587.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n\nwhere not(avg_drink_revenue_per_head_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_drink_revenue_per_head_all_day", "file_key_name": "models.agg_daily_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_drink_revenue_per_head_all_day", "model": "{{ get_where_subquery(ref('agg_daily_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_revenue_per_head_all_day___total_daily_drink_revenue.603e0aaab5": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_revenue_per_head_all_day___total_daily_drink_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_c8e6120edd0c956ecf9c17ce11158284.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_revenue_per_head_all_day___total_daily_drink_revenue.603e0aaab5", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_revenue_per_head_all_day___total_daily_drink_revenue"], "alias": "dbt_utils_expression_is_true_a_c8e6120edd0c956ecf9c17ce11158284", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_c8e6120edd0c956ecf9c17ce11158284", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_c8e6120edd0c956ecf9c17ce11158284"}, "created_at": 1747516850.0860045, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_c8e6120edd0c956ecf9c17ce11158284\") }}", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_c8e6120edd0c956ecf9c17ce11158284.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n\nwhere not(avg_drink_revenue_per_head_all_day <= total_daily_drink_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_drink_revenue_per_head_all_day", "file_key_name": "models.agg_daily_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_daily_drink_revenue", "column_name": "avg_drink_revenue_per_head_all_day", "model": "{{ get_where_subquery(ref('agg_daily_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_items_per_head_all_day___0.6dbb5186b7": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_items_per_head_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_a92c3ae9af08ed40232abd654528e63d.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_items_per_head_all_day___0.6dbb5186b7", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_items_per_head_all_day___0"], "alias": "dbt_utils_expression_is_true_a_a92c3ae9af08ed40232abd654528e63d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_a92c3ae9af08ed40232abd654528e63d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_a92c3ae9af08ed40232abd654528e63d"}, "created_at": 1747516850.0911949, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_a92c3ae9af08ed40232abd654528e63d\") }}", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_a92c3ae9af08ed40232abd654528e63d.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n\nwhere not(avg_drink_items_per_head_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_drink_items_per_head_all_day", "file_key_name": "models.agg_daily_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_drink_items_per_head_all_day", "model": "{{ get_where_subquery(ref('agg_daily_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_items_per_head_all_day___total_drink_items_ordered_all_day.acc5590b4b": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_items_per_head_all_day___total_drink_items_ordered_all_day", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_4fd565f7e42d1962d7b0fa3aacc227d3.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_items_per_head_all_day___total_drink_items_ordered_all_day.acc5590b4b", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_items_per_head_all_day___total_drink_items_ordered_all_day"], "alias": "dbt_utils_expression_is_true_a_4fd565f7e42d1962d7b0fa3aacc227d3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_4fd565f7e42d1962d7b0fa3aacc227d3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_4fd565f7e42d1962d7b0fa3aacc227d3"}, "created_at": 1747516850.0961988, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_4fd565f7e42d1962d7b0fa3aacc227d3\") }}", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_4fd565f7e42d1962d7b0fa3aacc227d3.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n\nwhere not(avg_drink_items_per_head_all_day <= total_drink_items_ordered_all_day)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_drink_items_per_head_all_day", "file_key_name": "models.agg_daily_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_drink_items_ordered_all_day", "column_name": "avg_drink_items_per_head_all_day", "model": "{{ get_where_subquery(ref('agg_daily_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_unique_drink_items_ordered_all_day___0.9c7b482cea": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_drink_sales_unique_drink_items_ordered_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_df6cee95b4110be7f45ffad4a1166f37.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_unique_drink_items_ordered_all_day___0.9c7b482cea", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_drink_sales_unique_drink_items_ordered_all_day___0"], "alias": "dbt_utils_expression_is_true_a_df6cee95b4110be7f45ffad4a1166f37", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_df6cee95b4110be7f45ffad4a1166f37", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_df6cee95b4110be7f45ffad4a1166f37"}, "created_at": 1747516850.1012046, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_df6cee95b4110be7f45ffad4a1166f37\") }}", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_df6cee95b4110be7f45ffad4a1166f37.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n\nwhere not(unique_drink_items_ordered_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_drink_items_ordered_all_day", "file_key_name": "models.agg_daily_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "unique_drink_items_ordered_all_day", "model": "{{ get_where_subquery(ref('agg_daily_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.accepted_values_agg_daily_drink_sales_is_weekend__False__True__False.b218e14f76": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "accepted_values_agg_daily_drink_sales_is_weekend__False__True__False", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "accepted_values_agg_daily_drin_2e444abd124a05d020c26c7f76bcd8c2.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.accepted_values_agg_daily_drink_sales_is_weekend__False__True__False.b218e14f76", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "accepted_values_agg_daily_drink_sales_is_weekend__False__True__False"], "alias": "accepted_values_agg_daily_drin_2e444abd124a05d020c26c7f76bcd8c2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_agg_daily_drin_2e444abd124a05d020c26c7f76bcd8c2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_agg_daily_drin_2e444abd124a05d020c26c7f76bcd8c2"}, "created_at": 1747516850.1062078, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_agg_daily_drin_2e444abd124a05d020c26c7f76bcd8c2\") }}", "language": "sql", "refs": [{"name": "agg_daily_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\accepted_values_agg_daily_drin_2e444abd124a05d020c26c7f76bcd8c2.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        is_weekend as value_field,\n        count(*) as n_records\n\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_drink_sales`\n    group by is_weekend\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    True,False\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_weekend", "file_key_name": "models.agg_daily_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_drink_sales", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "is_weekend", "model": "{{ get_where_subquery(ref('agg_daily_drink_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_agg_daily_total_sales_order_date.30f5911338": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_daily_total_sales_order_date", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_daily_total_sales_order_date.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_daily_total_sales_order_date.30f5911338", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "not_null_agg_daily_total_sales_order_date"], "alias": "not_null_agg_daily_total_sales_order_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516850.1112127, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\not_null_agg_daily_total_sales_order_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_date\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\nwhere order_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_date", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_date", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.unique_agg_daily_total_sales_order_date.25284edde9": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "unique_agg_daily_total_sales_order_date", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "unique_agg_daily_total_sales_order_date.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.unique_agg_daily_total_sales_order_date.25284edde9", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "unique_agg_daily_total_sales_order_date"], "alias": "unique_agg_daily_total_sales_order_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516850.1132143, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\unique_agg_daily_total_sales_order_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select order_date as unique_field\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n  where order_date is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_date", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_date", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_total_sales_day_of_week__7__1.2a85a6b60a": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_daily_total_sales_day_of_week__7__1", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_d_6496a37e527b1bdace32b4d72cef0e0d.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_total_sales_day_of_week__7__1.2a85a6b60a", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_accepted_range_agg_daily_total_sales_day_of_week__7__1"], "alias": "dbt_utils_accepted_range_agg_d_6496a37e527b1bdace32b4d72cef0e0d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_d_6496a37e527b1bdace32b4d72cef0e0d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_d_6496a37e527b1bdace32b4d72cef0e0d"}, "created_at": 1747516850.1162179, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_d_6496a37e527b1bdace32b4d72cef0e0d\") }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_accepted_range_agg_d_6496a37e527b1bdace32b4d72cef0e0d.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not day_of_week >= 1\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not day_of_week <= 7\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "day_of_week", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 1, "max_value": 7, "column_name": "day_of_week", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_total_items_ordered_all_day___0.a9751926bd": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_total_sales_total_items_ordered_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_d717bf46a8cc47be76f59d9285369777.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_total_items_ordered_all_day___0.a9751926bd", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_total_sales_total_items_ordered_all_day___0"], "alias": "dbt_utils_expression_is_true_a_d717bf46a8cc47be76f59d9285369777", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_d717bf46a8cc47be76f59d9285369777", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_d717bf46a8cc47be76f59d9285369777"}, "created_at": 1747516850.1212225, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_d717bf46a8cc47be76f59d9285369777\") }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_d717bf46a8cc47be76f59d9285369777.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n\nwhere not(total_items_ordered_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_items_ordered_all_day", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_items_ordered_all_day", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_total_daily_revenue___0.97f8e801b5": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_total_sales_total_daily_revenue___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_e6cac27431bc0d84e2d824e42cc599c2.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_total_daily_revenue___0.97f8e801b5", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_total_sales_total_daily_revenue___0"], "alias": "dbt_utils_expression_is_true_a_e6cac27431bc0d84e2d824e42cc599c2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_e6cac27431bc0d84e2d824e42cc599c2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_e6cac27431bc0d84e2d824e42cc599c2"}, "created_at": 1747516850.1272275, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_e6cac27431bc0d84e2d824e42cc599c2\") }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_e6cac27431bc0d84e2d824e42cc599c2.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n\nwhere not(total_daily_revenue >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_daily_revenue", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_daily_revenue", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_revenue_per_item_daily___0.0a799e5a02": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_total_sales_avg_revenue_per_item_daily___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_ffdd5fd4cc86c4eb2ab71f99bb9f1509.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_revenue_per_item_daily___0.0a799e5a02", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_total_sales_avg_revenue_per_item_daily___0"], "alias": "dbt_utils_expression_is_true_a_ffdd5fd4cc86c4eb2ab71f99bb9f1509", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_ffdd5fd4cc86c4eb2ab71f99bb9f1509", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_ffdd5fd4cc86c4eb2ab71f99bb9f1509"}, "created_at": 1747516850.1322317, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_ffdd5fd4cc86c4eb2ab71f99bb9f1509\") }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_ffdd5fd4cc86c4eb2ab71f99bb9f1509.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n\nwhere not(avg_revenue_per_item_daily >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_item_daily", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_revenue_per_item_daily", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_total_sales_pct_food_from_daily_revenue__1__0.7d0a52baea": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_daily_total_sales_pct_food_from_daily_revenue__1__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_d_c1e786dc7d70599007f8c7219a38460f.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_total_sales_pct_food_from_daily_revenue__1__0.7d0a52baea", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_accepted_range_agg_daily_total_sales_pct_food_from_daily_revenue__1__0"], "alias": "dbt_utils_accepted_range_agg_d_c1e786dc7d70599007f8c7219a38460f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_d_c1e786dc7d70599007f8c7219a38460f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_d_c1e786dc7d70599007f8c7219a38460f"}, "created_at": 1747516850.138238, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_d_c1e786dc7d70599007f8c7219a38460f\") }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_accepted_range_agg_d_c1e786dc7d70599007f8c7219a38460f.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_food_from_daily_revenue >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_food_from_daily_revenue <= 1\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_food_from_daily_revenue", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_food_from_daily_revenue", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_total_sales_pct_drink_from_daily_revenue__1__0.2b7a44dd8f": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_daily_total_sales_pct_drink_from_daily_revenue__1__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_d_d6e81e52f425b5485e361caeca6166c4.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_total_sales_pct_drink_from_daily_revenue__1__0.2b7a44dd8f", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_accepted_range_agg_daily_total_sales_pct_drink_from_daily_revenue__1__0"], "alias": "dbt_utils_accepted_range_agg_d_d6e81e52f425b5485e361caeca6166c4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_d_d6e81e52f425b5485e361caeca6166c4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_d_d6e81e52f425b5485e361caeca6166c4"}, "created_at": 1747516850.1432412, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_d_d6e81e52f425b5485e361caeca6166c4\") }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_accepted_range_agg_d_d6e81e52f425b5485e361caeca6166c4.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_drink_from_daily_revenue >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_drink_from_daily_revenue <= 1\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_drink_from_daily_revenue", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_drink_from_daily_revenue", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_top_daily_category_revenue___0.fd396355d4": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_total_sales_top_daily_category_revenue___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_d26b920b04dd6f05977e4f565d85dacd.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_top_daily_category_revenue___0.fd396355d4", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_total_sales_top_daily_category_revenue___0"], "alias": "dbt_utils_expression_is_true_a_d26b920b04dd6f05977e4f565d85dacd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_d26b920b04dd6f05977e4f565d85dacd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_d26b920b04dd6f05977e4f565d85dacd"}, "created_at": 1747516850.1482463, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_d26b920b04dd6f05977e4f565d85dacd\") }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_d26b920b04dd6f05977e4f565d85dacd.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n\nwhere not(top_daily_category_revenue >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_daily_category_revenue", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "top_daily_category_revenue", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_top_daily_category_revenue___total_daily_revenue.df013c83bf": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_total_sales_top_daily_category_revenue___total_daily_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_5563c73bc2b109c2a80d88c4064950b6.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_top_daily_category_revenue___total_daily_revenue.df013c83bf", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_total_sales_top_daily_category_revenue___total_daily_revenue"], "alias": "dbt_utils_expression_is_true_a_5563c73bc2b109c2a80d88c4064950b6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_5563c73bc2b109c2a80d88c4064950b6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_5563c73bc2b109c2a80d88c4064950b6"}, "created_at": 1747516850.1542516, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_5563c73bc2b109c2a80d88c4064950b6\") }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_5563c73bc2b109c2a80d88c4064950b6.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n\nwhere not(top_daily_category_revenue  <= total_daily_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_daily_category_revenue", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": " <= total_daily_revenue", "column_name": "top_daily_category_revenue", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_total_sales_pct_top_cat_of_total_daily_revenue__1__0.2ff363d3b5": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_daily_total_sales_pct_top_cat_of_total_daily_revenue__1__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_d_6d437d648f184035522b39459a0881eb.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_total_sales_pct_top_cat_of_total_daily_revenue__1__0.2ff363d3b5", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_accepted_range_agg_daily_total_sales_pct_top_cat_of_total_daily_revenue__1__0"], "alias": "dbt_utils_accepted_range_agg_d_6d437d648f184035522b39459a0881eb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_d_6d437d648f184035522b39459a0881eb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_d_6d437d648f184035522b39459a0881eb"}, "created_at": 1747516850.1602569, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_d_6d437d648f184035522b39459a0881eb\") }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_accepted_range_agg_d_6d437d648f184035522b39459a0881eb.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_top_cat_of_total_daily_revenue >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_top_cat_of_total_daily_revenue <= 1\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_top_cat_of_total_daily_revenue", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_top_cat_of_total_daily_revenue", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_pct_top_cat_of_total_daily_revenue___1.a09bb8f229": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_total_sales_pct_top_cat_of_total_daily_revenue___1", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_1d2d7d1677f074e5b910b36fd9974027.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_pct_top_cat_of_total_daily_revenue___1.a09bb8f229", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_total_sales_pct_top_cat_of_total_daily_revenue___1"], "alias": "dbt_utils_expression_is_true_a_1d2d7d1677f074e5b910b36fd9974027", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_1d2d7d1677f074e5b910b36fd9974027", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_1d2d7d1677f074e5b910b36fd9974027"}, "created_at": 1747516850.1652613, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_1d2d7d1677f074e5b910b36fd9974027\") }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_1d2d7d1677f074e5b910b36fd9974027.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n\nwhere not(pct_top_cat_of_total_daily_revenue  <= 1)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_top_cat_of_total_daily_revenue", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": " <= 1", "column_name": "pct_top_cat_of_total_daily_revenue", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_total_daily_customers___0.80895610fe": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_total_sales_total_daily_customers___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_cee6f2ca4322a98bddaf50eb806d58a6.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_total_daily_customers___0.80895610fe", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_total_sales_total_daily_customers___0"], "alias": "dbt_utils_expression_is_true_a_cee6f2ca4322a98bddaf50eb806d58a6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_cee6f2ca4322a98bddaf50eb806d58a6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_cee6f2ca4322a98bddaf50eb806d58a6"}, "created_at": 1747516850.171267, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_cee6f2ca4322a98bddaf50eb806d58a6\") }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_cee6f2ca4322a98bddaf50eb806d58a6.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n\nwhere not(total_daily_customers >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_daily_customers", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_daily_customers", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_daily_revenue_per_head___0.243d003451": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_total_sales_avg_daily_revenue_per_head___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_1248bf32cbc07c31c7862252fc672bea.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_daily_revenue_per_head___0.243d003451", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_total_sales_avg_daily_revenue_per_head___0"], "alias": "dbt_utils_expression_is_true_a_1248bf32cbc07c31c7862252fc672bea", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_1248bf32cbc07c31c7862252fc672bea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_1248bf32cbc07c31c7862252fc672bea"}, "created_at": 1747516850.176272, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_1248bf32cbc07c31c7862252fc672bea\") }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_1248bf32cbc07c31c7862252fc672bea.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n\nwhere not(avg_daily_revenue_per_head >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_daily_revenue_per_head", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_daily_revenue_per_head", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_daily_revenue_per_head___total_daily_revenue.414af5654e": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_total_sales_avg_daily_revenue_per_head___total_daily_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_b9d0da11e6fe600e62dce2ed19e349b5.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_daily_revenue_per_head___total_daily_revenue.414af5654e", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_total_sales_avg_daily_revenue_per_head___total_daily_revenue"], "alias": "dbt_utils_expression_is_true_a_b9d0da11e6fe600e62dce2ed19e349b5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_b9d0da11e6fe600e62dce2ed19e349b5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_b9d0da11e6fe600e62dce2ed19e349b5"}, "created_at": 1747516850.181276, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_b9d0da11e6fe600e62dce2ed19e349b5\") }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_b9d0da11e6fe600e62dce2ed19e349b5.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n\nwhere not(avg_daily_revenue_per_head  <= total_daily_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_daily_revenue_per_head", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": " <= total_daily_revenue", "column_name": "avg_daily_revenue_per_head", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_ordered_per_head_per_day___0.a0dbf27d44": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_ordered_per_head_per_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_e4ba6c066ee33c1f3c21f68a4d69f18f.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_ordered_per_head_per_day___0.a0dbf27d44", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_ordered_per_head_per_day___0"], "alias": "dbt_utils_expression_is_true_a_e4ba6c066ee33c1f3c21f68a4d69f18f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_e4ba6c066ee33c1f3c21f68a4d69f18f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_e4ba6c066ee33c1f3c21f68a4d69f18f"}, "created_at": 1747516850.1862807, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_e4ba6c066ee33c1f3c21f68a4d69f18f\") }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_e4ba6c066ee33c1f3c21f68a4d69f18f.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n\nwhere not(avg_items_ordered_per_head_per_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_ordered_per_head_per_day", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_items_ordered_per_head_per_day", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_ordered_per_head_per_day___total_items_ordered_all_day.7fb1a4a554": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_ordered_per_head_per_day___total_items_ordered_all_day", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_ad21c7dd6db9b17f931c309e12507f01.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_ordered_per_head_per_day___total_items_ordered_all_day.7fb1a4a554", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_ordered_per_head_per_day___total_items_ordered_all_day"], "alias": "dbt_utils_expression_is_true_a_ad21c7dd6db9b17f931c309e12507f01", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_ad21c7dd6db9b17f931c309e12507f01", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_ad21c7dd6db9b17f931c309e12507f01"}, "created_at": 1747516850.191285, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_ad21c7dd6db9b17f931c309e12507f01\") }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_ad21c7dd6db9b17f931c309e12507f01.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n\nwhere not(avg_items_ordered_per_head_per_day  <= total_items_ordered_all_day)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_ordered_per_head_per_day", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": " <= total_items_ordered_all_day", "column_name": "avg_items_ordered_per_head_per_day", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_total_orders_all_day___0.f985e839f1": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_total_sales_total_orders_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_78ace31d1dbbeb4b9b2435e1fb3ac1d6.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_total_orders_all_day___0.f985e839f1", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_total_sales_total_orders_all_day___0"], "alias": "dbt_utils_expression_is_true_a_78ace31d1dbbeb4b9b2435e1fb3ac1d6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_78ace31d1dbbeb4b9b2435e1fb3ac1d6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_78ace31d1dbbeb4b9b2435e1fb3ac1d6"}, "created_at": 1747516850.1962898, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_78ace31d1dbbeb4b9b2435e1fb3ac1d6\") }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_78ace31d1dbbeb4b9b2435e1fb3ac1d6.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n\nwhere not(total_orders_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_orders_all_day", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_orders_all_day", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_per_order_all_day___0.803711bc28": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_per_order_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_fc9d228f02ec4e80ec2d8ecd47adc6d4.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_per_order_all_day___0.803711bc28", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_per_order_all_day___0"], "alias": "dbt_utils_expression_is_true_a_fc9d228f02ec4e80ec2d8ecd47adc6d4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_fc9d228f02ec4e80ec2d8ecd47adc6d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_fc9d228f02ec4e80ec2d8ecd47adc6d4"}, "created_at": 1747516850.2022953, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_fc9d228f02ec4e80ec2d8ecd47adc6d4\") }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_fc9d228f02ec4e80ec2d8ecd47adc6d4.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n\nwhere not(avg_items_per_order_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_per_order_all_day", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_items_per_order_all_day", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_per_order_all_day___total_items_ordered_all_day.5d4e1eff4e": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_per_order_all_day___total_items_ordered_all_day", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_75c797b591cf460bd738bd5d231f71d0.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_per_order_all_day___total_items_ordered_all_day.5d4e1eff4e", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_per_order_all_day___total_items_ordered_all_day"], "alias": "dbt_utils_expression_is_true_a_75c797b591cf460bd738bd5d231f71d0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_75c797b591cf460bd738bd5d231f71d0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_75c797b591cf460bd738bd5d231f71d0"}, "created_at": 1747516850.2073002, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_75c797b591cf460bd738bd5d231f71d0\") }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_75c797b591cf460bd738bd5d231f71d0.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n\nwhere not(avg_items_per_order_all_day  <= total_items_ordered_all_day)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_per_order_all_day", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": " <= total_items_ordered_all_day", "column_name": "avg_items_per_order_all_day", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_revenue_per_order_all_day___0.4f58090e30": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_total_sales_avg_revenue_per_order_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_5914f5703139c22ffd2fc809b424249a.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_revenue_per_order_all_day___0.4f58090e30", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_total_sales_avg_revenue_per_order_all_day___0"], "alias": "dbt_utils_expression_is_true_a_5914f5703139c22ffd2fc809b424249a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_5914f5703139c22ffd2fc809b424249a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_5914f5703139c22ffd2fc809b424249a"}, "created_at": 1747516850.2123046, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_5914f5703139c22ffd2fc809b424249a\") }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_5914f5703139c22ffd2fc809b424249a.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n\nwhere not(avg_revenue_per_order_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_order_all_day", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_revenue_per_order_all_day", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_revenue_per_order_all_day___total_daily_revenue.a17649f776": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_total_sales_avg_revenue_per_order_all_day___total_daily_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_4605c12ca45687030fe568c2e5259b2d.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_revenue_per_order_all_day___total_daily_revenue.a17649f776", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_total_sales_avg_revenue_per_order_all_day___total_daily_revenue"], "alias": "dbt_utils_expression_is_true_a_4605c12ca45687030fe568c2e5259b2d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_4605c12ca45687030fe568c2e5259b2d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_4605c12ca45687030fe568c2e5259b2d"}, "created_at": 1747516850.21831, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_4605c12ca45687030fe568c2e5259b2d\") }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_4605c12ca45687030fe568c2e5259b2d.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n\nwhere not(avg_revenue_per_order_all_day  <= total_daily_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_order_all_day", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": " <= total_daily_revenue", "column_name": "avg_revenue_per_order_all_day", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_unique_items_ordered_all_day___0.999c2652e5": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_total_sales_unique_items_ordered_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_e684020d91516f626b0bf49bd880d735.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_unique_items_ordered_all_day___0.999c2652e5", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_total_sales_unique_items_ordered_all_day___0"], "alias": "dbt_utils_expression_is_true_a_e684020d91516f626b0bf49bd880d735", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_e684020d91516f626b0bf49bd880d735", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_e684020d91516f626b0bf49bd880d735"}, "created_at": 1747516850.2233145, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_e684020d91516f626b0bf49bd880d735\") }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_e684020d91516f626b0bf49bd880d735.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n\nwhere not(unique_items_ordered_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_items_ordered_all_day", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "unique_items_ordered_all_day", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_category_diversity_all_day___0.1ca659ed1c": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_total_sales_category_diversity_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_ae5503043b5e4141010beda5664eb2fa.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_category_diversity_all_day___0.1ca659ed1c", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_total_sales_category_diversity_all_day___0"], "alias": "dbt_utils_expression_is_true_a_ae5503043b5e4141010beda5664eb2fa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_ae5503043b5e4141010beda5664eb2fa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_ae5503043b5e4141010beda5664eb2fa"}, "created_at": 1747516850.2283192, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_ae5503043b5e4141010beda5664eb2fa\") }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_ae5503043b5e4141010beda5664eb2fa.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n\nwhere not(category_diversity_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category_diversity_all_day", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "category_diversity_all_day", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_distinct_tables_used_all_day___0.05fe3c453a": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_daily_total_sales_distinct_tables_used_all_day___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_fd17333a73cc0c39fecca5a560fe28b8.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_distinct_tables_used_all_day___0.05fe3c453a", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_daily_total_sales_distinct_tables_used_all_day___0"], "alias": "dbt_utils_expression_is_true_a_fd17333a73cc0c39fecca5a560fe28b8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_fd17333a73cc0c39fecca5a560fe28b8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_fd17333a73cc0c39fecca5a560fe28b8"}, "created_at": 1747516850.234325, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_fd17333a73cc0c39fecca5a560fe28b8\") }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_fd17333a73cc0c39fecca5a560fe28b8.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n\nwhere not(distinct_tables_used_all_day >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "distinct_tables_used_all_day", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "distinct_tables_used_all_day", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.accepted_values_agg_daily_total_sales_is_weekend__False__True__False.3f08010b07": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "accepted_values_agg_daily_total_sales_is_weekend__False__True__False", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "accepted_values_agg_daily_tota_96d4988f0e33a83428405a79aa87c337.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.accepted_values_agg_daily_total_sales_is_weekend__False__True__False.3f08010b07", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "accepted_values_agg_daily_total_sales_is_weekend__False__True__False"], "alias": "accepted_values_agg_daily_tota_96d4988f0e33a83428405a79aa87c337", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_agg_daily_tota_96d4988f0e33a83428405a79aa87c337", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_agg_daily_tota_96d4988f0e33a83428405a79aa87c337"}, "created_at": 1747516850.239329, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_agg_daily_tota_96d4988f0e33a83428405a79aa87c337\") }}", "language": "sql", "refs": [{"name": "agg_daily_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_daily_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\accepted_values_agg_daily_tota_96d4988f0e33a83428405a79aa87c337.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        is_weekend as value_field,\n        count(*) as n_records\n\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_daily_total_sales`\n    group by is_weekend\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    True,False\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_weekend", "file_key_name": "models.agg_daily_total_sales", "attached_node": "model.restaurant_data_analytics.agg_daily_total_sales", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "is_weekend", "model": "{{ get_where_subquery(ref('agg_daily_total_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_agg_weekly_food_sales_order_week.25a819365a": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_weekly_food_sales_order_week", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_weekly_food_sales_order_week.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_weekly_food_sales_order_week.25a819365a", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "not_null_agg_weekly_food_sales_order_week"], "alias": "not_null_agg_weekly_food_sales_order_week", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516850.2443335, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_weekly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\not_null_agg_weekly_food_sales_order_week.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_week\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales`\nwhere order_week is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_week", "file_key_name": "models.agg_weekly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_food_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_week", "model": "{{ get_where_subquery(ref('agg_weekly_food_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.unique_agg_weekly_food_sales_order_week.f274cc1360": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "unique_agg_weekly_food_sales_order_week", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "unique_agg_weekly_food_sales_order_week.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.unique_agg_weekly_food_sales_order_week.f274cc1360", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "unique_agg_weekly_food_sales_order_week"], "alias": "unique_agg_weekly_food_sales_order_week", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516850.2463353, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_weekly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\unique_agg_weekly_food_sales_order_week.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select order_week as unique_field\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales`\n  where order_week is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_week", "file_key_name": "models.agg_weekly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_food_sales", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_week", "model": "{{ get_where_subquery(ref('agg_weekly_food_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_total_food_items_sold_weekly___0.d5463b5b57": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_food_sales_total_food_items_sold_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_7e475011f4658abc4bc9d5ffc7679382.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_total_food_items_sold_weekly___0.d5463b5b57", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_food_sales_total_food_items_sold_weekly___0"], "alias": "dbt_utils_expression_is_true_a_7e475011f4658abc4bc9d5ffc7679382", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_7e475011f4658abc4bc9d5ffc7679382", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_7e475011f4658abc4bc9d5ffc7679382"}, "created_at": 1747516850.248338, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_7e475011f4658abc4bc9d5ffc7679382\") }}", "language": "sql", "refs": [{"name": "agg_weekly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_7e475011f4658abc4bc9d5ffc7679382.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales`\n\nwhere not(total_food_items_sold_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_food_items_sold_weekly", "file_key_name": "models.agg_weekly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_food_items_sold_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_total_weekly_food_revenue___0.d283f147f3": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_food_sales_total_weekly_food_revenue___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_9774ae155508263663526015c15a26eb.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_total_weekly_food_revenue___0.d283f147f3", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_food_sales_total_weekly_food_revenue___0"], "alias": "dbt_utils_expression_is_true_a_9774ae155508263663526015c15a26eb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_9774ae155508263663526015c15a26eb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_9774ae155508263663526015c15a26eb"}, "created_at": 1747516850.2543426, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_9774ae155508263663526015c15a26eb\") }}", "language": "sql", "refs": [{"name": "agg_weekly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_9774ae155508263663526015c15a26eb.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales`\n\nwhere not(total_weekly_food_revenue >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_weekly_food_revenue", "file_key_name": "models.agg_weekly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_weekly_food_revenue", "model": "{{ get_where_subquery(ref('agg_weekly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_weekly_revenue_per_food_item___0.2c5a59df89": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_food_sales_avg_weekly_revenue_per_food_item___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_96aa586a43f75e64607ea37bb2284ed0.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_weekly_revenue_per_food_item___0.2c5a59df89", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_food_sales_avg_weekly_revenue_per_food_item___0"], "alias": "dbt_utils_expression_is_true_a_96aa586a43f75e64607ea37bb2284ed0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_96aa586a43f75e64607ea37bb2284ed0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_96aa586a43f75e64607ea37bb2284ed0"}, "created_at": 1747516850.2593477, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_96aa586a43f75e64607ea37bb2284ed0\") }}", "language": "sql", "refs": [{"name": "agg_weekly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_96aa586a43f75e64607ea37bb2284ed0.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales`\n\nwhere not(avg_weekly_revenue_per_food_item >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_weekly_revenue_per_food_item", "file_key_name": "models.agg_weekly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_weekly_revenue_per_food_item", "model": "{{ get_where_subquery(ref('agg_weekly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.accepted_values_agg_weekly_food_sales_top_weekly_food_category_name__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters.64b09e1561": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "accepted_values_agg_weekly_food_sales_top_weekly_food_category_name__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "accepted_values_agg_weekly_foo_bf2e01001e3059d86b3a85916069f110.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.accepted_values_agg_weekly_food_sales_top_weekly_food_category_name__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters.64b09e1561", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "accepted_values_agg_weekly_food_sales_top_weekly_food_category_name__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters"], "alias": "accepted_values_agg_weekly_foo_bf2e01001e3059d86b3a85916069f110", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_agg_weekly_foo_bf2e01001e3059d86b3a85916069f110", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_agg_weekly_foo_bf2e01001e3059d86b3a85916069f110"}, "created_at": 1747516850.2643526, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_agg_weekly_foo_bf2e01001e3059d86b3a85916069f110\") }}", "language": "sql", "refs": [{"name": "agg_weekly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\accepted_values_agg_weekly_foo_bf2e01001e3059d86b3a85916069f110.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        top_weekly_food_category_name as value_field,\n        count(*) as n_records\n\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales`\n    group by top_weekly_food_category_name\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Mains','Large Cuts','Steaks','Cheese','Sides','Sauces','Puddings','Ice-Cream & Sorbet','Extras','Chocolates','Starters'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_weekly_food_category_name", "file_key_name": "models.agg_weekly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_food_sales", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Mains", "Large Cuts", "Steaks", "Cheese", "Sides", "Sauces", "Puddings", "Ice-Cream & Sorbet", "Extras", "Chocolates", "Starters"], "column_name": "top_weekly_food_category_name", "model": "{{ get_where_subquery(ref('agg_weekly_food_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_top_weekly_food_category_revenue___0.d706ee86c0": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_food_sales_top_weekly_food_category_revenue___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_a4d0e30c62d6abb09ea6ce364c645a01.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_top_weekly_food_category_revenue___0.d706ee86c0", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_food_sales_top_weekly_food_category_revenue___0"], "alias": "dbt_utils_expression_is_true_a_a4d0e30c62d6abb09ea6ce364c645a01", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_a4d0e30c62d6abb09ea6ce364c645a01", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_a4d0e30c62d6abb09ea6ce364c645a01"}, "created_at": 1747516850.2693567, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_a4d0e30c62d6abb09ea6ce364c645a01\") }}", "language": "sql", "refs": [{"name": "agg_weekly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_a4d0e30c62d6abb09ea6ce364c645a01.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales`\n\nwhere not(top_weekly_food_category_revenue >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_weekly_food_category_revenue", "file_key_name": "models.agg_weekly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "top_weekly_food_category_revenue", "model": "{{ get_where_subquery(ref('agg_weekly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_top_weekly_food_category_revenue___total_weekly_food_revenue.40453a3f2f": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_food_sales_top_weekly_food_category_revenue___total_weekly_food_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_a78d83ed052914fe86ce31b813c25208.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_top_weekly_food_category_revenue___total_weekly_food_revenue.40453a3f2f", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_food_sales_top_weekly_food_category_revenue___total_weekly_food_revenue"], "alias": "dbt_utils_expression_is_true_a_a78d83ed052914fe86ce31b813c25208", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_a78d83ed052914fe86ce31b813c25208", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_a78d83ed052914fe86ce31b813c25208"}, "created_at": 1747516850.274361, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_a78d83ed052914fe86ce31b813c25208\") }}", "language": "sql", "refs": [{"name": "agg_weekly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_a78d83ed052914fe86ce31b813c25208.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales`\n\nwhere not(top_weekly_food_category_revenue <= total_weekly_food_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_weekly_food_category_revenue", "file_key_name": "models.agg_weekly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_weekly_food_revenue", "column_name": "top_weekly_food_category_revenue", "model": "{{ get_where_subquery(ref('agg_weekly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_food_sales_pct_top_food_cat_from_weekly_food_revenue__1__0.365a4895df": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_weekly_food_sales_pct_top_food_cat_from_weekly_food_revenue__1__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_w_17c8de3671a0c11bce2c54c23658287c.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_food_sales_pct_top_food_cat_from_weekly_food_revenue__1__0.365a4895df", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_accepted_range_agg_weekly_food_sales_pct_top_food_cat_from_weekly_food_revenue__1__0"], "alias": "dbt_utils_accepted_range_agg_w_17c8de3671a0c11bce2c54c23658287c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_w_17c8de3671a0c11bce2c54c23658287c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_w_17c8de3671a0c11bce2c54c23658287c"}, "created_at": 1747516850.2793655, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_w_17c8de3671a0c11bce2c54c23658287c\") }}", "language": "sql", "refs": [{"name": "agg_weekly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_accepted_range_agg_w_17c8de3671a0c11bce2c54c23658287c.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_top_food_cat_from_weekly_food_revenue >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_top_food_cat_from_weekly_food_revenue <= 1\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_top_food_cat_from_weekly_food_revenue", "file_key_name": "models.agg_weekly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_food_sales", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_top_food_cat_from_weekly_food_revenue", "model": "{{ get_where_subquery(ref('agg_weekly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_distinct_food_tables_per_day_weekly___0.c84314490e": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_food_sales_avg_distinct_food_tables_per_day_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_56b0f70589d89af69c070d33aebd189f.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_distinct_food_tables_per_day_weekly___0.c84314490e", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_food_sales_avg_distinct_food_tables_per_day_weekly___0"], "alias": "dbt_utils_expression_is_true_a_56b0f70589d89af69c070d33aebd189f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_56b0f70589d89af69c070d33aebd189f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_56b0f70589d89af69c070d33aebd189f"}, "created_at": 1747516850.286372, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_56b0f70589d89af69c070d33aebd189f\") }}", "language": "sql", "refs": [{"name": "agg_weekly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_56b0f70589d89af69c070d33aebd189f.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales`\n\nwhere not(avg_distinct_food_tables_per_day_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_distinct_food_tables_per_day_weekly", "file_key_name": "models.agg_weekly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_distinct_food_tables_per_day_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_total_food_orders_weekly___0.58a3404295": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_food_sales_total_food_orders_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_970f136950efe34de950528007d452bd.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_total_food_orders_weekly___0.58a3404295", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_food_sales_total_food_orders_weekly___0"], "alias": "dbt_utils_expression_is_true_a_970f136950efe34de950528007d452bd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_970f136950efe34de950528007d452bd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_970f136950efe34de950528007d452bd"}, "created_at": 1747516850.2913766, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_970f136950efe34de950528007d452bd\") }}", "language": "sql", "refs": [{"name": "agg_weekly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_970f136950efe34de950528007d452bd.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales`\n\nwhere not(total_food_orders_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_food_orders_weekly", "file_key_name": "models.agg_weekly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_food_orders_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_revenue_per_food_order_weekly___0.0132a4f6c4": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_food_sales_avg_revenue_per_food_order_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_5119e27974f2ce6b9f65ce6942cd0cb8.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_revenue_per_food_order_weekly___0.0132a4f6c4", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_food_sales_avg_revenue_per_food_order_weekly___0"], "alias": "dbt_utils_expression_is_true_a_5119e27974f2ce6b9f65ce6942cd0cb8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_5119e27974f2ce6b9f65ce6942cd0cb8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_5119e27974f2ce6b9f65ce6942cd0cb8"}, "created_at": 1747516850.2963805, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_5119e27974f2ce6b9f65ce6942cd0cb8\") }}", "language": "sql", "refs": [{"name": "agg_weekly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_5119e27974f2ce6b9f65ce6942cd0cb8.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales`\n\nwhere not(avg_revenue_per_food_order_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_food_order_weekly", "file_key_name": "models.agg_weekly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_revenue_per_food_order_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_revenue_per_food_order_weekly___total_weekly_food_revenue.ca3cb0a3a7": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_food_sales_avg_revenue_per_food_order_weekly___total_weekly_food_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_12174ed07687a56c938ccf3a8e90558d.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_revenue_per_food_order_weekly___total_weekly_food_revenue.ca3cb0a3a7", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_food_sales_avg_revenue_per_food_order_weekly___total_weekly_food_revenue"], "alias": "dbt_utils_expression_is_true_a_12174ed07687a56c938ccf3a8e90558d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_12174ed07687a56c938ccf3a8e90558d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_12174ed07687a56c938ccf3a8e90558d"}, "created_at": 1747516850.3023868, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_12174ed07687a56c938ccf3a8e90558d\") }}", "language": "sql", "refs": [{"name": "agg_weekly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_12174ed07687a56c938ccf3a8e90558d.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales`\n\nwhere not(avg_revenue_per_food_order_weekly <= total_weekly_food_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_food_order_weekly", "file_key_name": "models.agg_weekly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_weekly_food_revenue", "column_name": "avg_revenue_per_food_order_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_items_per_food_order_weekly___0.0c61762bec": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_food_sales_avg_items_per_food_order_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_7475e9cd4d26a170f012ac1b866589a6.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_items_per_food_order_weekly___0.0c61762bec", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_food_sales_avg_items_per_food_order_weekly___0"], "alias": "dbt_utils_expression_is_true_a_7475e9cd4d26a170f012ac1b866589a6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_7475e9cd4d26a170f012ac1b866589a6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_7475e9cd4d26a170f012ac1b866589a6"}, "created_at": 1747516850.3083925, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_7475e9cd4d26a170f012ac1b866589a6\") }}", "language": "sql", "refs": [{"name": "agg_weekly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_7475e9cd4d26a170f012ac1b866589a6.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales`\n\nwhere not(avg_items_per_food_order_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_per_food_order_weekly", "file_key_name": "models.agg_weekly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_items_per_food_order_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_items_per_food_order_weekly___total_food_items_sold_weekly.e2850116ab": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_food_sales_avg_items_per_food_order_weekly___total_food_items_sold_weekly", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_353273e999d543522a2be1b05a8dfeec.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_items_per_food_order_weekly___total_food_items_sold_weekly.e2850116ab", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_food_sales_avg_items_per_food_order_weekly___total_food_items_sold_weekly"], "alias": "dbt_utils_expression_is_true_a_353273e999d543522a2be1b05a8dfeec", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_353273e999d543522a2be1b05a8dfeec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_353273e999d543522a2be1b05a8dfeec"}, "created_at": 1747516850.3133962, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_353273e999d543522a2be1b05a8dfeec\") }}", "language": "sql", "refs": [{"name": "agg_weekly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_353273e999d543522a2be1b05a8dfeec.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales`\n\nwhere not(avg_items_per_food_order_weekly <= total_food_items_sold_weekly)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_per_food_order_weekly", "file_key_name": "models.agg_weekly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_food_items_sold_weekly", "column_name": "avg_items_per_food_order_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_total_customers_weekly___0.b00ced16e6": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_food_sales_total_customers_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_74815a2cc1af92ef388f87efd0b735d6.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_total_customers_weekly___0.b00ced16e6", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_food_sales_total_customers_weekly___0"], "alias": "dbt_utils_expression_is_true_a_74815a2cc1af92ef388f87efd0b735d6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_74815a2cc1af92ef388f87efd0b735d6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_74815a2cc1af92ef388f87efd0b735d6"}, "created_at": 1747516850.319402, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_74815a2cc1af92ef388f87efd0b735d6\") }}", "language": "sql", "refs": [{"name": "agg_weekly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_74815a2cc1af92ef388f87efd0b735d6.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales`\n\nwhere not(total_customers_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_customers_weekly", "file_key_name": "models.agg_weekly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_customers_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_revenue_per_head_weekly___0.50fa490211": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_revenue_per_head_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_ba2f42dc3ff716285b70ecb123c76018.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_revenue_per_head_weekly___0.50fa490211", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_revenue_per_head_weekly___0"], "alias": "dbt_utils_expression_is_true_a_ba2f42dc3ff716285b70ecb123c76018", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_ba2f42dc3ff716285b70ecb123c76018", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_ba2f42dc3ff716285b70ecb123c76018"}, "created_at": 1747516850.3254073, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_ba2f42dc3ff716285b70ecb123c76018\") }}", "language": "sql", "refs": [{"name": "agg_weekly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_ba2f42dc3ff716285b70ecb123c76018.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales`\n\nwhere not(avg_food_revenue_per_head_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_food_revenue_per_head_weekly", "file_key_name": "models.agg_weekly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_food_revenue_per_head_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_revenue_per_head_weekly___total_weekly_food_revenue.e067f7bbb2": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_revenue_per_head_weekly___total_weekly_food_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_54a46230aeed905d725c186a13e4b274.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_revenue_per_head_weekly___total_weekly_food_revenue.e067f7bbb2", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_revenue_per_head_weekly___total_weekly_food_revenue"], "alias": "dbt_utils_expression_is_true_a_54a46230aeed905d725c186a13e4b274", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_54a46230aeed905d725c186a13e4b274", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_54a46230aeed905d725c186a13e4b274"}, "created_at": 1747516850.3304117, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_54a46230aeed905d725c186a13e4b274\") }}", "language": "sql", "refs": [{"name": "agg_weekly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_54a46230aeed905d725c186a13e4b274.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales`\n\nwhere not(avg_food_revenue_per_head_weekly <= total_weekly_food_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_food_revenue_per_head_weekly", "file_key_name": "models.agg_weekly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_weekly_food_revenue", "column_name": "avg_food_revenue_per_head_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_items_per_head_weekly___0.1d347bf445": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_items_per_head_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_feca6e75bb34dd83a93f8eb09220f3d5.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_items_per_head_weekly___0.1d347bf445", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_items_per_head_weekly___0"], "alias": "dbt_utils_expression_is_true_a_feca6e75bb34dd83a93f8eb09220f3d5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_feca6e75bb34dd83a93f8eb09220f3d5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_feca6e75bb34dd83a93f8eb09220f3d5"}, "created_at": 1747516850.3364182, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_feca6e75bb34dd83a93f8eb09220f3d5\") }}", "language": "sql", "refs": [{"name": "agg_weekly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_feca6e75bb34dd83a93f8eb09220f3d5.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales`\n\nwhere not(avg_food_items_per_head_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_food_items_per_head_weekly", "file_key_name": "models.agg_weekly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_food_items_per_head_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_items_per_head_weekly___total_food_items_sold_weekly.318280b408": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_items_per_head_weekly___total_food_items_sold_weekly", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_1da77ac5e2d3363cf31befcb2c962536.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_items_per_head_weekly___total_food_items_sold_weekly.318280b408", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_items_per_head_weekly___total_food_items_sold_weekly"], "alias": "dbt_utils_expression_is_true_a_1da77ac5e2d3363cf31befcb2c962536", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_1da77ac5e2d3363cf31befcb2c962536", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_1da77ac5e2d3363cf31befcb2c962536"}, "created_at": 1747516850.3424227, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_1da77ac5e2d3363cf31befcb2c962536\") }}", "language": "sql", "refs": [{"name": "agg_weekly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_1da77ac5e2d3363cf31befcb2c962536.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales`\n\nwhere not(avg_food_items_per_head_weekly <= total_food_items_sold_weekly)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_food_items_per_head_weekly", "file_key_name": "models.agg_weekly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_food_items_sold_weekly", "column_name": "avg_food_items_per_head_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_food_category_diversity_weekly___0.edb6aeaed1": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_food_sales_food_category_diversity_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_6b8aafaf3289215d326efc01a3757ac4.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_food_category_diversity_weekly___0.edb6aeaed1", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_food_sales_food_category_diversity_weekly___0"], "alias": "dbt_utils_expression_is_true_a_6b8aafaf3289215d326efc01a3757ac4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_6b8aafaf3289215d326efc01a3757ac4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_6b8aafaf3289215d326efc01a3757ac4"}, "created_at": 1747516850.3484285, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_6b8aafaf3289215d326efc01a3757ac4\") }}", "language": "sql", "refs": [{"name": "agg_weekly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_6b8aafaf3289215d326efc01a3757ac4.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales`\n\nwhere not(food_category_diversity_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "food_category_diversity_weekly", "file_key_name": "models.agg_weekly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "food_category_diversity_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_unique_food_items_ordered_weekly___0.290f16a81a": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_food_sales_unique_food_items_ordered_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_d6dc21b61add1d77004ea5fbb0bd1fd1.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_unique_food_items_ordered_weekly___0.290f16a81a", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_food_sales_unique_food_items_ordered_weekly___0"], "alias": "dbt_utils_expression_is_true_a_d6dc21b61add1d77004ea5fbb0bd1fd1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_d6dc21b61add1d77004ea5fbb0bd1fd1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_d6dc21b61add1d77004ea5fbb0bd1fd1"}, "created_at": 1747516850.3534327, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_d6dc21b61add1d77004ea5fbb0bd1fd1\") }}", "language": "sql", "refs": [{"name": "agg_weekly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_d6dc21b61add1d77004ea5fbb0bd1fd1.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_food_sales`\n\nwhere not(unique_food_items_ordered_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_food_items_ordered_weekly", "file_key_name": "models.agg_weekly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "unique_food_items_ordered_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.not_null_agg_weekly_drink_sales_order_week.5938019729": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_weekly_drink_sales_order_week", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_weekly_drink_sales_order_week.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_weekly_drink_sales_order_week.5938019729", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "not_null_agg_weekly_drink_sales_order_week"], "alias": "not_null_agg_weekly_drink_sales_order_week", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516850.359439, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_weekly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\not_null_agg_weekly_drink_sales_order_week.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_week\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales`\nwhere order_week is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_week", "file_key_name": "models.agg_weekly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_drink_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_week", "model": "{{ get_where_subquery(ref('agg_weekly_drink_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.unique_agg_weekly_drink_sales_order_week.ca32244b37": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "unique_agg_weekly_drink_sales_order_week", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "unique_agg_weekly_drink_sales_order_week.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.unique_agg_weekly_drink_sales_order_week.ca32244b37", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "unique_agg_weekly_drink_sales_order_week"], "alias": "unique_agg_weekly_drink_sales_order_week", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516850.362441, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_weekly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\unique_agg_weekly_drink_sales_order_week.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select order_week as unique_field\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales`\n  where order_week is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_week", "file_key_name": "models.agg_weekly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_drink_sales", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_week", "model": "{{ get_where_subquery(ref('agg_weekly_drink_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_total_drink_items_sold_weekly___0.029ac1d01c": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_drink_sales_total_drink_items_sold_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_0c6c261f9ddea23e00f7dee7f0eaee43.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_total_drink_items_sold_weekly___0.029ac1d01c", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_drink_sales_total_drink_items_sold_weekly___0"], "alias": "dbt_utils_expression_is_true_a_0c6c261f9ddea23e00f7dee7f0eaee43", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_0c6c261f9ddea23e00f7dee7f0eaee43", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_0c6c261f9ddea23e00f7dee7f0eaee43"}, "created_at": 1747516850.3644426, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_0c6c261f9ddea23e00f7dee7f0eaee43\") }}", "language": "sql", "refs": [{"name": "agg_weekly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_0c6c261f9ddea23e00f7dee7f0eaee43.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales`\n\nwhere not(total_drink_items_sold_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_drink_items_sold_weekly", "file_key_name": "models.agg_weekly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_drink_items_sold_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_total_weekly_drink_revenue___0.4e8f3101f5": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_drink_sales_total_weekly_drink_revenue___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_aba0322cdbe8ce7283bf0224343e414b.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_total_weekly_drink_revenue___0.4e8f3101f5", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_drink_sales_total_weekly_drink_revenue___0"], "alias": "dbt_utils_expression_is_true_a_aba0322cdbe8ce7283bf0224343e414b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_aba0322cdbe8ce7283bf0224343e414b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_aba0322cdbe8ce7283bf0224343e414b"}, "created_at": 1747516850.3694556, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_aba0322cdbe8ce7283bf0224343e414b\") }}", "language": "sql", "refs": [{"name": "agg_weekly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_aba0322cdbe8ce7283bf0224343e414b.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales`\n\nwhere not(total_weekly_drink_revenue >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_weekly_drink_revenue", "file_key_name": "models.agg_weekly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_weekly_drink_revenue", "model": "{{ get_where_subquery(ref('agg_weekly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_weekly_revenue_per_drink_item___0.86d5dfbd30": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_weekly_revenue_per_drink_item___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_765c723eb736631700c6920035e1c85a.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_weekly_revenue_per_drink_item___0.86d5dfbd30", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_weekly_revenue_per_drink_item___0"], "alias": "dbt_utils_expression_is_true_a_765c723eb736631700c6920035e1c85a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_765c723eb736631700c6920035e1c85a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_765c723eb736631700c6920035e1c85a"}, "created_at": 1747516850.3744543, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_765c723eb736631700c6920035e1c85a\") }}", "language": "sql", "refs": [{"name": "agg_weekly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_765c723eb736631700c6920035e1c85a.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales`\n\nwhere not(avg_weekly_revenue_per_drink_item >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_weekly_revenue_per_drink_item", "file_key_name": "models.agg_weekly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_weekly_revenue_per_drink_item", "model": "{{ get_where_subquery(ref('agg_weekly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.accepted_values_agg_weekly_drink_sales_top_weekly_drink_category_name__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy.cdf9d9f4f1": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "accepted_values_agg_weekly_drink_sales_top_weekly_drink_category_name__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "accepted_values_agg_weekly_dri_cc092e2084e821fa4d4fb6bb9bb9b469.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.accepted_values_agg_weekly_drink_sales_top_weekly_drink_category_name__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy.cdf9d9f4f1", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "accepted_values_agg_weekly_drink_sales_top_weekly_drink_category_name__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy"], "alias": "accepted_values_agg_weekly_dri_cc092e2084e821fa4d4fb6bb9bb9b469", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_agg_weekly_dri_cc092e2084e821fa4d4fb6bb9bb9b469", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_agg_weekly_dri_cc092e2084e821fa4d4fb6bb9bb9b469"}, "created_at": 1747516850.379459, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_agg_weekly_dri_cc092e2084e821fa4d4fb6bb9bb9b469\") }}", "language": "sql", "refs": [{"name": "agg_weekly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\accepted_values_agg_weekly_dri_cc092e2084e821fa4d4fb6bb9bb9b469.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        top_weekly_drink_category_name as value_field,\n        count(*) as n_records\n\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales`\n    group by top_weekly_drink_category_name\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Beers & Cider','Lo & No Alc','Port & Sherry','Ultimate Steakhouse Cocktails','Time & A Place','Rarities','The Sacred Six','Red Wines','Champagne & Sparkling','Rose Wines','Dessert Wines','White Wines','Magnums','Bordeaux','Burgundy'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_weekly_drink_category_name", "file_key_name": "models.agg_weekly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_drink_sales", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Beers & Cider", "Lo & No Alc", "Port & Sherry", "Ultimate Steakhouse Cocktails", "Time & A Place", "Rarities", "The Sacred Six", "Red Wines", "Champagne & Sparkling", "Rose Wines", "Dessert Wines", "White Wines", "Magnums", "Bordeaux", "Burgundy"], "column_name": "top_weekly_drink_category_name", "model": "{{ get_where_subquery(ref('agg_weekly_drink_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_top_weekly_drink_category_revenue___0.5a8808ee7f": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_drink_sales_top_weekly_drink_category_revenue___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_1c009d3eadb35bfc71531c7ace717df2.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_top_weekly_drink_category_revenue___0.5a8808ee7f", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_drink_sales_top_weekly_drink_category_revenue___0"], "alias": "dbt_utils_expression_is_true_a_1c009d3eadb35bfc71531c7ace717df2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_1c009d3eadb35bfc71531c7ace717df2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_1c009d3eadb35bfc71531c7ace717df2"}, "created_at": 1747516850.3854647, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_1c009d3eadb35bfc71531c7ace717df2\") }}", "language": "sql", "refs": [{"name": "agg_weekly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_1c009d3eadb35bfc71531c7ace717df2.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales`\n\nwhere not(top_weekly_drink_category_revenue >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_weekly_drink_category_revenue", "file_key_name": "models.agg_weekly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "top_weekly_drink_category_revenue", "model": "{{ get_where_subquery(ref('agg_weekly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_top_weekly_drink_category_revenue___total_weekly_drink_revenue.67fe76cbce": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_drink_sales_top_weekly_drink_category_revenue___total_weekly_drink_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_1aab5d41f036c79fc389101b53e19df6.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_top_weekly_drink_category_revenue___total_weekly_drink_revenue.67fe76cbce", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_drink_sales_top_weekly_drink_category_revenue___total_weekly_drink_revenue"], "alias": "dbt_utils_expression_is_true_a_1aab5d41f036c79fc389101b53e19df6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_1aab5d41f036c79fc389101b53e19df6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_1aab5d41f036c79fc389101b53e19df6"}, "created_at": 1747516850.391472, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_1aab5d41f036c79fc389101b53e19df6\") }}", "language": "sql", "refs": [{"name": "agg_weekly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_1aab5d41f036c79fc389101b53e19df6.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales`\n\nwhere not(top_weekly_drink_category_revenue <= total_weekly_drink_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_weekly_drink_category_revenue", "file_key_name": "models.agg_weekly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_weekly_drink_revenue", "column_name": "top_weekly_drink_category_revenue", "model": "{{ get_where_subquery(ref('agg_weekly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_drink_sales_pct_top_drink_cat_from_weekly_drink_revenue__1__0.85a532dcc0": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_weekly_drink_sales_pct_top_drink_cat_from_weekly_drink_revenue__1__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_w_ee4ce8c943d215ade6e0c6241e1cdffc.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_drink_sales_pct_top_drink_cat_from_weekly_drink_revenue__1__0.85a532dcc0", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_accepted_range_agg_weekly_drink_sales_pct_top_drink_cat_from_weekly_drink_revenue__1__0"], "alias": "dbt_utils_accepted_range_agg_w_ee4ce8c943d215ade6e0c6241e1cdffc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_w_ee4ce8c943d215ade6e0c6241e1cdffc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_w_ee4ce8c943d215ade6e0c6241e1cdffc"}, "created_at": 1747516850.3974779, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_w_ee4ce8c943d215ade6e0c6241e1cdffc\") }}", "language": "sql", "refs": [{"name": "agg_weekly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_accepted_range_agg_w_ee4ce8c943d215ade6e0c6241e1cdffc.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_top_drink_cat_from_weekly_drink_revenue >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_top_drink_cat_from_weekly_drink_revenue <= 1\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_top_drink_cat_from_weekly_drink_revenue", "file_key_name": "models.agg_weekly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_drink_sales", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_top_drink_cat_from_weekly_drink_revenue", "model": "{{ get_where_subquery(ref('agg_weekly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_distinct_drink_tables_per_day_weekly___0.f7d3c3caa8": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_distinct_drink_tables_per_day_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_784054c62c17f61f5f25ccc701b5932c.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_distinct_drink_tables_per_day_weekly___0.f7d3c3caa8", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_distinct_drink_tables_per_day_weekly___0"], "alias": "dbt_utils_expression_is_true_a_784054c62c17f61f5f25ccc701b5932c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_784054c62c17f61f5f25ccc701b5932c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_784054c62c17f61f5f25ccc701b5932c"}, "created_at": 1747516850.4034815, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_784054c62c17f61f5f25ccc701b5932c\") }}", "language": "sql", "refs": [{"name": "agg_weekly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_784054c62c17f61f5f25ccc701b5932c.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales`\n\nwhere not(avg_distinct_drink_tables_per_day_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_distinct_drink_tables_per_day_weekly", "file_key_name": "models.agg_weekly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_distinct_drink_tables_per_day_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_total_drink_orders_weekly___0.89fcff72dc": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_drink_sales_total_drink_orders_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_d36b693baa60dfb09006ab5f19214713.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_total_drink_orders_weekly___0.89fcff72dc", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_drink_sales_total_drink_orders_weekly___0"], "alias": "dbt_utils_expression_is_true_a_d36b693baa60dfb09006ab5f19214713", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_d36b693baa60dfb09006ab5f19214713", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_d36b693baa60dfb09006ab5f19214713"}, "created_at": 1747516850.409488, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_d36b693baa60dfb09006ab5f19214713\") }}", "language": "sql", "refs": [{"name": "agg_weekly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_d36b693baa60dfb09006ab5f19214713.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales`\n\nwhere not(total_drink_orders_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_drink_orders_weekly", "file_key_name": "models.agg_weekly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_drink_orders_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_revenue_per_drink_order_weekly___0.9f262fe41f": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_revenue_per_drink_order_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_e6312cc3abcee0afe91223ed7d2edc05.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_revenue_per_drink_order_weekly___0.9f262fe41f", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_revenue_per_drink_order_weekly___0"], "alias": "dbt_utils_expression_is_true_a_e6312cc3abcee0afe91223ed7d2edc05", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_e6312cc3abcee0afe91223ed7d2edc05", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_e6312cc3abcee0afe91223ed7d2edc05"}, "created_at": 1747516850.4154928, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_e6312cc3abcee0afe91223ed7d2edc05\") }}", "language": "sql", "refs": [{"name": "agg_weekly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_e6312cc3abcee0afe91223ed7d2edc05.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales`\n\nwhere not(avg_revenue_per_drink_order_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_drink_order_weekly", "file_key_name": "models.agg_weekly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_revenue_per_drink_order_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_revenue_per_drink_order_weekly___total_weekly_drink_revenue.949dd447b7": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_revenue_per_drink_order_weekly___total_weekly_drink_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_281d4f3ac2826b8fd762aa701b3882a7.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_revenue_per_drink_order_weekly___total_weekly_drink_revenue.949dd447b7", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_revenue_per_drink_order_weekly___total_weekly_drink_revenue"], "alias": "dbt_utils_expression_is_true_a_281d4f3ac2826b8fd762aa701b3882a7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_281d4f3ac2826b8fd762aa701b3882a7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_281d4f3ac2826b8fd762aa701b3882a7"}, "created_at": 1747516850.4204998, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_281d4f3ac2826b8fd762aa701b3882a7\") }}", "language": "sql", "refs": [{"name": "agg_weekly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_281d4f3ac2826b8fd762aa701b3882a7.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales`\n\nwhere not(avg_revenue_per_drink_order_weekly <= total_weekly_drink_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_drink_order_weekly", "file_key_name": "models.agg_weekly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_weekly_drink_revenue", "column_name": "avg_revenue_per_drink_order_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_items_per_drink_order_weekly___0.10253eff42": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_items_per_drink_order_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_45ac5872803fd8acb5d3a1defbe65ab2.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_items_per_drink_order_weekly___0.10253eff42", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_items_per_drink_order_weekly___0"], "alias": "dbt_utils_expression_is_true_a_45ac5872803fd8acb5d3a1defbe65ab2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_45ac5872803fd8acb5d3a1defbe65ab2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_45ac5872803fd8acb5d3a1defbe65ab2"}, "created_at": 1747516850.429506, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_45ac5872803fd8acb5d3a1defbe65ab2\") }}", "language": "sql", "refs": [{"name": "agg_weekly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_45ac5872803fd8acb5d3a1defbe65ab2.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales`\n\nwhere not(avg_items_per_drink_order_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_per_drink_order_weekly", "file_key_name": "models.agg_weekly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_items_per_drink_order_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_items_per_drink_order_weekly___total_drink_items_sold_weekly.bd03606c80": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_items_per_drink_order_weekly___total_drink_items_sold_weekly", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_cec45ac600e63ade97bf055389294d7f.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_items_per_drink_order_weekly___total_drink_items_sold_weekly.bd03606c80", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_items_per_drink_order_weekly___total_drink_items_sold_weekly"], "alias": "dbt_utils_expression_is_true_a_cec45ac600e63ade97bf055389294d7f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_cec45ac600e63ade97bf055389294d7f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_cec45ac600e63ade97bf055389294d7f"}, "created_at": 1747516850.4385142, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_cec45ac600e63ade97bf055389294d7f\") }}", "language": "sql", "refs": [{"name": "agg_weekly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_cec45ac600e63ade97bf055389294d7f.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales`\n\nwhere not(avg_items_per_drink_order_weekly <= total_drink_items_sold_weekly)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_per_drink_order_weekly", "file_key_name": "models.agg_weekly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_drink_items_sold_weekly", "column_name": "avg_items_per_drink_order_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_total_customers_weekly___0.95963f5647": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_drink_sales_total_customers_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_0dd1cc0d376edc6e1f7a8bd2481fbfb2.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_total_customers_weekly___0.95963f5647", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_drink_sales_total_customers_weekly___0"], "alias": "dbt_utils_expression_is_true_a_0dd1cc0d376edc6e1f7a8bd2481fbfb2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_0dd1cc0d376edc6e1f7a8bd2481fbfb2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_0dd1cc0d376edc6e1f7a8bd2481fbfb2"}, "created_at": 1747516850.4455202, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_0dd1cc0d376edc6e1f7a8bd2481fbfb2\") }}", "language": "sql", "refs": [{"name": "agg_weekly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_0dd1cc0d376edc6e1f7a8bd2481fbfb2.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales`\n\nwhere not(total_customers_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_customers_weekly", "file_key_name": "models.agg_weekly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_customers_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_revenue_per_head_weekly___0.5f892929b2": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_revenue_per_head_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_a7d815e2abe4858c660c3dff4c95437d.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_revenue_per_head_weekly___0.5f892929b2", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_revenue_per_head_weekly___0"], "alias": "dbt_utils_expression_is_true_a_a7d815e2abe4858c660c3dff4c95437d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_a7d815e2abe4858c660c3dff4c95437d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_a7d815e2abe4858c660c3dff4c95437d"}, "created_at": 1747516850.4525278, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_a7d815e2abe4858c660c3dff4c95437d\") }}", "language": "sql", "refs": [{"name": "agg_weekly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_a7d815e2abe4858c660c3dff4c95437d.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales`\n\nwhere not(avg_drink_revenue_per_head_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_drink_revenue_per_head_weekly", "file_key_name": "models.agg_weekly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_drink_revenue_per_head_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_revenue_per_head_weekly___total_weekly_drink_revenue.9631b34c8b": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_revenue_per_head_weekly___total_weekly_drink_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_6ddb57dd50ecb1b153f544423ef7ae1d.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_revenue_per_head_weekly___total_weekly_drink_revenue.9631b34c8b", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_revenue_per_head_weekly___total_weekly_drink_revenue"], "alias": "dbt_utils_expression_is_true_a_6ddb57dd50ecb1b153f544423ef7ae1d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_6ddb57dd50ecb1b153f544423ef7ae1d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_6ddb57dd50ecb1b153f544423ef7ae1d"}, "created_at": 1747516850.4585328, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_6ddb57dd50ecb1b153f544423ef7ae1d\") }}", "language": "sql", "refs": [{"name": "agg_weekly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_6ddb57dd50ecb1b153f544423ef7ae1d.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales`\n\nwhere not(avg_drink_revenue_per_head_weekly <= total_weekly_drink_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_drink_revenue_per_head_weekly", "file_key_name": "models.agg_weekly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_weekly_drink_revenue", "column_name": "avg_drink_revenue_per_head_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_items_per_haed_weekly___0.c8cffabb92": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_items_per_haed_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_e92f7a30da4f529fbd0233ff9e167ed1.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_items_per_haed_weekly___0.c8cffabb92", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_items_per_haed_weekly___0"], "alias": "dbt_utils_expression_is_true_a_e92f7a30da4f529fbd0233ff9e167ed1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_e92f7a30da4f529fbd0233ff9e167ed1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_e92f7a30da4f529fbd0233ff9e167ed1"}, "created_at": 1747516850.4635384, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_e92f7a30da4f529fbd0233ff9e167ed1\") }}", "language": "sql", "refs": [{"name": "agg_weekly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_e92f7a30da4f529fbd0233ff9e167ed1.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales`\n\nwhere not(avg_drink_items_per_haed_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_drink_items_per_haed_weekly", "file_key_name": "models.agg_weekly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_drink_items_per_haed_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_items_per_haed_weekly___total_drink_items_sold_weekly.6f9c841a8b": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_items_per_haed_weekly___total_drink_items_sold_weekly", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_69d9af141e10590371fe690b9082178e.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_items_per_haed_weekly___total_drink_items_sold_weekly.6f9c841a8b", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_items_per_haed_weekly___total_drink_items_sold_weekly"], "alias": "dbt_utils_expression_is_true_a_69d9af141e10590371fe690b9082178e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_69d9af141e10590371fe690b9082178e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_69d9af141e10590371fe690b9082178e"}, "created_at": 1747516850.469547, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_69d9af141e10590371fe690b9082178e\") }}", "language": "sql", "refs": [{"name": "agg_weekly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_69d9af141e10590371fe690b9082178e.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales`\n\nwhere not(avg_drink_items_per_haed_weekly <= total_drink_items_sold_weekly)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_drink_items_per_haed_weekly", "file_key_name": "models.agg_weekly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_drink_items_sold_weekly", "column_name": "avg_drink_items_per_haed_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_drink_category_diversity_weekly___0.70f3b4ea29": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_drink_sales_drink_category_diversity_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_e535a6c8cf8808bce98c1d1f44dfc907.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_drink_category_diversity_weekly___0.70f3b4ea29", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_drink_sales_drink_category_diversity_weekly___0"], "alias": "dbt_utils_expression_is_true_a_e535a6c8cf8808bce98c1d1f44dfc907", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_e535a6c8cf8808bce98c1d1f44dfc907", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_e535a6c8cf8808bce98c1d1f44dfc907"}, "created_at": 1747516850.4765494, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_e535a6c8cf8808bce98c1d1f44dfc907\") }}", "language": "sql", "refs": [{"name": "agg_weekly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_e535a6c8cf8808bce98c1d1f44dfc907.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales`\n\nwhere not(drink_category_diversity_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "drink_category_diversity_weekly", "file_key_name": "models.agg_weekly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "drink_category_diversity_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_unique_drink_items_ordered_weekly___0.f1407f0393": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_drink_sales_unique_drink_items_ordered_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_e3543686686ea7d59cd041bde0066f6d.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_unique_drink_items_ordered_weekly___0.f1407f0393", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_drink_sales_unique_drink_items_ordered_weekly___0"], "alias": "dbt_utils_expression_is_true_a_e3543686686ea7d59cd041bde0066f6d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_e3543686686ea7d59cd041bde0066f6d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_e3543686686ea7d59cd041bde0066f6d"}, "created_at": 1747516850.4825535, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_e3543686686ea7d59cd041bde0066f6d\") }}", "language": "sql", "refs": [{"name": "agg_weekly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_e3543686686ea7d59cd041bde0066f6d.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_drink_sales`\n\nwhere not(unique_drink_items_ordered_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_drink_items_ordered_weekly", "file_key_name": "models.agg_weekly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "unique_drink_items_ordered_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.not_null_agg_weekly_total_sales_order_week.cdd5ee8945": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_weekly_total_sales_order_week", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_weekly_total_sales_order_week.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_weekly_total_sales_order_week.cdd5ee8945", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "not_null_agg_weekly_total_sales_order_week"], "alias": "not_null_agg_weekly_total_sales_order_week", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516850.4885588, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\not_null_agg_weekly_total_sales_order_week.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_week\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\nwhere order_week is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_week", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_week", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.unique_agg_weekly_total_sales_order_week.219fbdfbf9": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "unique_agg_weekly_total_sales_order_week", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "unique_agg_weekly_total_sales_order_week.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.unique_agg_weekly_total_sales_order_week.219fbdfbf9", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "unique_agg_weekly_total_sales_order_week"], "alias": "unique_agg_weekly_total_sales_order_week", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516850.4915617, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\unique_agg_weekly_total_sales_order_week.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select order_week as unique_field\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\n  where order_week is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_week", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_week", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_total_items_ordered_weekly___0.73155e1e88": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_total_sales_total_items_ordered_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_7d540642c52a76e00af241e450dcb529.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_total_items_ordered_weekly___0.73155e1e88", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_total_sales_total_items_ordered_weekly___0"], "alias": "dbt_utils_expression_is_true_a_7d540642c52a76e00af241e450dcb529", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_7d540642c52a76e00af241e450dcb529", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_7d540642c52a76e00af241e450dcb529"}, "created_at": 1747516850.493564, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_7d540642c52a76e00af241e450dcb529\") }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_7d540642c52a76e00af241e450dcb529.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\n\nwhere not(total_items_ordered_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_items_ordered_weekly", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_items_ordered_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_total_weekly_revenue___0.ce7b641f73": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_total_sales_total_weekly_revenue___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_c1a6b882c8b440d63d1e7060a84538e5.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_total_weekly_revenue___0.ce7b641f73", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_total_sales_total_weekly_revenue___0"], "alias": "dbt_utils_expression_is_true_a_c1a6b882c8b440d63d1e7060a84538e5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_c1a6b882c8b440d63d1e7060a84538e5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_c1a6b882c8b440d63d1e7060a84538e5"}, "created_at": 1747516850.4995685, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_c1a6b882c8b440d63d1e7060a84538e5\") }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_c1a6b882c8b440d63d1e7060a84538e5.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\n\nwhere not(total_weekly_revenue >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_weekly_revenue", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_weekly_revenue", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_revenue_per_item_weekly___0.ae9684cdd7": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_total_sales_avg_revenue_per_item_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_ffdfc5980e78248c2404b8bde2bcba32.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_revenue_per_item_weekly___0.ae9684cdd7", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_total_sales_avg_revenue_per_item_weekly___0"], "alias": "dbt_utils_expression_is_true_a_ffdfc5980e78248c2404b8bde2bcba32", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_ffdfc5980e78248c2404b8bde2bcba32", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_ffdfc5980e78248c2404b8bde2bcba32"}, "created_at": 1747516850.5055747, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_ffdfc5980e78248c2404b8bde2bcba32\") }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_ffdfc5980e78248c2404b8bde2bcba32.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\n\nwhere not(avg_revenue_per_item_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_item_weekly", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_revenue_per_item_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_category_diversity_weekly___0.6c9a732c42": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_total_sales_category_diversity_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_a6c7cb9ace44417d2adc4a842fd3688c.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_category_diversity_weekly___0.6c9a732c42", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_total_sales_category_diversity_weekly___0"], "alias": "dbt_utils_expression_is_true_a_a6c7cb9ace44417d2adc4a842fd3688c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_a6c7cb9ace44417d2adc4a842fd3688c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_a6c7cb9ace44417d2adc4a842fd3688c"}, "created_at": 1747516850.51158, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_a6c7cb9ace44417d2adc4a842fd3688c\") }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_a6c7cb9ace44417d2adc4a842fd3688c.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\n\nwhere not(category_diversity_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category_diversity_weekly", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "category_diversity_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_top_weekly_category_revenue___0.dc832bb5be": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_total_sales_top_weekly_category_revenue___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_4843994fcc34dcb2dc05c99348702417.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_top_weekly_category_revenue___0.dc832bb5be", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_total_sales_top_weekly_category_revenue___0"], "alias": "dbt_utils_expression_is_true_a_4843994fcc34dcb2dc05c99348702417", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_4843994fcc34dcb2dc05c99348702417", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_4843994fcc34dcb2dc05c99348702417"}, "created_at": 1747516850.5175867, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_4843994fcc34dcb2dc05c99348702417\") }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_4843994fcc34dcb2dc05c99348702417.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\n\nwhere not(top_weekly_category_revenue >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_weekly_category_revenue", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "top_weekly_category_revenue", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_top_weekly_category_revenue___total_weekly_revenue.ccb45074c3": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_total_sales_top_weekly_category_revenue___total_weekly_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_b259406e6c9201e0f4977d7091129c7c.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_top_weekly_category_revenue___total_weekly_revenue.ccb45074c3", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_total_sales_top_weekly_category_revenue___total_weekly_revenue"], "alias": "dbt_utils_expression_is_true_a_b259406e6c9201e0f4977d7091129c7c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_b259406e6c9201e0f4977d7091129c7c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_b259406e6c9201e0f4977d7091129c7c"}, "created_at": 1747516850.5235918, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_b259406e6c9201e0f4977d7091129c7c\") }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_b259406e6c9201e0f4977d7091129c7c.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\n\nwhere not(top_weekly_category_revenue <= total_weekly_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_weekly_category_revenue", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_weekly_revenue", "column_name": "top_weekly_category_revenue", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_total_sales_pct_food_from_weekly_revenue__1__0.820b22ed71": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_weekly_total_sales_pct_food_from_weekly_revenue__1__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_w_a0aa8728ab9dd0210602d7de5233eff7.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_total_sales_pct_food_from_weekly_revenue__1__0.820b22ed71", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_accepted_range_agg_weekly_total_sales_pct_food_from_weekly_revenue__1__0"], "alias": "dbt_utils_accepted_range_agg_w_a0aa8728ab9dd0210602d7de5233eff7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_w_a0aa8728ab9dd0210602d7de5233eff7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_w_a0aa8728ab9dd0210602d7de5233eff7"}, "created_at": 1747516850.5295963, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_w_a0aa8728ab9dd0210602d7de5233eff7\") }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_accepted_range_agg_w_a0aa8728ab9dd0210602d7de5233eff7.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_food_from_weekly_revenue >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_food_from_weekly_revenue <= 1\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_food_from_weekly_revenue", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_food_from_weekly_revenue", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_total_sales_pct_drink_from_weekly_revenue__1__0.5e0fb563eb": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_weekly_total_sales_pct_drink_from_weekly_revenue__1__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_w_d8676da07f0615dec4d03d6de86f83d7.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_total_sales_pct_drink_from_weekly_revenue__1__0.5e0fb563eb", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_accepted_range_agg_weekly_total_sales_pct_drink_from_weekly_revenue__1__0"], "alias": "dbt_utils_accepted_range_agg_w_d8676da07f0615dec4d03d6de86f83d7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_w_d8676da07f0615dec4d03d6de86f83d7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_w_d8676da07f0615dec4d03d6de86f83d7"}, "created_at": 1747516850.5376031, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_w_d8676da07f0615dec4d03d6de86f83d7\") }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_accepted_range_agg_w_d8676da07f0615dec4d03d6de86f83d7.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_drink_from_weekly_revenue >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_drink_from_weekly_revenue <= 1\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_drink_from_weekly_revenue", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_drink_from_weekly_revenue", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_total_sales_pct_top_cat_of_total_weekly_revenue__1__0.03791cbfec": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_weekly_total_sales_pct_top_cat_of_total_weekly_revenue__1__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_w_9ef4361a6bb46513bcbbf3cfb90c7d5a.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_total_sales_pct_top_cat_of_total_weekly_revenue__1__0.03791cbfec", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_accepted_range_agg_weekly_total_sales_pct_top_cat_of_total_weekly_revenue__1__0"], "alias": "dbt_utils_accepted_range_agg_w_9ef4361a6bb46513bcbbf3cfb90c7d5a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_w_9ef4361a6bb46513bcbbf3cfb90c7d5a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_w_9ef4361a6bb46513bcbbf3cfb90c7d5a"}, "created_at": 1747516850.5426078, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_w_9ef4361a6bb46513bcbbf3cfb90c7d5a\") }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_accepted_range_agg_w_9ef4361a6bb46513bcbbf3cfb90c7d5a.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_top_cat_of_total_weekly_revenue >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_top_cat_of_total_weekly_revenue <= 1\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_top_cat_of_total_weekly_revenue", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_top_cat_of_total_weekly_revenue", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_total_weekly_customers___0.b0b75fd34a": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_total_sales_total_weekly_customers___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_b74361ad3ea7b2cd43871335d1e82a82.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_total_weekly_customers___0.b0b75fd34a", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_total_sales_total_weekly_customers___0"], "alias": "dbt_utils_expression_is_true_a_b74361ad3ea7b2cd43871335d1e82a82", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_b74361ad3ea7b2cd43871335d1e82a82", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_b74361ad3ea7b2cd43871335d1e82a82"}, "created_at": 1747516850.547612, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_b74361ad3ea7b2cd43871335d1e82a82\") }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_b74361ad3ea7b2cd43871335d1e82a82.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\n\nwhere not(total_weekly_customers >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_weekly_customers", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_weekly_customers", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_weekly_revenue_per_head___0.587120d32c": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_total_sales_avg_weekly_revenue_per_head___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_6d51ae7ccf35e8b6fef381d8ca3c102a.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_weekly_revenue_per_head___0.587120d32c", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_total_sales_avg_weekly_revenue_per_head___0"], "alias": "dbt_utils_expression_is_true_a_6d51ae7ccf35e8b6fef381d8ca3c102a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_6d51ae7ccf35e8b6fef381d8ca3c102a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_6d51ae7ccf35e8b6fef381d8ca3c102a"}, "created_at": 1747516850.5536184, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_6d51ae7ccf35e8b6fef381d8ca3c102a\") }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_6d51ae7ccf35e8b6fef381d8ca3c102a.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\n\nwhere not(avg_weekly_revenue_per_head >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_weekly_revenue_per_head", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_weekly_revenue_per_head", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_weekly_revenue_per_head___total_weekly_revenue.42e91454f3": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_total_sales_avg_weekly_revenue_per_head___total_weekly_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_d2d958ca3d35690d8776b8b92bf8b1f4.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_weekly_revenue_per_head___total_weekly_revenue.42e91454f3", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_total_sales_avg_weekly_revenue_per_head___total_weekly_revenue"], "alias": "dbt_utils_expression_is_true_a_d2d958ca3d35690d8776b8b92bf8b1f4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_d2d958ca3d35690d8776b8b92bf8b1f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_d2d958ca3d35690d8776b8b92bf8b1f4"}, "created_at": 1747516850.5596235, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_d2d958ca3d35690d8776b8b92bf8b1f4\") }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_d2d958ca3d35690d8776b8b92bf8b1f4.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\n\nwhere not(avg_weekly_revenue_per_head <= total_weekly_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_weekly_revenue_per_head", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_weekly_revenue", "column_name": "avg_weekly_revenue_per_head", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_ordered_per_head_weekly___0.07d5dbcd47": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_ordered_per_head_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_c2dc9a2a4cb7d5b24e8ae97d4a8e6bca.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_ordered_per_head_weekly___0.07d5dbcd47", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_ordered_per_head_weekly___0"], "alias": "dbt_utils_expression_is_true_a_c2dc9a2a4cb7d5b24e8ae97d4a8e6bca", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_c2dc9a2a4cb7d5b24e8ae97d4a8e6bca", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_c2dc9a2a4cb7d5b24e8ae97d4a8e6bca"}, "created_at": 1747516850.5646281, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_c2dc9a2a4cb7d5b24e8ae97d4a8e6bca\") }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_c2dc9a2a4cb7d5b24e8ae97d4a8e6bca.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\n\nwhere not(avg_items_ordered_per_head_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_ordered_per_head_weekly", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_items_ordered_per_head_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_ordered_per_head_weekly___total_items_ordered_weekly.b2b0a0e409": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_ordered_per_head_weekly___total_items_ordered_weekly", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_117b0ba65f983453a4f1ff6f1f4c8542.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_ordered_per_head_weekly___total_items_ordered_weekly.b2b0a0e409", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_ordered_per_head_weekly___total_items_ordered_weekly"], "alias": "dbt_utils_expression_is_true_a_117b0ba65f983453a4f1ff6f1f4c8542", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_117b0ba65f983453a4f1ff6f1f4c8542", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_117b0ba65f983453a4f1ff6f1f4c8542"}, "created_at": 1747516850.5706336, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_117b0ba65f983453a4f1ff6f1f4c8542\") }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_117b0ba65f983453a4f1ff6f1f4c8542.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\n\nwhere not(avg_items_ordered_per_head_weekly <= total_items_ordered_weekly)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_ordered_per_head_weekly", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_items_ordered_weekly", "column_name": "avg_items_ordered_per_head_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_total_orders_weekly___0.5ae1a4f6b8": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_total_sales_total_orders_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_fba507c919bc905f171bb55c956b4696.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_total_orders_weekly___0.5ae1a4f6b8", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_total_sales_total_orders_weekly___0"], "alias": "dbt_utils_expression_is_true_a_fba507c919bc905f171bb55c956b4696", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_fba507c919bc905f171bb55c956b4696", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_fba507c919bc905f171bb55c956b4696"}, "created_at": 1747516850.5766387, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_fba507c919bc905f171bb55c956b4696\") }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_fba507c919bc905f171bb55c956b4696.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\n\nwhere not(total_orders_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_orders_weekly", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_orders_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_per_order_weekly___0.c79e705419": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_per_order_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_216b3f066bfd0c1f2388d0d2faf67c05.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_per_order_weekly___0.c79e705419", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_per_order_weekly___0"], "alias": "dbt_utils_expression_is_true_a_216b3f066bfd0c1f2388d0d2faf67c05", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_216b3f066bfd0c1f2388d0d2faf67c05", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_216b3f066bfd0c1f2388d0d2faf67c05"}, "created_at": 1747516850.5826442, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_216b3f066bfd0c1f2388d0d2faf67c05\") }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_216b3f066bfd0c1f2388d0d2faf67c05.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\n\nwhere not(avg_items_per_order_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_per_order_weekly", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_items_per_order_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_per_order_weekly___total_items_ordered_weekly.d9cd7feced": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_per_order_weekly___total_items_ordered_weekly", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_cdc60761242c56e646cd560602e66864.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_per_order_weekly___total_items_ordered_weekly.d9cd7feced", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_per_order_weekly___total_items_ordered_weekly"], "alias": "dbt_utils_expression_is_true_a_cdc60761242c56e646cd560602e66864", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_cdc60761242c56e646cd560602e66864", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_cdc60761242c56e646cd560602e66864"}, "created_at": 1747516850.58865, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_cdc60761242c56e646cd560602e66864\") }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_cdc60761242c56e646cd560602e66864.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\n\nwhere not(avg_items_per_order_weekly <= total_items_ordered_weekly)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_per_order_weekly", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_items_ordered_weekly", "column_name": "avg_items_per_order_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_revenue_per_order_weekly___0.5379b62377": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_total_sales_avg_revenue_per_order_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_b06ebf5f09cab014a1055a92b65b7ce3.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_revenue_per_order_weekly___0.5379b62377", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_total_sales_avg_revenue_per_order_weekly___0"], "alias": "dbt_utils_expression_is_true_a_b06ebf5f09cab014a1055a92b65b7ce3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_b06ebf5f09cab014a1055a92b65b7ce3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_b06ebf5f09cab014a1055a92b65b7ce3"}, "created_at": 1747516850.595656, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_b06ebf5f09cab014a1055a92b65b7ce3\") }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_b06ebf5f09cab014a1055a92b65b7ce3.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\n\nwhere not(avg_revenue_per_order_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_order_weekly", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_revenue_per_order_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_revenue_per_order_weekly___total_weekly_revenue.df8ba52941": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_total_sales_avg_revenue_per_order_weekly___total_weekly_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_1fa806b2c92b76aa527791c63167b65e.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_revenue_per_order_weekly___total_weekly_revenue.df8ba52941", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_total_sales_avg_revenue_per_order_weekly___total_weekly_revenue"], "alias": "dbt_utils_expression_is_true_a_1fa806b2c92b76aa527791c63167b65e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_1fa806b2c92b76aa527791c63167b65e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_1fa806b2c92b76aa527791c63167b65e"}, "created_at": 1747516850.6026635, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_1fa806b2c92b76aa527791c63167b65e\") }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_1fa806b2c92b76aa527791c63167b65e.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\n\nwhere not(avg_revenue_per_order_weekly <= total_weekly_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_order_weekly", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_weekly_revenue", "column_name": "avg_revenue_per_order_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_unique_items_ordered_weekly___0.ae03e2fda3": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_total_sales_unique_items_ordered_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_4f05668f2bfcb16b0b77bf0bc7cd4b4a.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_unique_items_ordered_weekly___0.ae03e2fda3", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_total_sales_unique_items_ordered_weekly___0"], "alias": "dbt_utils_expression_is_true_a_4f05668f2bfcb16b0b77bf0bc7cd4b4a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_4f05668f2bfcb16b0b77bf0bc7cd4b4a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_4f05668f2bfcb16b0b77bf0bc7cd4b4a"}, "created_at": 1747516850.608669, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_4f05668f2bfcb16b0b77bf0bc7cd4b4a\") }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_4f05668f2bfcb16b0b77bf0bc7cd4b4a.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\n\nwhere not(unique_items_ordered_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_items_ordered_weekly", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "unique_items_ordered_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_distinct_tables_per_day_weekly___0.960810e9aa": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_total_sales_avg_distinct_tables_per_day_weekly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_2dfc2e2d51249f5dede37ff2b121bc65.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_distinct_tables_per_day_weekly___0.960810e9aa", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_total_sales_avg_distinct_tables_per_day_weekly___0"], "alias": "dbt_utils_expression_is_true_a_2dfc2e2d51249f5dede37ff2b121bc65", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_2dfc2e2d51249f5dede37ff2b121bc65", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_2dfc2e2d51249f5dede37ff2b121bc65"}, "created_at": 1747516850.6146734, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_2dfc2e2d51249f5dede37ff2b121bc65\") }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_2dfc2e2d51249f5dede37ff2b121bc65.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\n\nwhere not(avg_distinct_tables_per_day_weekly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_distinct_tables_per_day_weekly", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_distinct_tables_per_day_weekly", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_rolling_avg_revenue_4wk___0.9537536a2c": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_total_sales_rolling_avg_revenue_4wk___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_2ef6ddf15359da35406576b7926c80e5.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_rolling_avg_revenue_4wk___0.9537536a2c", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_total_sales_rolling_avg_revenue_4wk___0"], "alias": "dbt_utils_expression_is_true_a_2ef6ddf15359da35406576b7926c80e5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_2ef6ddf15359da35406576b7926c80e5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_2ef6ddf15359da35406576b7926c80e5"}, "created_at": 1747516850.621679, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_2ef6ddf15359da35406576b7926c80e5\") }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_2ef6ddf15359da35406576b7926c80e5.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\n\nwhere not(rolling_avg_revenue_4wk >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rolling_avg_revenue_4wk", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "rolling_avg_revenue_4wk", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_rolling_avg_items_sold_4wk___0.cedc5b3664": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_weekly_total_sales_rolling_avg_items_sold_4wk___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_3ab59d94cd8b74d946104e55fb724423.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_rolling_avg_items_sold_4wk___0.cedc5b3664", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_weekly_total_sales_rolling_avg_items_sold_4wk___0"], "alias": "dbt_utils_expression_is_true_a_3ab59d94cd8b74d946104e55fb724423", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_3ab59d94cd8b74d946104e55fb724423", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_3ab59d94cd8b74d946104e55fb724423"}, "created_at": 1747516850.6276865, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_3ab59d94cd8b74d946104e55fb724423\") }}", "language": "sql", "refs": [{"name": "agg_weekly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_weekly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_3ab59d94cd8b74d946104e55fb724423.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_weekly_total_sales`\n\nwhere not(rolling_avg_items_sold_4wk >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rolling_avg_items_sold_4wk", "file_key_name": "models.agg_weekly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_weekly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "rolling_avg_items_sold_4wk", "model": "{{ get_where_subquery(ref('agg_weekly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.not_null_agg_monthly_food_sales_order_month.ba9fc09f09": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_monthly_food_sales_order_month", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_monthly_food_sales_order_month.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_monthly_food_sales_order_month.ba9fc09f09", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "not_null_agg_monthly_food_sales_order_month"], "alias": "not_null_agg_monthly_food_sales_order_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516850.6336927, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_monthly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\not_null_agg_monthly_food_sales_order_month.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_month\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`\nwhere order_month is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_month", "file_key_name": "models.agg_monthly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_food_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_month", "model": "{{ get_where_subquery(ref('agg_monthly_food_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.unique_agg_monthly_food_sales_order_month.3bf0bfe60d": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "unique_agg_monthly_food_sales_order_month", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "unique_agg_monthly_food_sales_order_month.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.unique_agg_monthly_food_sales_order_month.3bf0bfe60d", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "unique_agg_monthly_food_sales_order_month"], "alias": "unique_agg_monthly_food_sales_order_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516850.6366947, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_monthly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\unique_agg_monthly_food_sales_order_month.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select order_month as unique_field\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`\n  where order_month is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_month", "file_key_name": "models.agg_monthly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_food_sales", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_month", "model": "{{ get_where_subquery(ref('agg_monthly_food_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_total_food_items_sold_monthly___0.1ff43b23e7": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_food_sales_total_food_items_sold_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_d997e5d6496c99d33956323b0288878c.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_total_food_items_sold_monthly___0.1ff43b23e7", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_food_sales_total_food_items_sold_monthly___0"], "alias": "dbt_utils_expression_is_true_a_d997e5d6496c99d33956323b0288878c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_d997e5d6496c99d33956323b0288878c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_d997e5d6496c99d33956323b0288878c"}, "created_at": 1747516850.6386971, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_d997e5d6496c99d33956323b0288878c\") }}", "language": "sql", "refs": [{"name": "agg_monthly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_d997e5d6496c99d33956323b0288878c.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`\n\nwhere not(total_food_items_sold_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_food_items_sold_monthly", "file_key_name": "models.agg_monthly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_food_items_sold_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_total_monthly_food_revenue___0.d89576f612": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_food_sales_total_monthly_food_revenue___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_a6be0d9984dbcebdfe5e9f239fbf2ff2.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_total_monthly_food_revenue___0.d89576f612", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_food_sales_total_monthly_food_revenue___0"], "alias": "dbt_utils_expression_is_true_a_a6be0d9984dbcebdfe5e9f239fbf2ff2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_a6be0d9984dbcebdfe5e9f239fbf2ff2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_a6be0d9984dbcebdfe5e9f239fbf2ff2"}, "created_at": 1747516850.6437013, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_a6be0d9984dbcebdfe5e9f239fbf2ff2\") }}", "language": "sql", "refs": [{"name": "agg_monthly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_a6be0d9984dbcebdfe5e9f239fbf2ff2.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`\n\nwhere not(total_monthly_food_revenue >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_monthly_food_revenue", "file_key_name": "models.agg_monthly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_monthly_food_revenue", "model": "{{ get_where_subquery(ref('agg_monthly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_monthly_revenue_per_food_item___0.68a278a88b": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_food_sales_avg_monthly_revenue_per_food_item___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_0d64e8b99df60115cdc0c7a3e406bfe3.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_monthly_revenue_per_food_item___0.68a278a88b", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_food_sales_avg_monthly_revenue_per_food_item___0"], "alias": "dbt_utils_expression_is_true_a_0d64e8b99df60115cdc0c7a3e406bfe3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_0d64e8b99df60115cdc0c7a3e406bfe3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_0d64e8b99df60115cdc0c7a3e406bfe3"}, "created_at": 1747516850.6497066, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_0d64e8b99df60115cdc0c7a3e406bfe3\") }}", "language": "sql", "refs": [{"name": "agg_monthly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_0d64e8b99df60115cdc0c7a3e406bfe3.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`\n\nwhere not(avg_monthly_revenue_per_food_item >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_monthly_revenue_per_food_item", "file_key_name": "models.agg_monthly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_monthly_revenue_per_food_item", "model": "{{ get_where_subquery(ref('agg_monthly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_monthly_revenue_per_food_item___total_monthly_food_revenue.81fdd42b50": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_food_sales_avg_monthly_revenue_per_food_item___total_monthly_food_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_40ca2e4206744d0686c80ffc43cea58d.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_monthly_revenue_per_food_item___total_monthly_food_revenue.81fdd42b50", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_food_sales_avg_monthly_revenue_per_food_item___total_monthly_food_revenue"], "alias": "dbt_utils_expression_is_true_a_40ca2e4206744d0686c80ffc43cea58d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_40ca2e4206744d0686c80ffc43cea58d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_40ca2e4206744d0686c80ffc43cea58d"}, "created_at": 1747516850.6547112, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_40ca2e4206744d0686c80ffc43cea58d\") }}", "language": "sql", "refs": [{"name": "agg_monthly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_40ca2e4206744d0686c80ffc43cea58d.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`\n\nwhere not(avg_monthly_revenue_per_food_item <= total_monthly_food_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_monthly_revenue_per_food_item", "file_key_name": "models.agg_monthly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_monthly_food_revenue", "column_name": "avg_monthly_revenue_per_food_item", "model": "{{ get_where_subquery(ref('agg_monthly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.accepted_values_agg_monthly_food_sales_top_monthly_food_category_name__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters.46f9cd5b81": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "accepted_values_agg_monthly_food_sales_top_monthly_food_category_name__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "accepted_values_agg_monthly_fo_2b45cff2fa7deb6f22f0b9fcb000e01c.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.accepted_values_agg_monthly_food_sales_top_monthly_food_category_name__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters.46f9cd5b81", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "accepted_values_agg_monthly_food_sales_top_monthly_food_category_name__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters"], "alias": "accepted_values_agg_monthly_fo_2b45cff2fa7deb6f22f0b9fcb000e01c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_agg_monthly_fo_2b45cff2fa7deb6f22f0b9fcb000e01c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_agg_monthly_fo_2b45cff2fa7deb6f22f0b9fcb000e01c"}, "created_at": 1747516850.6617181, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_agg_monthly_fo_2b45cff2fa7deb6f22f0b9fcb000e01c\") }}", "language": "sql", "refs": [{"name": "agg_monthly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\accepted_values_agg_monthly_fo_2b45cff2fa7deb6f22f0b9fcb000e01c.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        top_monthly_food_category_name as value_field,\n        count(*) as n_records\n\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`\n    group by top_monthly_food_category_name\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Mains','Large Cuts','Steaks','Cheese','Sides','Sauces','Puddings','Ice-Cream & Sorbet','Extras','Chocolates','Starters'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_monthly_food_category_name", "file_key_name": "models.agg_monthly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_food_sales", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Mains", "Large Cuts", "Steaks", "Cheese", "Sides", "Sauces", "Puddings", "Ice-Cream & Sorbet", "Extras", "Chocolates", "Starters"], "column_name": "top_monthly_food_category_name", "model": "{{ get_where_subquery(ref('agg_monthly_food_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_top_monthly_food_category_revenue___0.14bcbe442c": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_food_sales_top_monthly_food_category_revenue___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_31d20db6f4ead7b44321eb0227bf4f0a.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_top_monthly_food_category_revenue___0.14bcbe442c", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_food_sales_top_monthly_food_category_revenue___0"], "alias": "dbt_utils_expression_is_true_a_31d20db6f4ead7b44321eb0227bf4f0a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_31d20db6f4ead7b44321eb0227bf4f0a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_31d20db6f4ead7b44321eb0227bf4f0a"}, "created_at": 1747516850.6677241, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_31d20db6f4ead7b44321eb0227bf4f0a\") }}", "language": "sql", "refs": [{"name": "agg_monthly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_31d20db6f4ead7b44321eb0227bf4f0a.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`\n\nwhere not(top_monthly_food_category_revenue >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_monthly_food_category_revenue", "file_key_name": "models.agg_monthly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "top_monthly_food_category_revenue", "model": "{{ get_where_subquery(ref('agg_monthly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_top_monthly_food_category_revenue___total_monthly_food_revenue.c8d1ffb00c": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_food_sales_top_monthly_food_category_revenue___total_monthly_food_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_7c35eaa9cab5dc5f477323f864bdd8e7.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_top_monthly_food_category_revenue___total_monthly_food_revenue.c8d1ffb00c", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_food_sales_top_monthly_food_category_revenue___total_monthly_food_revenue"], "alias": "dbt_utils_expression_is_true_a_7c35eaa9cab5dc5f477323f864bdd8e7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_7c35eaa9cab5dc5f477323f864bdd8e7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_7c35eaa9cab5dc5f477323f864bdd8e7"}, "created_at": 1747516850.6737301, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_7c35eaa9cab5dc5f477323f864bdd8e7\") }}", "language": "sql", "refs": [{"name": "agg_monthly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_7c35eaa9cab5dc5f477323f864bdd8e7.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`\n\nwhere not(top_monthly_food_category_revenue <= total_monthly_food_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_monthly_food_category_revenue", "file_key_name": "models.agg_monthly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_monthly_food_revenue", "column_name": "top_monthly_food_category_revenue", "model": "{{ get_where_subquery(ref('agg_monthly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_food_sales_pct_top_food_cat_from_monthly_food_revenue__1__0.07c126e482": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_monthly_food_sales_pct_top_food_cat_from_monthly_food_revenue__1__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_m_22e5c7d205f54ae4474798c0664fe6be.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_food_sales_pct_top_food_cat_from_monthly_food_revenue__1__0.07c126e482", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_accepted_range_agg_monthly_food_sales_pct_top_food_cat_from_monthly_food_revenue__1__0"], "alias": "dbt_utils_accepted_range_agg_m_22e5c7d205f54ae4474798c0664fe6be", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_m_22e5c7d205f54ae4474798c0664fe6be", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_m_22e5c7d205f54ae4474798c0664fe6be"}, "created_at": 1747516850.679734, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_m_22e5c7d205f54ae4474798c0664fe6be\") }}", "language": "sql", "refs": [{"name": "agg_monthly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_accepted_range_agg_m_22e5c7d205f54ae4474798c0664fe6be.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_top_food_cat_from_monthly_food_revenue >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_top_food_cat_from_monthly_food_revenue <= 1\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_top_food_cat_from_monthly_food_revenue", "file_key_name": "models.agg_monthly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_food_sales", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_top_food_cat_from_monthly_food_revenue", "model": "{{ get_where_subquery(ref('agg_monthly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_distinct_food_tables_per_day_monthly___0.b84988c81d": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_food_sales_avg_distinct_food_tables_per_day_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_a9d80b3f694bd2fe36aaa9bc30954bb6.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_distinct_food_tables_per_day_monthly___0.b84988c81d", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_food_sales_avg_distinct_food_tables_per_day_monthly___0"], "alias": "dbt_utils_expression_is_true_a_a9d80b3f694bd2fe36aaa9bc30954bb6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_a9d80b3f694bd2fe36aaa9bc30954bb6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_a9d80b3f694bd2fe36aaa9bc30954bb6"}, "created_at": 1747516850.6847396, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_a9d80b3f694bd2fe36aaa9bc30954bb6\") }}", "language": "sql", "refs": [{"name": "agg_monthly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_a9d80b3f694bd2fe36aaa9bc30954bb6.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`\n\nwhere not(avg_distinct_food_tables_per_day_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_distinct_food_tables_per_day_monthly", "file_key_name": "models.agg_monthly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_distinct_food_tables_per_day_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_total_food_orders_monthly___0.844f753d49": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_food_sales_total_food_orders_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_baf194deabc6451bcdee7393498c0a6c.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_total_food_orders_monthly___0.844f753d49", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_food_sales_total_food_orders_monthly___0"], "alias": "dbt_utils_expression_is_true_a_baf194deabc6451bcdee7393498c0a6c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_baf194deabc6451bcdee7393498c0a6c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_baf194deabc6451bcdee7393498c0a6c"}, "created_at": 1747516850.6907446, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_baf194deabc6451bcdee7393498c0a6c\") }}", "language": "sql", "refs": [{"name": "agg_monthly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_baf194deabc6451bcdee7393498c0a6c.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`\n\nwhere not(total_food_orders_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_food_orders_monthly", "file_key_name": "models.agg_monthly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_food_orders_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_revenue_per_food_order_monthly___0.750879b3d1": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_food_sales_avg_revenue_per_food_order_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_2c469bc17781ac590da7a8d7ba2fb86d.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_revenue_per_food_order_monthly___0.750879b3d1", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_food_sales_avg_revenue_per_food_order_monthly___0"], "alias": "dbt_utils_expression_is_true_a_2c469bc17781ac590da7a8d7ba2fb86d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_2c469bc17781ac590da7a8d7ba2fb86d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_2c469bc17781ac590da7a8d7ba2fb86d"}, "created_at": 1747516850.69675, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_2c469bc17781ac590da7a8d7ba2fb86d\") }}", "language": "sql", "refs": [{"name": "agg_monthly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_2c469bc17781ac590da7a8d7ba2fb86d.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`\n\nwhere not(avg_revenue_per_food_order_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_food_order_monthly", "file_key_name": "models.agg_monthly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_revenue_per_food_order_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_revenue_per_food_order_monthly___total_monthly_food_revenue.b123784a03": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_food_sales_avg_revenue_per_food_order_monthly___total_monthly_food_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_ffff46b61d9d3d59122603ada6ddcaac.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_revenue_per_food_order_monthly___total_monthly_food_revenue.b123784a03", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_food_sales_avg_revenue_per_food_order_monthly___total_monthly_food_revenue"], "alias": "dbt_utils_expression_is_true_a_ffff46b61d9d3d59122603ada6ddcaac", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_ffff46b61d9d3d59122603ada6ddcaac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_ffff46b61d9d3d59122603ada6ddcaac"}, "created_at": 1747516850.702755, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_ffff46b61d9d3d59122603ada6ddcaac\") }}", "language": "sql", "refs": [{"name": "agg_monthly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_ffff46b61d9d3d59122603ada6ddcaac.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`\n\nwhere not(avg_revenue_per_food_order_monthly <= total_monthly_food_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_food_order_monthly", "file_key_name": "models.agg_monthly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_monthly_food_revenue", "column_name": "avg_revenue_per_food_order_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_items_per_food_order_monthly___0.298cecd64a": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_food_sales_avg_items_per_food_order_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_a5907f1f7f942737573051fa03d58561.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_items_per_food_order_monthly___0.298cecd64a", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_food_sales_avg_items_per_food_order_monthly___0"], "alias": "dbt_utils_expression_is_true_a_a5907f1f7f942737573051fa03d58561", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_a5907f1f7f942737573051fa03d58561", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_a5907f1f7f942737573051fa03d58561"}, "created_at": 1747516850.709762, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_a5907f1f7f942737573051fa03d58561\") }}", "language": "sql", "refs": [{"name": "agg_monthly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_a5907f1f7f942737573051fa03d58561.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`\n\nwhere not(avg_items_per_food_order_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_per_food_order_monthly", "file_key_name": "models.agg_monthly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_items_per_food_order_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_items_per_food_order_monthly___total_food_items_sold_monthly.2f74bd8c9e": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_food_sales_avg_items_per_food_order_monthly___total_food_items_sold_monthly", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_c48827ef35f050065198b0d47e95c96f.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_items_per_food_order_monthly___total_food_items_sold_monthly.2f74bd8c9e", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_food_sales_avg_items_per_food_order_monthly___total_food_items_sold_monthly"], "alias": "dbt_utils_expression_is_true_a_c48827ef35f050065198b0d47e95c96f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_c48827ef35f050065198b0d47e95c96f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_c48827ef35f050065198b0d47e95c96f"}, "created_at": 1747516850.7147658, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_c48827ef35f050065198b0d47e95c96f\") }}", "language": "sql", "refs": [{"name": "agg_monthly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_c48827ef35f050065198b0d47e95c96f.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`\n\nwhere not(avg_items_per_food_order_monthly <= total_food_items_sold_monthly)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_per_food_order_monthly", "file_key_name": "models.agg_monthly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_food_items_sold_monthly", "column_name": "avg_items_per_food_order_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_total_customers_monthly___0.58ca7d7d9e": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_food_sales_total_customers_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_4d4e527dc0c01c2ab359398953af0c39.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_total_customers_monthly___0.58ca7d7d9e", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_food_sales_total_customers_monthly___0"], "alias": "dbt_utils_expression_is_true_a_4d4e527dc0c01c2ab359398953af0c39", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_4d4e527dc0c01c2ab359398953af0c39", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_4d4e527dc0c01c2ab359398953af0c39"}, "created_at": 1747516850.7217734, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_4d4e527dc0c01c2ab359398953af0c39\") }}", "language": "sql", "refs": [{"name": "agg_monthly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_4d4e527dc0c01c2ab359398953af0c39.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`\n\nwhere not(total_customers_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_customers_monthly", "file_key_name": "models.agg_monthly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_customers_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_revenue_per_head_monthly___0.7ee2c7cf05": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_revenue_per_head_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_5a922e6b13050546ae88d1f8c8f1c206.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_revenue_per_head_monthly___0.7ee2c7cf05", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_revenue_per_head_monthly___0"], "alias": "dbt_utils_expression_is_true_a_5a922e6b13050546ae88d1f8c8f1c206", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_5a922e6b13050546ae88d1f8c8f1c206", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_5a922e6b13050546ae88d1f8c8f1c206"}, "created_at": 1747516850.7277796, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_5a922e6b13050546ae88d1f8c8f1c206\") }}", "language": "sql", "refs": [{"name": "agg_monthly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_5a922e6b13050546ae88d1f8c8f1c206.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`\n\nwhere not(avg_food_revenue_per_head_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_food_revenue_per_head_monthly", "file_key_name": "models.agg_monthly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_food_revenue_per_head_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_revenue_per_head_monthly___total_monthly_food_revenue.174e9defe0": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_revenue_per_head_monthly___total_monthly_food_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_eadd4af19f188c213b7f1ca1a45cf6f7.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_revenue_per_head_monthly___total_monthly_food_revenue.174e9defe0", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_revenue_per_head_monthly___total_monthly_food_revenue"], "alias": "dbt_utils_expression_is_true_a_eadd4af19f188c213b7f1ca1a45cf6f7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_eadd4af19f188c213b7f1ca1a45cf6f7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_eadd4af19f188c213b7f1ca1a45cf6f7"}, "created_at": 1747516850.7337828, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_eadd4af19f188c213b7f1ca1a45cf6f7\") }}", "language": "sql", "refs": [{"name": "agg_monthly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_eadd4af19f188c213b7f1ca1a45cf6f7.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`\n\nwhere not(avg_food_revenue_per_head_monthly <= total_monthly_food_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_food_revenue_per_head_monthly", "file_key_name": "models.agg_monthly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_monthly_food_revenue", "column_name": "avg_food_revenue_per_head_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_items_per_head_monthly___0.2461b1d63c": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_items_per_head_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_ea5e5995fe01fdcd08d4fea78742a3b3.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_items_per_head_monthly___0.2461b1d63c", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_items_per_head_monthly___0"], "alias": "dbt_utils_expression_is_true_a_ea5e5995fe01fdcd08d4fea78742a3b3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_ea5e5995fe01fdcd08d4fea78742a3b3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_ea5e5995fe01fdcd08d4fea78742a3b3"}, "created_at": 1747516850.7397888, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_ea5e5995fe01fdcd08d4fea78742a3b3\") }}", "language": "sql", "refs": [{"name": "agg_monthly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_ea5e5995fe01fdcd08d4fea78742a3b3.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`\n\nwhere not(avg_food_items_per_head_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_food_items_per_head_monthly", "file_key_name": "models.agg_monthly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_food_items_per_head_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_items_per_head_monthly___total_food_items_sold_monthly.477a6a2fca": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_items_per_head_monthly___total_food_items_sold_monthly", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_508db547d6bbb802f12a271e03e2f800.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_items_per_head_monthly___total_food_items_sold_monthly.477a6a2fca", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_items_per_head_monthly___total_food_items_sold_monthly"], "alias": "dbt_utils_expression_is_true_a_508db547d6bbb802f12a271e03e2f800", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_508db547d6bbb802f12a271e03e2f800", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_508db547d6bbb802f12a271e03e2f800"}, "created_at": 1747516850.7457926, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_508db547d6bbb802f12a271e03e2f800\") }}", "language": "sql", "refs": [{"name": "agg_monthly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_508db547d6bbb802f12a271e03e2f800.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`\n\nwhere not(avg_food_items_per_head_monthly <= total_food_items_sold_monthly)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_food_items_per_head_monthly", "file_key_name": "models.agg_monthly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_food_items_sold_monthly", "column_name": "avg_food_items_per_head_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_food_category_diversity_monthly___0.b74e692065": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_food_sales_food_category_diversity_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_3e9c3eaba0d9bfb57ae9c9c389af4eb0.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_food_category_diversity_monthly___0.b74e692065", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_food_sales_food_category_diversity_monthly___0"], "alias": "dbt_utils_expression_is_true_a_3e9c3eaba0d9bfb57ae9c9c389af4eb0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_3e9c3eaba0d9bfb57ae9c9c389af4eb0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_3e9c3eaba0d9bfb57ae9c9c389af4eb0"}, "created_at": 1747516850.7507977, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_3e9c3eaba0d9bfb57ae9c9c389af4eb0\") }}", "language": "sql", "refs": [{"name": "agg_monthly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_3e9c3eaba0d9bfb57ae9c9c389af4eb0.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`\n\nwhere not(food_category_diversity_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "food_category_diversity_monthly", "file_key_name": "models.agg_monthly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "food_category_diversity_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_unique_food_items_ordered_monthly___0.a0c517fb3e": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_food_sales_unique_food_items_ordered_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_243027d6cec808e1594b4aa81278344a.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_unique_food_items_ordered_monthly___0.a0c517fb3e", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_food_sales_unique_food_items_ordered_monthly___0"], "alias": "dbt_utils_expression_is_true_a_243027d6cec808e1594b4aa81278344a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_243027d6cec808e1594b4aa81278344a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_243027d6cec808e1594b4aa81278344a"}, "created_at": 1747516850.756803, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_243027d6cec808e1594b4aa81278344a\") }}", "language": "sql", "refs": [{"name": "agg_monthly_food_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_food_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_243027d6cec808e1594b4aa81278344a.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_food_sales`\n\nwhere not(unique_food_items_ordered_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_food_items_ordered_monthly", "file_key_name": "models.agg_monthly_food_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_food_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "unique_food_items_ordered_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_food_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.not_null_agg_monthly_drink_sales_order_month.d637a64958": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_monthly_drink_sales_order_month", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_monthly_drink_sales_order_month.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_monthly_drink_sales_order_month.d637a64958", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "not_null_agg_monthly_drink_sales_order_month"], "alias": "not_null_agg_monthly_drink_sales_order_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516850.7618074, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_monthly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\not_null_agg_monthly_drink_sales_order_month.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_month\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`\nwhere order_month is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_month", "file_key_name": "models.agg_monthly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_drink_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_month", "model": "{{ get_where_subquery(ref('agg_monthly_drink_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.unique_agg_monthly_drink_sales_order_month.319cf0cf13": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "unique_agg_monthly_drink_sales_order_month", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "unique_agg_monthly_drink_sales_order_month.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.unique_agg_monthly_drink_sales_order_month.319cf0cf13", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "unique_agg_monthly_drink_sales_order_month"], "alias": "unique_agg_monthly_drink_sales_order_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516850.7648103, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_monthly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\unique_agg_monthly_drink_sales_order_month.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select order_month as unique_field\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`\n  where order_month is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_month", "file_key_name": "models.agg_monthly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_drink_sales", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_month", "model": "{{ get_where_subquery(ref('agg_monthly_drink_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_total_drink_items_sold_monthly___0.a0a68903fd": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_drink_sales_total_drink_items_sold_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_a8411825b948a1af81f61285e51f3d79.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_total_drink_items_sold_monthly___0.a0a68903fd", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_drink_sales_total_drink_items_sold_monthly___0"], "alias": "dbt_utils_expression_is_true_a_a8411825b948a1af81f61285e51f3d79", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_a8411825b948a1af81f61285e51f3d79", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_a8411825b948a1af81f61285e51f3d79"}, "created_at": 1747516850.7668135, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_a8411825b948a1af81f61285e51f3d79\") }}", "language": "sql", "refs": [{"name": "agg_monthly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_a8411825b948a1af81f61285e51f3d79.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`\n\nwhere not(total_drink_items_sold_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_drink_items_sold_monthly", "file_key_name": "models.agg_monthly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_drink_items_sold_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_total_monthly_drink_revenue___0.29fee5e19e": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_drink_sales_total_monthly_drink_revenue___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_93dd364bbf801d5fca694b0ce664bf74.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_total_monthly_drink_revenue___0.29fee5e19e", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_drink_sales_total_monthly_drink_revenue___0"], "alias": "dbt_utils_expression_is_true_a_93dd364bbf801d5fca694b0ce664bf74", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_93dd364bbf801d5fca694b0ce664bf74", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_93dd364bbf801d5fca694b0ce664bf74"}, "created_at": 1747516850.7728174, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_93dd364bbf801d5fca694b0ce664bf74\") }}", "language": "sql", "refs": [{"name": "agg_monthly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_93dd364bbf801d5fca694b0ce664bf74.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`\n\nwhere not(total_monthly_drink_revenue >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_monthly_drink_revenue", "file_key_name": "models.agg_monthly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_monthly_drink_revenue", "model": "{{ get_where_subquery(ref('agg_monthly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_monthly_revenue_per_drink_item___0.ae46762f96": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_monthly_revenue_per_drink_item___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_40d40cb6876bb580f1dbc35543a956b9.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_monthly_revenue_per_drink_item___0.ae46762f96", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_monthly_revenue_per_drink_item___0"], "alias": "dbt_utils_expression_is_true_a_40d40cb6876bb580f1dbc35543a956b9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_40d40cb6876bb580f1dbc35543a956b9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_40d40cb6876bb580f1dbc35543a956b9"}, "created_at": 1747516850.7778223, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_40d40cb6876bb580f1dbc35543a956b9\") }}", "language": "sql", "refs": [{"name": "agg_monthly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_40d40cb6876bb580f1dbc35543a956b9.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`\n\nwhere not(avg_monthly_revenue_per_drink_item >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_monthly_revenue_per_drink_item", "file_key_name": "models.agg_monthly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_monthly_revenue_per_drink_item", "model": "{{ get_where_subquery(ref('agg_monthly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_monthly_revenue_per_drink_item___total_monthly_drink_revenue.0b375d7a1a": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_monthly_revenue_per_drink_item___total_monthly_drink_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_a7c5a169bcb1f3234ef1650ebf89e609.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_monthly_revenue_per_drink_item___total_monthly_drink_revenue.0b375d7a1a", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_monthly_revenue_per_drink_item___total_monthly_drink_revenue"], "alias": "dbt_utils_expression_is_true_a_a7c5a169bcb1f3234ef1650ebf89e609", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_a7c5a169bcb1f3234ef1650ebf89e609", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_a7c5a169bcb1f3234ef1650ebf89e609"}, "created_at": 1747516850.7838283, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_a7c5a169bcb1f3234ef1650ebf89e609\") }}", "language": "sql", "refs": [{"name": "agg_monthly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_a7c5a169bcb1f3234ef1650ebf89e609.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`\n\nwhere not(avg_monthly_revenue_per_drink_item <= total_monthly_drink_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_monthly_revenue_per_drink_item", "file_key_name": "models.agg_monthly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_monthly_drink_revenue", "column_name": "avg_monthly_revenue_per_drink_item", "model": "{{ get_where_subquery(ref('agg_monthly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.accepted_values_agg_monthly_drink_sales_top_monthly_drink_category_name__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy.e9ff30fcb1": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "accepted_values_agg_monthly_drink_sales_top_monthly_drink_category_name__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "accepted_values_agg_monthly_dr_5c87671aaa38f11190b02ae595925cfb.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.accepted_values_agg_monthly_drink_sales_top_monthly_drink_category_name__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy.e9ff30fcb1", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "accepted_values_agg_monthly_drink_sales_top_monthly_drink_category_name__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy"], "alias": "accepted_values_agg_monthly_dr_5c87671aaa38f11190b02ae595925cfb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_agg_monthly_dr_5c87671aaa38f11190b02ae595925cfb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_agg_monthly_dr_5c87671aaa38f11190b02ae595925cfb"}, "created_at": 1747516850.7898326, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_agg_monthly_dr_5c87671aaa38f11190b02ae595925cfb\") }}", "language": "sql", "refs": [{"name": "agg_monthly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\accepted_values_agg_monthly_dr_5c87671aaa38f11190b02ae595925cfb.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        top_monthly_drink_category_name as value_field,\n        count(*) as n_records\n\n    from `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`\n    group by top_monthly_drink_category_name\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Beers & Cider','Lo & No Alc','Port & Sherry','Ultimate Steakhouse Cocktails','Time & A Place','Rarities','The Sacred Six','Red Wines','Champagne & Sparkling','Rose Wines','Dessert Wines','White Wines','Magnums','Bordeaux','Burgundy'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_monthly_drink_category_name", "file_key_name": "models.agg_monthly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_drink_sales", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Beers & Cider", "Lo & No Alc", "Port & Sherry", "Ultimate Steakhouse Cocktails", "Time & A Place", "Rarities", "The Sacred Six", "Red Wines", "Champagne & Sparkling", "Rose Wines", "Dessert Wines", "White Wines", "Magnums", "Bordeaux", "Burgundy"], "column_name": "top_monthly_drink_category_name", "model": "{{ get_where_subquery(ref('agg_monthly_drink_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_top_monthly_drink_category_revenue___0.544c494439": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_drink_sales_top_monthly_drink_category_revenue___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_f1e775e9a7e36b1c58e42b986682b9a2.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_top_monthly_drink_category_revenue___0.544c494439", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_drink_sales_top_monthly_drink_category_revenue___0"], "alias": "dbt_utils_expression_is_true_a_f1e775e9a7e36b1c58e42b986682b9a2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_f1e775e9a7e36b1c58e42b986682b9a2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_f1e775e9a7e36b1c58e42b986682b9a2"}, "created_at": 1747516850.7958379, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_f1e775e9a7e36b1c58e42b986682b9a2\") }}", "language": "sql", "refs": [{"name": "agg_monthly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_f1e775e9a7e36b1c58e42b986682b9a2.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`\n\nwhere not(top_monthly_drink_category_revenue >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_monthly_drink_category_revenue", "file_key_name": "models.agg_monthly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "top_monthly_drink_category_revenue", "model": "{{ get_where_subquery(ref('agg_monthly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_top_monthly_drink_category_revenue___total_monthly_drink_revenue.f7ff55af58": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_drink_sales_top_monthly_drink_category_revenue___total_monthly_drink_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_3f01b1ef664da8b4580087f227dcfcb5.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_top_monthly_drink_category_revenue___total_monthly_drink_revenue.f7ff55af58", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_drink_sales_top_monthly_drink_category_revenue___total_monthly_drink_revenue"], "alias": "dbt_utils_expression_is_true_a_3f01b1ef664da8b4580087f227dcfcb5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_3f01b1ef664da8b4580087f227dcfcb5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_3f01b1ef664da8b4580087f227dcfcb5"}, "created_at": 1747516850.8018434, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_3f01b1ef664da8b4580087f227dcfcb5\") }}", "language": "sql", "refs": [{"name": "agg_monthly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_3f01b1ef664da8b4580087f227dcfcb5.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`\n\nwhere not(top_monthly_drink_category_revenue <= total_monthly_drink_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_monthly_drink_category_revenue", "file_key_name": "models.agg_monthly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_monthly_drink_revenue", "column_name": "top_monthly_drink_category_revenue", "model": "{{ get_where_subquery(ref('agg_monthly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_drink_sales_pct_top_drink_cat_from_monthly_drinks_revenue__1__0.8a660dc628": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_monthly_drink_sales_pct_top_drink_cat_from_monthly_drinks_revenue__1__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_m_9de03f015a0ddfafe569c418582f667b.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_drink_sales_pct_top_drink_cat_from_monthly_drinks_revenue__1__0.8a660dc628", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_accepted_range_agg_monthly_drink_sales_pct_top_drink_cat_from_monthly_drinks_revenue__1__0"], "alias": "dbt_utils_accepted_range_agg_m_9de03f015a0ddfafe569c418582f667b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_m_9de03f015a0ddfafe569c418582f667b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_m_9de03f015a0ddfafe569c418582f667b"}, "created_at": 1747516850.8088503, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_m_9de03f015a0ddfafe569c418582f667b\") }}", "language": "sql", "refs": [{"name": "agg_monthly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_accepted_range_agg_m_9de03f015a0ddfafe569c418582f667b.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_top_drink_cat_from_monthly_drinks_revenue >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_top_drink_cat_from_monthly_drinks_revenue <= 1\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_top_drink_cat_from_monthly_drinks_revenue", "file_key_name": "models.agg_monthly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_drink_sales", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_top_drink_cat_from_monthly_drinks_revenue", "model": "{{ get_where_subquery(ref('agg_monthly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_distinct_drink_tables_per_day_monthly___0.d7cb5d4d53": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_distinct_drink_tables_per_day_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_00afa40c0fa1f8dc7c0b91f8af514443.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_distinct_drink_tables_per_day_monthly___0.d7cb5d4d53", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_distinct_drink_tables_per_day_monthly___0"], "alias": "dbt_utils_expression_is_true_a_00afa40c0fa1f8dc7c0b91f8af514443", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_00afa40c0fa1f8dc7c0b91f8af514443", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_00afa40c0fa1f8dc7c0b91f8af514443"}, "created_at": 1747516850.8148556, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_00afa40c0fa1f8dc7c0b91f8af514443\") }}", "language": "sql", "refs": [{"name": "agg_monthly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_00afa40c0fa1f8dc7c0b91f8af514443.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`\n\nwhere not(avg_distinct_drink_tables_per_day_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_distinct_drink_tables_per_day_monthly", "file_key_name": "models.agg_monthly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_distinct_drink_tables_per_day_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_total_drink_orders_monthly___0.aba693124d": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_drink_sales_total_drink_orders_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_84f13a8f53e74ed22fadd988e0de7792.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_total_drink_orders_monthly___0.aba693124d", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_drink_sales_total_drink_orders_monthly___0"], "alias": "dbt_utils_expression_is_true_a_84f13a8f53e74ed22fadd988e0de7792", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_84f13a8f53e74ed22fadd988e0de7792", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_84f13a8f53e74ed22fadd988e0de7792"}, "created_at": 1747516850.820862, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_84f13a8f53e74ed22fadd988e0de7792\") }}", "language": "sql", "refs": [{"name": "agg_monthly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_84f13a8f53e74ed22fadd988e0de7792.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`\n\nwhere not(total_drink_orders_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_drink_orders_monthly", "file_key_name": "models.agg_monthly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_drink_orders_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_revenue_per_drinks_order_monthly___0.437465dbf8": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_revenue_per_drinks_order_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_250a3539985dd603fddbfec9f3137503.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_revenue_per_drinks_order_monthly___0.437465dbf8", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_revenue_per_drinks_order_monthly___0"], "alias": "dbt_utils_expression_is_true_a_250a3539985dd603fddbfec9f3137503", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_250a3539985dd603fddbfec9f3137503", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_250a3539985dd603fddbfec9f3137503"}, "created_at": 1747516850.8268666, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_250a3539985dd603fddbfec9f3137503\") }}", "language": "sql", "refs": [{"name": "agg_monthly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_250a3539985dd603fddbfec9f3137503.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`\n\nwhere not(avg_revenue_per_drinks_order_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_drinks_order_monthly", "file_key_name": "models.agg_monthly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_revenue_per_drinks_order_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_revenue_per_drinks_order_monthly___total_monthly_drink_revenue.358e708571": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_revenue_per_drinks_order_monthly___total_monthly_drink_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_6b237150e4b69a68acdcd2e52f5cae6c.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_revenue_per_drinks_order_monthly___total_monthly_drink_revenue.358e708571", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_revenue_per_drinks_order_monthly___total_monthly_drink_revenue"], "alias": "dbt_utils_expression_is_true_a_6b237150e4b69a68acdcd2e52f5cae6c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_6b237150e4b69a68acdcd2e52f5cae6c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_6b237150e4b69a68acdcd2e52f5cae6c"}, "created_at": 1747516850.8328722, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_6b237150e4b69a68acdcd2e52f5cae6c\") }}", "language": "sql", "refs": [{"name": "agg_monthly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_6b237150e4b69a68acdcd2e52f5cae6c.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`\n\nwhere not(avg_revenue_per_drinks_order_monthly <= total_monthly_drink_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_drinks_order_monthly", "file_key_name": "models.agg_monthly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_monthly_drink_revenue", "column_name": "avg_revenue_per_drinks_order_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_items_per_drinks_order_monthly___1.f0b829bc3b": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_items_per_drinks_order_monthly___1", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_1fd9dbbd32366216c5d0e27b4382ba5c.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_items_per_drinks_order_monthly___1.f0b829bc3b", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_items_per_drinks_order_monthly___1"], "alias": "dbt_utils_expression_is_true_a_1fd9dbbd32366216c5d0e27b4382ba5c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_1fd9dbbd32366216c5d0e27b4382ba5c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_1fd9dbbd32366216c5d0e27b4382ba5c"}, "created_at": 1747516850.838878, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_1fd9dbbd32366216c5d0e27b4382ba5c\") }}", "language": "sql", "refs": [{"name": "agg_monthly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_1fd9dbbd32366216c5d0e27b4382ba5c.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`\n\nwhere not(avg_items_per_drinks_order_monthly >= 1)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_per_drinks_order_monthly", "file_key_name": "models.agg_monthly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 1", "column_name": "avg_items_per_drinks_order_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_items_per_drinks_order_monthly___total_drink_items_sold_monthly.ff447dc7ce": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_items_per_drinks_order_monthly___total_drink_items_sold_monthly", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_15a44d62fa2a2d1c8b0b6574f2c3fbb6.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_items_per_drinks_order_monthly___total_drink_items_sold_monthly.ff447dc7ce", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_items_per_drinks_order_monthly___total_drink_items_sold_monthly"], "alias": "dbt_utils_expression_is_true_a_15a44d62fa2a2d1c8b0b6574f2c3fbb6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_15a44d62fa2a2d1c8b0b6574f2c3fbb6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_15a44d62fa2a2d1c8b0b6574f2c3fbb6"}, "created_at": 1747516850.843882, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_15a44d62fa2a2d1c8b0b6574f2c3fbb6\") }}", "language": "sql", "refs": [{"name": "agg_monthly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_15a44d62fa2a2d1c8b0b6574f2c3fbb6.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`\n\nwhere not(avg_items_per_drinks_order_monthly <= total_drink_items_sold_monthly)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_per_drinks_order_monthly", "file_key_name": "models.agg_monthly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_drink_items_sold_monthly", "column_name": "avg_items_per_drinks_order_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_total_customers_monthly___0.a585e5c44e": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_drink_sales_total_customers_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_80fb56bd6c2e0d69f2ddf0516b0c35fb.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_total_customers_monthly___0.a585e5c44e", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_drink_sales_total_customers_monthly___0"], "alias": "dbt_utils_expression_is_true_a_80fb56bd6c2e0d69f2ddf0516b0c35fb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_80fb56bd6c2e0d69f2ddf0516b0c35fb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_80fb56bd6c2e0d69f2ddf0516b0c35fb"}, "created_at": 1747516850.8498874, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_80fb56bd6c2e0d69f2ddf0516b0c35fb\") }}", "language": "sql", "refs": [{"name": "agg_monthly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_80fb56bd6c2e0d69f2ddf0516b0c35fb.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`\n\nwhere not(total_customers_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_customers_monthly", "file_key_name": "models.agg_monthly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_customers_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drinks_revenue_per_head_monthly___0.bc9852b7ff": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drinks_revenue_per_head_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_e03f8acc905a7343a7588671a7d7c915.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drinks_revenue_per_head_monthly___0.bc9852b7ff", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drinks_revenue_per_head_monthly___0"], "alias": "dbt_utils_expression_is_true_a_e03f8acc905a7343a7588671a7d7c915", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_e03f8acc905a7343a7588671a7d7c915", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_e03f8acc905a7343a7588671a7d7c915"}, "created_at": 1747516850.8558922, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_e03f8acc905a7343a7588671a7d7c915\") }}", "language": "sql", "refs": [{"name": "agg_monthly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_e03f8acc905a7343a7588671a7d7c915.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`\n\nwhere not(avg_drinks_revenue_per_head_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_drinks_revenue_per_head_monthly", "file_key_name": "models.agg_monthly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_drinks_revenue_per_head_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drinks_revenue_per_head_monthly___total_monthly_drink_revenue.239e569194": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drinks_revenue_per_head_monthly___total_monthly_drink_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_4640f9892c5df5721746932ed98c5bbd.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drinks_revenue_per_head_monthly___total_monthly_drink_revenue.239e569194", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drinks_revenue_per_head_monthly___total_monthly_drink_revenue"], "alias": "dbt_utils_expression_is_true_a_4640f9892c5df5721746932ed98c5bbd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_4640f9892c5df5721746932ed98c5bbd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_4640f9892c5df5721746932ed98c5bbd"}, "created_at": 1747516850.8618984, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_4640f9892c5df5721746932ed98c5bbd\") }}", "language": "sql", "refs": [{"name": "agg_monthly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_4640f9892c5df5721746932ed98c5bbd.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`\n\nwhere not(avg_drinks_revenue_per_head_monthly <= total_monthly_drink_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_drinks_revenue_per_head_monthly", "file_key_name": "models.agg_monthly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_monthly_drink_revenue", "column_name": "avg_drinks_revenue_per_head_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drink_items_per_head_monthly___0.566b981669": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drink_items_per_head_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_06c63fa0ddbe1e36904c6028f937ea91.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drink_items_per_head_monthly___0.566b981669", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drink_items_per_head_monthly___0"], "alias": "dbt_utils_expression_is_true_a_06c63fa0ddbe1e36904c6028f937ea91", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_06c63fa0ddbe1e36904c6028f937ea91", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_06c63fa0ddbe1e36904c6028f937ea91"}, "created_at": 1747516850.8679035, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_06c63fa0ddbe1e36904c6028f937ea91\") }}", "language": "sql", "refs": [{"name": "agg_monthly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_06c63fa0ddbe1e36904c6028f937ea91.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`\n\nwhere not(avg_drink_items_per_head_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_drink_items_per_head_monthly", "file_key_name": "models.agg_monthly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_drink_items_per_head_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drink_items_per_head_monthly___total_drink_items_sold_monthly.1c96391e40": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drink_items_per_head_monthly___total_drink_items_sold_monthly", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_01c6abb7510bee051fa0657178cb1f66.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drink_items_per_head_monthly___total_drink_items_sold_monthly.1c96391e40", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drink_items_per_head_monthly___total_drink_items_sold_monthly"], "alias": "dbt_utils_expression_is_true_a_01c6abb7510bee051fa0657178cb1f66", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_01c6abb7510bee051fa0657178cb1f66", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_01c6abb7510bee051fa0657178cb1f66"}, "created_at": 1747516850.874911, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_01c6abb7510bee051fa0657178cb1f66\") }}", "language": "sql", "refs": [{"name": "agg_monthly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_01c6abb7510bee051fa0657178cb1f66.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`\n\nwhere not(avg_drink_items_per_head_monthly <= total_drink_items_sold_monthly)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_drink_items_per_head_monthly", "file_key_name": "models.agg_monthly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_drink_items_sold_monthly", "column_name": "avg_drink_items_per_head_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_drink_category_diversity_monthly___0.6fd0308aab": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_drink_sales_drink_category_diversity_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_b55ff3b1923464a6c5a9b3dd478f853f.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_drink_category_diversity_monthly___0.6fd0308aab", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_drink_sales_drink_category_diversity_monthly___0"], "alias": "dbt_utils_expression_is_true_a_b55ff3b1923464a6c5a9b3dd478f853f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_b55ff3b1923464a6c5a9b3dd478f853f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_b55ff3b1923464a6c5a9b3dd478f853f"}, "created_at": 1747516850.8809166, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_b55ff3b1923464a6c5a9b3dd478f853f\") }}", "language": "sql", "refs": [{"name": "agg_monthly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_b55ff3b1923464a6c5a9b3dd478f853f.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`\n\nwhere not(drink_category_diversity_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "drink_category_diversity_monthly", "file_key_name": "models.agg_monthly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "drink_category_diversity_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_unique_drink_items_ordered_monthly___0.709e843536": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_drink_sales_unique_drink_items_ordered_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_0f2f99d8355487f256f34fcfe767087b.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_unique_drink_items_ordered_monthly___0.709e843536", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_drink_sales_unique_drink_items_ordered_monthly___0"], "alias": "dbt_utils_expression_is_true_a_0f2f99d8355487f256f34fcfe767087b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_0f2f99d8355487f256f34fcfe767087b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_0f2f99d8355487f256f34fcfe767087b"}, "created_at": 1747516850.8869216, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_0f2f99d8355487f256f34fcfe767087b\") }}", "language": "sql", "refs": [{"name": "agg_monthly_drink_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_drink_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_0f2f99d8355487f256f34fcfe767087b.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_drink_sales`\n\nwhere not(unique_drink_items_ordered_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_drink_items_ordered_monthly", "file_key_name": "models.agg_monthly_drink_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_drink_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "unique_drink_items_ordered_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_drink_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.not_null_agg_monthly_total_sales_order_month.4a7866b528": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_agg_monthly_total_sales_order_month", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_agg_monthly_total_sales_order_month.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.not_null_agg_monthly_total_sales_order_month.4a7866b528", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "not_null_agg_monthly_total_sales_order_month"], "alias": "not_null_agg_monthly_total_sales_order_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516850.892927, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\not_null_agg_monthly_total_sales_order_month.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_month\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\nwhere order_month is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_month", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_month", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.unique_agg_monthly_total_sales_order_month.3393fa5406": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "unique_agg_monthly_total_sales_order_month", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "unique_agg_monthly_total_sales_order_month.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.unique_agg_monthly_total_sales_order_month.3393fa5406", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "unique_agg_monthly_total_sales_order_month"], "alias": "unique_agg_monthly_total_sales_order_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516850.8949287, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\unique_agg_monthly_total_sales_order_month.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select order_month as unique_field\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n  where order_month is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_month", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_month", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_total_items_ordered_monthly___0.a682889021": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_total_sales_total_items_ordered_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_bdaf3d80389c7c8f45a1751a684b6e2c.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_total_items_ordered_monthly___0.a682889021", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_total_sales_total_items_ordered_monthly___0"], "alias": "dbt_utils_expression_is_true_a_bdaf3d80389c7c8f45a1751a684b6e2c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_bdaf3d80389c7c8f45a1751a684b6e2c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_bdaf3d80389c7c8f45a1751a684b6e2c"}, "created_at": 1747516850.8979316, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_bdaf3d80389c7c8f45a1751a684b6e2c\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_bdaf3d80389c7c8f45a1751a684b6e2c.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n\nwhere not(total_items_ordered_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_items_ordered_monthly", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_items_ordered_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_total_monthly_revenue___0.99855eb949": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_total_sales_total_monthly_revenue___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_c11b63cb481420d7a90fe1810f315792.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_total_monthly_revenue___0.99855eb949", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_total_sales_total_monthly_revenue___0"], "alias": "dbt_utils_expression_is_true_a_c11b63cb481420d7a90fe1810f315792", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_c11b63cb481420d7a90fe1810f315792", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_c11b63cb481420d7a90fe1810f315792"}, "created_at": 1747516850.9039366, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_c11b63cb481420d7a90fe1810f315792\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_c11b63cb481420d7a90fe1810f315792.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n\nwhere not(total_monthly_revenue >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_monthly_revenue", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_monthly_revenue", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_item_monthly___0.4811754c19": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_item_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_38000065f262b951d8e8716d44200e4f.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_item_monthly___0.4811754c19", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_item_monthly___0"], "alias": "dbt_utils_expression_is_true_a_38000065f262b951d8e8716d44200e4f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_38000065f262b951d8e8716d44200e4f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_38000065f262b951d8e8716d44200e4f"}, "created_at": 1747516850.9099414, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_38000065f262b951d8e8716d44200e4f\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_38000065f262b951d8e8716d44200e4f.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n\nwhere not(avg_revenue_per_item_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_item_monthly", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_revenue_per_item_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_item_monthly___total_monthly_revenue.5a8878dc6b": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_item_monthly___total_monthly_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_babfa28411fa4745af476631e47c9998.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_item_monthly___total_monthly_revenue.5a8878dc6b", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_item_monthly___total_monthly_revenue"], "alias": "dbt_utils_expression_is_true_a_babfa28411fa4745af476631e47c9998", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_babfa28411fa4745af476631e47c9998", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_babfa28411fa4745af476631e47c9998"}, "created_at": 1747516850.914947, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_babfa28411fa4745af476631e47c9998\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_babfa28411fa4745af476631e47c9998.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n\nwhere not(avg_revenue_per_item_monthly <= total_monthly_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_item_monthly", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_monthly_revenue", "column_name": "avg_revenue_per_item_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_category_diversity_monthly___0.c1414dac5f": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_total_sales_category_diversity_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_9736f3806ce8438855c882c0afb88b93.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_category_diversity_monthly___0.c1414dac5f", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_total_sales_category_diversity_monthly___0"], "alias": "dbt_utils_expression_is_true_a_9736f3806ce8438855c882c0afb88b93", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_9736f3806ce8438855c882c0afb88b93", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_9736f3806ce8438855c882c0afb88b93"}, "created_at": 1747516850.921953, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_9736f3806ce8438855c882c0afb88b93\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_9736f3806ce8438855c882c0afb88b93.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n\nwhere not(category_diversity_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category_diversity_monthly", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "category_diversity_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_top_monthly_category_revenue___0.bf12b281dc": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_total_sales_top_monthly_category_revenue___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_cbc64474d144ebed2b81087748cd8ff9.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_top_monthly_category_revenue___0.bf12b281dc", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_total_sales_top_monthly_category_revenue___0"], "alias": "dbt_utils_expression_is_true_a_cbc64474d144ebed2b81087748cd8ff9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_cbc64474d144ebed2b81087748cd8ff9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_cbc64474d144ebed2b81087748cd8ff9"}, "created_at": 1747516850.9279587, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_cbc64474d144ebed2b81087748cd8ff9\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_cbc64474d144ebed2b81087748cd8ff9.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n\nwhere not(top_monthly_category_revenue >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_monthly_category_revenue", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "top_monthly_category_revenue", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_top_monthly_category_revenue___total_monthly_revenue.43f14c9bbd": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_total_sales_top_monthly_category_revenue___total_monthly_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_3ee04489877f2da229d79336866d81b2.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_top_monthly_category_revenue___total_monthly_revenue.43f14c9bbd", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_total_sales_top_monthly_category_revenue___total_monthly_revenue"], "alias": "dbt_utils_expression_is_true_a_3ee04489877f2da229d79336866d81b2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_3ee04489877f2da229d79336866d81b2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_3ee04489877f2da229d79336866d81b2"}, "created_at": 1747516850.9339652, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_3ee04489877f2da229d79336866d81b2\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_3ee04489877f2da229d79336866d81b2.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n\nwhere not(top_monthly_category_revenue <= total_monthly_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "top_monthly_category_revenue", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_monthly_revenue", "column_name": "top_monthly_category_revenue", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_total_sales_pct_food_from_monthly_revenue__1__0.23ed9482de": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_monthly_total_sales_pct_food_from_monthly_revenue__1__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_m_1bb6e9b85504c0ed8859615ba83fee1d.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_total_sales_pct_food_from_monthly_revenue__1__0.23ed9482de", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_accepted_range_agg_monthly_total_sales_pct_food_from_monthly_revenue__1__0"], "alias": "dbt_utils_accepted_range_agg_m_1bb6e9b85504c0ed8859615ba83fee1d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_m_1bb6e9b85504c0ed8859615ba83fee1d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_m_1bb6e9b85504c0ed8859615ba83fee1d"}, "created_at": 1747516850.9409697, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_m_1bb6e9b85504c0ed8859615ba83fee1d\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_accepted_range_agg_m_1bb6e9b85504c0ed8859615ba83fee1d.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_food_from_monthly_revenue >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_food_from_monthly_revenue <= 1\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_food_from_monthly_revenue", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_food_from_monthly_revenue", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_total_sales_pct_drink_from_monthly_revenue__1__0.878750343a": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_monthly_total_sales_pct_drink_from_monthly_revenue__1__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_m_4d5f4db774dc97fb884a7fd6db4d0749.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_total_sales_pct_drink_from_monthly_revenue__1__0.878750343a", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_accepted_range_agg_monthly_total_sales_pct_drink_from_monthly_revenue__1__0"], "alias": "dbt_utils_accepted_range_agg_m_4d5f4db774dc97fb884a7fd6db4d0749", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_m_4d5f4db774dc97fb884a7fd6db4d0749", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_m_4d5f4db774dc97fb884a7fd6db4d0749"}, "created_at": 1747516850.9459748, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_m_4d5f4db774dc97fb884a7fd6db4d0749\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_accepted_range_agg_m_4d5f4db774dc97fb884a7fd6db4d0749.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_drink_from_monthly_revenue >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_drink_from_monthly_revenue <= 1\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_drink_from_monthly_revenue", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_drink_from_monthly_revenue", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_total_sales_pct_top_cat_of_total_monthly_revenue__1__0.2218cb4677": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_accepted_range_agg_monthly_total_sales_pct_top_cat_of_total_monthly_revenue__1__0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_accepted_range_agg_m_4151188de00ee565f812de23ad7c78c7.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_total_sales_pct_top_cat_of_total_monthly_revenue__1__0.2218cb4677", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_accepted_range_agg_monthly_total_sales_pct_top_cat_of_total_monthly_revenue__1__0"], "alias": "dbt_utils_accepted_range_agg_m_4151188de00ee565f812de23ad7c78c7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_agg_m_4151188de00ee565f812de23ad7c78c7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_agg_m_4151188de00ee565f812de23ad7c78c7"}, "created_at": 1747516850.952983, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_agg_m_4151188de00ee565f812de23ad7c78c7\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_accepted_range_agg_m_4151188de00ee565f812de23ad7c78c7.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_top_cat_of_total_monthly_revenue >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not pct_top_cat_of_total_monthly_revenue <= 1\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "pct_top_cat_of_total_monthly_revenue", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 1, "column_name": "pct_top_cat_of_total_monthly_revenue", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_total_monthly_customers___0.e29c7f5803": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_total_sales_total_monthly_customers___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_ba8a050b1b85fcc4ba87eadf9138a9c9.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_total_monthly_customers___0.e29c7f5803", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_total_sales_total_monthly_customers___0"], "alias": "dbt_utils_expression_is_true_a_ba8a050b1b85fcc4ba87eadf9138a9c9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_ba8a050b1b85fcc4ba87eadf9138a9c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_ba8a050b1b85fcc4ba87eadf9138a9c9"}, "created_at": 1747516850.9579885, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_ba8a050b1b85fcc4ba87eadf9138a9c9\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_ba8a050b1b85fcc4ba87eadf9138a9c9.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n\nwhere not(total_monthly_customers >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_monthly_customers", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_monthly_customers", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_monthly_revenue_per_head___0.446f45d0be": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_total_sales_avg_monthly_revenue_per_head___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_d2461d4b28627db4443d452c564b1ea9.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_monthly_revenue_per_head___0.446f45d0be", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_total_sales_avg_monthly_revenue_per_head___0"], "alias": "dbt_utils_expression_is_true_a_d2461d4b28627db4443d452c564b1ea9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_d2461d4b28627db4443d452c564b1ea9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_d2461d4b28627db4443d452c564b1ea9"}, "created_at": 1747516850.963993, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_d2461d4b28627db4443d452c564b1ea9\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_d2461d4b28627db4443d452c564b1ea9.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n\nwhere not(avg_monthly_revenue_per_head >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_monthly_revenue_per_head", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_monthly_revenue_per_head", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_monthly_revenue_per_head___total_monthly_revenue.8bef2fada4": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_total_sales_avg_monthly_revenue_per_head___total_monthly_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_3273635d088d74d36eb0afdd805cdb8b.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_monthly_revenue_per_head___total_monthly_revenue.8bef2fada4", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_total_sales_avg_monthly_revenue_per_head___total_monthly_revenue"], "alias": "dbt_utils_expression_is_true_a_3273635d088d74d36eb0afdd805cdb8b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_3273635d088d74d36eb0afdd805cdb8b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_3273635d088d74d36eb0afdd805cdb8b"}, "created_at": 1747516850.9709995, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_3273635d088d74d36eb0afdd805cdb8b\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_3273635d088d74d36eb0afdd805cdb8b.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n\nwhere not(avg_monthly_revenue_per_head <= total_monthly_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_monthly_revenue_per_head", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_monthly_revenue", "column_name": "avg_monthly_revenue_per_head", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_ordered_per_head_monthly___0.e1cfa72b9c": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_ordered_per_head_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_ae9bfbb15fcce17771f5627141795d6e.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_ordered_per_head_monthly___0.e1cfa72b9c", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_ordered_per_head_monthly___0"], "alias": "dbt_utils_expression_is_true_a_ae9bfbb15fcce17771f5627141795d6e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_ae9bfbb15fcce17771f5627141795d6e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_ae9bfbb15fcce17771f5627141795d6e"}, "created_at": 1747516850.976004, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_ae9bfbb15fcce17771f5627141795d6e\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_ae9bfbb15fcce17771f5627141795d6e.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n\nwhere not(avg_items_ordered_per_head_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_ordered_per_head_monthly", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_items_ordered_per_head_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_ordered_per_head_monthly___total_items_ordered_monthly.a1e1950805": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_ordered_per_head_monthly___total_items_ordered_monthly", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_bbf70a53f8c30d58aaa388b016af5de3.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_ordered_per_head_monthly___total_items_ordered_monthly.a1e1950805", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_ordered_per_head_monthly___total_items_ordered_monthly"], "alias": "dbt_utils_expression_is_true_a_bbf70a53f8c30d58aaa388b016af5de3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_bbf70a53f8c30d58aaa388b016af5de3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_bbf70a53f8c30d58aaa388b016af5de3"}, "created_at": 1747516850.9830089, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_bbf70a53f8c30d58aaa388b016af5de3\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_bbf70a53f8c30d58aaa388b016af5de3.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n\nwhere not(avg_items_ordered_per_head_monthly <= total_items_ordered_monthly)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_ordered_per_head_monthly", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_items_ordered_monthly", "column_name": "avg_items_ordered_per_head_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_total_orders_monthly___0.dcfb1f4451": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_total_sales_total_orders_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_71b48d643d9f8c3ae75939cffed6f0bb.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_total_orders_monthly___0.dcfb1f4451", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_total_sales_total_orders_monthly___0"], "alias": "dbt_utils_expression_is_true_a_71b48d643d9f8c3ae75939cffed6f0bb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_71b48d643d9f8c3ae75939cffed6f0bb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_71b48d643d9f8c3ae75939cffed6f0bb"}, "created_at": 1747516850.9890149, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_71b48d643d9f8c3ae75939cffed6f0bb\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_71b48d643d9f8c3ae75939cffed6f0bb.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n\nwhere not(total_orders_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_orders_monthly", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "total_orders_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_per_order_monthly___1.9c95b67c0e": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_per_order_monthly___1", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_6a0a6ea1ec26204386fd5c7448a8144a.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_per_order_monthly___1.9c95b67c0e", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_per_order_monthly___1"], "alias": "dbt_utils_expression_is_true_a_6a0a6ea1ec26204386fd5c7448a8144a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_6a0a6ea1ec26204386fd5c7448a8144a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_6a0a6ea1ec26204386fd5c7448a8144a"}, "created_at": 1747516850.994018, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_6a0a6ea1ec26204386fd5c7448a8144a\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_6a0a6ea1ec26204386fd5c7448a8144a.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n\nwhere not(avg_items_per_order_monthly >= 1)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_per_order_monthly", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 1", "column_name": "avg_items_per_order_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_per_order_monthly___total_items_ordered_monthly.9838ff2afb": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_per_order_monthly___total_items_ordered_monthly", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_89570a33455d92fc4c63774dc1c766f0.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_per_order_monthly___total_items_ordered_monthly.9838ff2afb", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_per_order_monthly___total_items_ordered_monthly"], "alias": "dbt_utils_expression_is_true_a_89570a33455d92fc4c63774dc1c766f0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_89570a33455d92fc4c63774dc1c766f0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_89570a33455d92fc4c63774dc1c766f0"}, "created_at": 1747516850.9990225, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_89570a33455d92fc4c63774dc1c766f0\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_89570a33455d92fc4c63774dc1c766f0.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n\nwhere not(avg_items_per_order_monthly <= total_items_ordered_monthly)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_items_per_order_monthly", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_items_ordered_monthly", "column_name": "avg_items_per_order_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_order_monthly___0.f7303eda9e": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_order_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_fa8d635f4c35a5872931809e13bf4861.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_order_monthly___0.f7303eda9e", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_order_monthly___0"], "alias": "dbt_utils_expression_is_true_a_fa8d635f4c35a5872931809e13bf4861", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_fa8d635f4c35a5872931809e13bf4861", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_fa8d635f4c35a5872931809e13bf4861"}, "created_at": 1747516851.0050287, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_fa8d635f4c35a5872931809e13bf4861\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_fa8d635f4c35a5872931809e13bf4861.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n\nwhere not(avg_revenue_per_order_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_order_monthly", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_revenue_per_order_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_order_monthly___total_monthly_revenue.7b2f552b61": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_order_monthly___total_monthly_revenue", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_319b3cadab18d7035d11b1c756930cf4.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_order_monthly___total_monthly_revenue.7b2f552b61", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_order_monthly___total_monthly_revenue"], "alias": "dbt_utils_expression_is_true_a_319b3cadab18d7035d11b1c756930cf4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_319b3cadab18d7035d11b1c756930cf4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_319b3cadab18d7035d11b1c756930cf4"}, "created_at": 1747516851.0110335, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_319b3cadab18d7035d11b1c756930cf4\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_319b3cadab18d7035d11b1c756930cf4.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n\nwhere not(avg_revenue_per_order_monthly <= total_monthly_revenue)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_revenue_per_order_monthly", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= total_monthly_revenue", "column_name": "avg_revenue_per_order_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_unique_items_ordered_monthly___0.f9b73669ce": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_total_sales_unique_items_ordered_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_be1669ba351d28728d53bc0b3528b192.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_unique_items_ordered_monthly___0.f9b73669ce", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_total_sales_unique_items_ordered_monthly___0"], "alias": "dbt_utils_expression_is_true_a_be1669ba351d28728d53bc0b3528b192", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_be1669ba351d28728d53bc0b3528b192", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_be1669ba351d28728d53bc0b3528b192"}, "created_at": 1747516851.0160382, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_be1669ba351d28728d53bc0b3528b192\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_be1669ba351d28728d53bc0b3528b192.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n\nwhere not(unique_items_ordered_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_items_ordered_monthly", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "unique_items_ordered_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_distinct_tables_per_day_monthly___0.f0590f7000": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_total_sales_avg_distinct_tables_per_day_monthly___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_ff45f725a3cd3f7e8115166a891cc611.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_distinct_tables_per_day_monthly___0.f0590f7000", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_total_sales_avg_distinct_tables_per_day_monthly___0"], "alias": "dbt_utils_expression_is_true_a_ff45f725a3cd3f7e8115166a891cc611", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_ff45f725a3cd3f7e8115166a891cc611", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_ff45f725a3cd3f7e8115166a891cc611"}, "created_at": 1747516851.022044, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_ff45f725a3cd3f7e8115166a891cc611\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_ff45f725a3cd3f7e8115166a891cc611.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n\nwhere not(avg_distinct_tables_per_day_monthly >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "avg_distinct_tables_per_day_monthly", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "avg_distinct_tables_per_day_monthly", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_rolling_avg_revenue_3mo___0.e9be1783bc": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_total_sales_rolling_avg_revenue_3mo___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_4c19c8f38937b08a8217b6ab5d6f957a.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_rolling_avg_revenue_3mo___0.e9be1783bc", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_total_sales_rolling_avg_revenue_3mo___0"], "alias": "dbt_utils_expression_is_true_a_4c19c8f38937b08a8217b6ab5d6f957a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_4c19c8f38937b08a8217b6ab5d6f957a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_4c19c8f38937b08a8217b6ab5d6f957a"}, "created_at": 1747516851.027048, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_4c19c8f38937b08a8217b6ab5d6f957a\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_4c19c8f38937b08a8217b6ab5d6f957a.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n\nwhere not(rolling_avg_revenue_3mo >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rolling_avg_revenue_3mo", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "rolling_avg_revenue_3mo", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_rolling_avg_items_sold_3mo___0.9ea6bec03b": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_total_sales_rolling_avg_items_sold_3mo___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_b5bfd3bb62dec767aa92f443eeef611a.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_rolling_avg_items_sold_3mo___0.9ea6bec03b", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_total_sales_rolling_avg_items_sold_3mo___0"], "alias": "dbt_utils_expression_is_true_a_b5bfd3bb62dec767aa92f443eeef611a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_b5bfd3bb62dec767aa92f443eeef611a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_b5bfd3bb62dec767aa92f443eeef611a"}, "created_at": 1747516851.0330548, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_b5bfd3bb62dec767aa92f443eeef611a\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_b5bfd3bb62dec767aa92f443eeef611a.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n\nwhere not(rolling_avg_items_sold_3mo >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rolling_avg_items_sold_3mo", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "rolling_avg_items_sold_3mo", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_weekend_days_in_month___0.562dbe12a0": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "dbt_utils_expression_is_true_agg_monthly_total_sales_weekend_days_in_month___0", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "dbt_utils_expression_is_true_a_8ddd0d3c268f346f8c4f26cb466083c2.sql", "original_file_path": "models\\marts\\core\\sales\\sales.yml", "unique_id": "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_weekend_days_in_month___0.562dbe12a0", "fqn": ["restaurant_data_analytics", "marts", "core", "sales", "dbt_utils_expression_is_true_agg_monthly_total_sales_weekend_days_in_month___0"], "alias": "dbt_utils_expression_is_true_a_8ddd0d3c268f346f8c4f26cb466083c2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_8ddd0d3c268f346f8c4f26cb466083c2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_8ddd0d3c268f346f8c4f26cb466083c2"}, "created_at": 1747516851.0390594, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_8ddd0d3c268f346f8c4f26cb466083c2\") }}", "language": "sql", "refs": [{"name": "agg_monthly_total_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.agg_monthly_total_sales"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\core\\sales\\sales.yml\\dbt_utils_expression_is_true_a_8ddd0d3c268f346f8c4f26cb466083c2.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom `annular-mesh-453913-r6`.`dbt_`.`agg_monthly_total_sales`\n\nwhere not(weekend_days_in_month >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "weekend_days_in_month", "file_key_name": "models.agg_monthly_total_sales", "attached_node": "model.restaurant_data_analytics.agg_monthly_total_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "weekend_days_in_month", "model": "{{ get_where_subquery(ref('agg_monthly_total_sales')) }}"}, "namespace": "dbt_utils"}}, "test.restaurant_data_analytics.not_null_dim_time_datetime_ordered.cbec1c07f1": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_dim_time_datetime_ordered", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_dim_time_datetime_ordered.sql", "original_file_path": "models\\marts\\meta\\dim_time.yml", "unique_id": "test.restaurant_data_analytics.not_null_dim_time_datetime_ordered.cbec1c07f1", "fqn": ["restaurant_data_analytics", "marts", "meta", "not_null_dim_time_datetime_ordered"], "alias": "not_null_dim_time_datetime_ordered", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516851.0480683, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_time", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.dim_time"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\meta\\dim_time.yml\\not_null_dim_time_datetime_ordered.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect datetime_ordered\nfrom `annular-mesh-453913-r6`.`dbt_`.`dim_time`\nwhere datetime_ordered is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "datetime_ordered", "file_key_name": "models.dim_time", "attached_node": "model.restaurant_data_analytics.dim_time", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "datetime_ordered", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.unique_dim_time_datetime_ordered.177af51b2a": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "unique_dim_time_datetime_ordered", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "unique_dim_time_datetime_ordered.sql", "original_file_path": "models\\marts\\meta\\dim_time.yml", "unique_id": "test.restaurant_data_analytics.unique_dim_time_datetime_ordered.177af51b2a", "fqn": ["restaurant_data_analytics", "marts", "meta", "unique_dim_time_datetime_ordered"], "alias": "unique_dim_time_datetime_ordered", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516851.0510705, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_time", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.dim_time"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\marts\\meta\\dim_time.yml\\unique_dim_time_datetime_ordered.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select datetime_ordered as unique_field\n  from `annular-mesh-453913-r6`.`dbt_`.`dim_time`\n  where datetime_ordered is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "datetime_ordered", "file_key_name": "models.dim_time", "attached_node": "model.restaurant_data_analytics.dim_time", "test_metadata": {"name": "unique", "kwargs": {"column_name": "datetime_ordered", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_stg_a_la_carte_menu_item_uuid.bc2025dfa2": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_stg_a_la_carte_menu_item_uuid", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_stg_a_la_carte_menu_item_uuid.sql", "original_file_path": "models\\staging\\stg_restaurant_data.yml", "unique_id": "test.restaurant_data_analytics.not_null_stg_a_la_carte_menu_item_uuid.bc2025dfa2", "fqn": ["restaurant_data_analytics", "staging", "not_null_stg_a_la_carte_menu_item_uuid"], "alias": "not_null_stg_a_la_carte_menu_item_uuid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516851.1546745, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_a_la_carte_menu", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.stg_a_la_carte_menu"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_restaurant_data.yml\\not_null_stg_a_la_carte_menu_item_uuid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_uuid\nfrom `annular-mesh-453913-r6`.`dbt_`.`stg_a_la_carte_menu`\nwhere item_uuid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_uuid", "file_key_name": "models.stg_a_la_carte_menu", "attached_node": "model.restaurant_data_analytics.stg_a_la_carte_menu", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_uuid", "model": "{{ get_where_subquery(ref('stg_a_la_carte_menu')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.unique_stg_a_la_carte_menu_item_uuid.a16abef12e": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "unique_stg_a_la_carte_menu_item_uuid", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "unique_stg_a_la_carte_menu_item_uuid.sql", "original_file_path": "models\\staging\\stg_restaurant_data.yml", "unique_id": "test.restaurant_data_analytics.unique_stg_a_la_carte_menu_item_uuid.a16abef12e", "fqn": ["restaurant_data_analytics", "staging", "unique_stg_a_la_carte_menu_item_uuid"], "alias": "unique_stg_a_la_carte_menu_item_uuid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516851.156676, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_a_la_carte_menu", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.stg_a_la_carte_menu"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_restaurant_data.yml\\unique_stg_a_la_carte_menu_item_uuid.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select item_uuid as unique_field\n  from `annular-mesh-453913-r6`.`dbt_`.`stg_a_la_carte_menu`\n  where item_uuid is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_uuid", "file_key_name": "models.stg_a_la_carte_menu", "attached_node": "model.restaurant_data_analytics.stg_a_la_carte_menu", "test_metadata": {"name": "unique", "kwargs": {"column_name": "item_uuid", "model": "{{ get_where_subquery(ref('stg_a_la_carte_menu')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_stg_a_la_carte_menu_item_name.36ae67ce39": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_stg_a_la_carte_menu_item_name", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_stg_a_la_carte_menu_item_name.sql", "original_file_path": "models\\staging\\stg_restaurant_data.yml", "unique_id": "test.restaurant_data_analytics.not_null_stg_a_la_carte_menu_item_name.36ae67ce39", "fqn": ["restaurant_data_analytics", "staging", "not_null_stg_a_la_carte_menu_item_name"], "alias": "not_null_stg_a_la_carte_menu_item_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516851.1586788, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_a_la_carte_menu", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.stg_a_la_carte_menu"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_restaurant_data.yml\\not_null_stg_a_la_carte_menu_item_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_name\nfrom `annular-mesh-453913-r6`.`dbt_`.`stg_a_la_carte_menu`\nwhere item_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_name", "file_key_name": "models.stg_a_la_carte_menu", "attached_node": "model.restaurant_data_analytics.stg_a_la_carte_menu", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_name", "model": "{{ get_where_subquery(ref('stg_a_la_carte_menu')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_stg_a_la_carte_menu_category.37817551cf": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_stg_a_la_carte_menu_category", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_stg_a_la_carte_menu_category.sql", "original_file_path": "models\\staging\\stg_restaurant_data.yml", "unique_id": "test.restaurant_data_analytics.not_null_stg_a_la_carte_menu_category.37817551cf", "fqn": ["restaurant_data_analytics", "staging", "not_null_stg_a_la_carte_menu_category"], "alias": "not_null_stg_a_la_carte_menu_category", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516851.1606796, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_a_la_carte_menu", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.stg_a_la_carte_menu"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_restaurant_data.yml\\not_null_stg_a_la_carte_menu_category.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect category\nfrom `annular-mesh-453913-r6`.`dbt_`.`stg_a_la_carte_menu`\nwhere category is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category", "file_key_name": "models.stg_a_la_carte_menu", "attached_node": "model.restaurant_data_analytics.stg_a_la_carte_menu", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "category", "model": "{{ get_where_subquery(ref('stg_a_la_carte_menu')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_stg_cocktails_and_beer_menu_item_uuid.69972c6fe3": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_stg_cocktails_and_beer_menu_item_uuid", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_stg_cocktails_and_beer_menu_item_uuid.sql", "original_file_path": "models\\staging\\stg_restaurant_data.yml", "unique_id": "test.restaurant_data_analytics.not_null_stg_cocktails_and_beer_menu_item_uuid.69972c6fe3", "fqn": ["restaurant_data_analytics", "staging", "not_null_stg_cocktails_and_beer_menu_item_uuid"], "alias": "not_null_stg_cocktails_and_beer_menu_item_uuid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516851.1636822, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_cocktails_and_beer_menu", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.stg_cocktails_and_beer_menu"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_restaurant_data.yml\\not_null_stg_cocktails_and_beer_menu_item_uuid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_uuid\nfrom `annular-mesh-453913-r6`.`dbt_`.`stg_cocktails_and_beer_menu`\nwhere item_uuid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_uuid", "file_key_name": "models.stg_cocktails_and_beer_menu", "attached_node": "model.restaurant_data_analytics.stg_cocktails_and_beer_menu", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_uuid", "model": "{{ get_where_subquery(ref('stg_cocktails_and_beer_menu')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.unique_stg_cocktails_and_beer_menu_item_uuid.1036d05d9f": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "unique_stg_cocktails_and_beer_menu_item_uuid", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "unique_stg_cocktails_and_beer_menu_item_uuid.sql", "original_file_path": "models\\staging\\stg_restaurant_data.yml", "unique_id": "test.restaurant_data_analytics.unique_stg_cocktails_and_beer_menu_item_uuid.1036d05d9f", "fqn": ["restaurant_data_analytics", "staging", "unique_stg_cocktails_and_beer_menu_item_uuid"], "alias": "unique_stg_cocktails_and_beer_menu_item_uuid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516851.1656842, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_cocktails_and_beer_menu", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.stg_cocktails_and_beer_menu"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_restaurant_data.yml\\unique_stg_cocktails_and_beer_menu_item_uuid.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select item_uuid as unique_field\n  from `annular-mesh-453913-r6`.`dbt_`.`stg_cocktails_and_beer_menu`\n  where item_uuid is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_uuid", "file_key_name": "models.stg_cocktails_and_beer_menu", "attached_node": "model.restaurant_data_analytics.stg_cocktails_and_beer_menu", "test_metadata": {"name": "unique", "kwargs": {"column_name": "item_uuid", "model": "{{ get_where_subquery(ref('stg_cocktails_and_beer_menu')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_stg_cocktails_and_beer_menu_item_name.b14f64b4a7": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_stg_cocktails_and_beer_menu_item_name", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_stg_cocktails_and_beer_menu_item_name.sql", "original_file_path": "models\\staging\\stg_restaurant_data.yml", "unique_id": "test.restaurant_data_analytics.not_null_stg_cocktails_and_beer_menu_item_name.b14f64b4a7", "fqn": ["restaurant_data_analytics", "staging", "not_null_stg_cocktails_and_beer_menu_item_name"], "alias": "not_null_stg_cocktails_and_beer_menu_item_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516851.1676865, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_cocktails_and_beer_menu", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.stg_cocktails_and_beer_menu"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_restaurant_data.yml\\not_null_stg_cocktails_and_beer_menu_item_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_name\nfrom `annular-mesh-453913-r6`.`dbt_`.`stg_cocktails_and_beer_menu`\nwhere item_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_name", "file_key_name": "models.stg_cocktails_and_beer_menu", "attached_node": "model.restaurant_data_analytics.stg_cocktails_and_beer_menu", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_name", "model": "{{ get_where_subquery(ref('stg_cocktails_and_beer_menu')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_stg_cocktails_and_beer_menu_category.59e7e90b4d": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_stg_cocktails_and_beer_menu_category", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_stg_cocktails_and_beer_menu_category.sql", "original_file_path": "models\\staging\\stg_restaurant_data.yml", "unique_id": "test.restaurant_data_analytics.not_null_stg_cocktails_and_beer_menu_category.59e7e90b4d", "fqn": ["restaurant_data_analytics", "staging", "not_null_stg_cocktails_and_beer_menu_category"], "alias": "not_null_stg_cocktails_and_beer_menu_category", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516851.1696892, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_cocktails_and_beer_menu", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.stg_cocktails_and_beer_menu"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_restaurant_data.yml\\not_null_stg_cocktails_and_beer_menu_category.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect category\nfrom `annular-mesh-453913-r6`.`dbt_`.`stg_cocktails_and_beer_menu`\nwhere category is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category", "file_key_name": "models.stg_cocktails_and_beer_menu", "attached_node": "model.restaurant_data_analytics.stg_cocktails_and_beer_menu", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "category", "model": "{{ get_where_subquery(ref('stg_cocktails_and_beer_menu')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_stg_dessert_menu_item_uuid.5100194b40": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_stg_dessert_menu_item_uuid", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_stg_dessert_menu_item_uuid.sql", "original_file_path": "models\\staging\\stg_restaurant_data.yml", "unique_id": "test.restaurant_data_analytics.not_null_stg_dessert_menu_item_uuid.5100194b40", "fqn": ["restaurant_data_analytics", "staging", "not_null_stg_dessert_menu_item_uuid"], "alias": "not_null_stg_dessert_menu_item_uuid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516851.1726904, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_dessert_menu", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.stg_dessert_menu"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_restaurant_data.yml\\not_null_stg_dessert_menu_item_uuid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_uuid\nfrom `annular-mesh-453913-r6`.`dbt_`.`stg_dessert_menu`\nwhere item_uuid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_uuid", "file_key_name": "models.stg_dessert_menu", "attached_node": "model.restaurant_data_analytics.stg_dessert_menu", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_uuid", "model": "{{ get_where_subquery(ref('stg_dessert_menu')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.unique_stg_dessert_menu_item_uuid.a3fb86a75b": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "unique_stg_dessert_menu_item_uuid", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "unique_stg_dessert_menu_item_uuid.sql", "original_file_path": "models\\staging\\stg_restaurant_data.yml", "unique_id": "test.restaurant_data_analytics.unique_stg_dessert_menu_item_uuid.a3fb86a75b", "fqn": ["restaurant_data_analytics", "staging", "unique_stg_dessert_menu_item_uuid"], "alias": "unique_stg_dessert_menu_item_uuid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516851.1746926, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_dessert_menu", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.stg_dessert_menu"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_restaurant_data.yml\\unique_stg_dessert_menu_item_uuid.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select item_uuid as unique_field\n  from `annular-mesh-453913-r6`.`dbt_`.`stg_dessert_menu`\n  where item_uuid is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_uuid", "file_key_name": "models.stg_dessert_menu", "attached_node": "model.restaurant_data_analytics.stg_dessert_menu", "test_metadata": {"name": "unique", "kwargs": {"column_name": "item_uuid", "model": "{{ get_where_subquery(ref('stg_dessert_menu')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_stg_dessert_menu_item_name.bc9a182538": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_stg_dessert_menu_item_name", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_stg_dessert_menu_item_name.sql", "original_file_path": "models\\staging\\stg_restaurant_data.yml", "unique_id": "test.restaurant_data_analytics.not_null_stg_dessert_menu_item_name.bc9a182538", "fqn": ["restaurant_data_analytics", "staging", "not_null_stg_dessert_menu_item_name"], "alias": "not_null_stg_dessert_menu_item_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516851.1766949, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_dessert_menu", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.stg_dessert_menu"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_restaurant_data.yml\\not_null_stg_dessert_menu_item_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_name\nfrom `annular-mesh-453913-r6`.`dbt_`.`stg_dessert_menu`\nwhere item_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_name", "file_key_name": "models.stg_dessert_menu", "attached_node": "model.restaurant_data_analytics.stg_dessert_menu", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_name", "model": "{{ get_where_subquery(ref('stg_dessert_menu')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_stg_dessert_menu_category.84e31519c2": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_stg_dessert_menu_category", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_stg_dessert_menu_category.sql", "original_file_path": "models\\staging\\stg_restaurant_data.yml", "unique_id": "test.restaurant_data_analytics.not_null_stg_dessert_menu_category.84e31519c2", "fqn": ["restaurant_data_analytics", "staging", "not_null_stg_dessert_menu_category"], "alias": "not_null_stg_dessert_menu_category", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516851.1786962, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_dessert_menu", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.stg_dessert_menu"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_restaurant_data.yml\\not_null_stg_dessert_menu_category.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect category\nfrom `annular-mesh-453913-r6`.`dbt_`.`stg_dessert_menu`\nwhere category is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category", "file_key_name": "models.stg_dessert_menu", "attached_node": "model.restaurant_data_analytics.stg_dessert_menu", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "category", "model": "{{ get_where_subquery(ref('stg_dessert_menu')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_stg_wine_menu_item_uuid.141c870ced": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_stg_wine_menu_item_uuid", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_stg_wine_menu_item_uuid.sql", "original_file_path": "models\\staging\\stg_restaurant_data.yml", "unique_id": "test.restaurant_data_analytics.not_null_stg_wine_menu_item_uuid.141c870ced", "fqn": ["restaurant_data_analytics", "staging", "not_null_stg_wine_menu_item_uuid"], "alias": "not_null_stg_wine_menu_item_uuid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516851.180698, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_wine_menu", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.stg_wine_menu"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_restaurant_data.yml\\not_null_stg_wine_menu_item_uuid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_uuid\nfrom `annular-mesh-453913-r6`.`dbt_`.`stg_wine_menu`\nwhere item_uuid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_uuid", "file_key_name": "models.stg_wine_menu", "attached_node": "model.restaurant_data_analytics.stg_wine_menu", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_uuid", "model": "{{ get_where_subquery(ref('stg_wine_menu')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.unique_stg_wine_menu_item_uuid.ddca70a303": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "unique_stg_wine_menu_item_uuid", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "unique_stg_wine_menu_item_uuid.sql", "original_file_path": "models\\staging\\stg_restaurant_data.yml", "unique_id": "test.restaurant_data_analytics.unique_stg_wine_menu_item_uuid.ddca70a303", "fqn": ["restaurant_data_analytics", "staging", "unique_stg_wine_menu_item_uuid"], "alias": "unique_stg_wine_menu_item_uuid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516851.1826992, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_wine_menu", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.stg_wine_menu"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_restaurant_data.yml\\unique_stg_wine_menu_item_uuid.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select item_uuid as unique_field\n  from `annular-mesh-453913-r6`.`dbt_`.`stg_wine_menu`\n  where item_uuid is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_uuid", "file_key_name": "models.stg_wine_menu", "attached_node": "model.restaurant_data_analytics.stg_wine_menu", "test_metadata": {"name": "unique", "kwargs": {"column_name": "item_uuid", "model": "{{ get_where_subquery(ref('stg_wine_menu')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_stg_wine_menu_item_name.275c234874": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_stg_wine_menu_item_name", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_stg_wine_menu_item_name.sql", "original_file_path": "models\\staging\\stg_restaurant_data.yml", "unique_id": "test.restaurant_data_analytics.not_null_stg_wine_menu_item_name.275c234874", "fqn": ["restaurant_data_analytics", "staging", "not_null_stg_wine_menu_item_name"], "alias": "not_null_stg_wine_menu_item_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516851.1857026, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_wine_menu", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.stg_wine_menu"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_restaurant_data.yml\\not_null_stg_wine_menu_item_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_name\nfrom `annular-mesh-453913-r6`.`dbt_`.`stg_wine_menu`\nwhere item_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_name", "file_key_name": "models.stg_wine_menu", "attached_node": "model.restaurant_data_analytics.stg_wine_menu", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_name", "model": "{{ get_where_subquery(ref('stg_wine_menu')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_stg_wine_menu_category.dea98b2bd0": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_stg_wine_menu_category", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_stg_wine_menu_category.sql", "original_file_path": "models\\staging\\stg_restaurant_data.yml", "unique_id": "test.restaurant_data_analytics.not_null_stg_wine_menu_category.dea98b2bd0", "fqn": ["restaurant_data_analytics", "staging", "not_null_stg_wine_menu_category"], "alias": "not_null_stg_wine_menu_category", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516851.187705, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_wine_menu", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.stg_wine_menu"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_restaurant_data.yml\\not_null_stg_wine_menu_category.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect category\nfrom `annular-mesh-453913-r6`.`dbt_`.`stg_wine_menu`\nwhere category is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category", "file_key_name": "models.stg_wine_menu", "attached_node": "model.restaurant_data_analytics.stg_wine_menu", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "category", "model": "{{ get_where_subquery(ref('stg_wine_menu')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_stg_orders_item_ordered_id.abffa82b2b": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_stg_orders_item_ordered_id", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_stg_orders_item_ordered_id.sql", "original_file_path": "models\\staging\\stg_restaurant_data.yml", "unique_id": "test.restaurant_data_analytics.not_null_stg_orders_item_ordered_id.abffa82b2b", "fqn": ["restaurant_data_analytics", "staging", "not_null_stg_orders_item_ordered_id"], "alias": "not_null_stg_orders_item_ordered_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516851.1897063, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.stg_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_restaurant_data.yml\\not_null_stg_orders_item_ordered_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_ordered_id\nfrom `annular-mesh-453913-r6`.`dbt_`.`stg_orders`\nwhere item_ordered_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_ordered_id", "file_key_name": "models.stg_orders", "attached_node": "model.restaurant_data_analytics.stg_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_ordered_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.unique_stg_orders_item_ordered_id.371219fd6d": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "unique_stg_orders_item_ordered_id", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "unique_stg_orders_item_ordered_id.sql", "original_file_path": "models\\staging\\stg_restaurant_data.yml", "unique_id": "test.restaurant_data_analytics.unique_stg_orders_item_ordered_id.371219fd6d", "fqn": ["restaurant_data_analytics", "staging", "unique_stg_orders_item_ordered_id"], "alias": "unique_stg_orders_item_ordered_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516851.1917078, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.stg_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_restaurant_data.yml\\unique_stg_orders_item_ordered_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select item_ordered_id as unique_field\n  from `annular-mesh-453913-r6`.`dbt_`.`stg_orders`\n  where item_ordered_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_ordered_id", "file_key_name": "models.stg_orders", "attached_node": "model.restaurant_data_analytics.stg_orders", "test_metadata": {"name": "unique", "kwargs": {"column_name": "item_ordered_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.not_null_stg_orders_item_uuid.954a22771b": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "not_null_stg_orders_item_uuid", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "not_null_stg_orders_item_uuid.sql", "original_file_path": "models\\staging\\stg_restaurant_data.yml", "unique_id": "test.restaurant_data_analytics.not_null_stg_orders_item_uuid.954a22771b", "fqn": ["restaurant_data_analytics", "staging", "not_null_stg_orders_item_uuid"], "alias": "not_null_stg_orders_item_uuid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747516851.19371, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.stg_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_restaurant_data.yml\\not_null_stg_orders_item_uuid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_uuid\nfrom `annular-mesh-453913-r6`.`dbt_`.`stg_orders`\nwhere item_uuid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_uuid", "file_key_name": "models.stg_orders", "attached_node": "model.restaurant_data_analytics.stg_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_uuid", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}, "test.restaurant_data_analytics.relationships_stg_orders_item_uuid__item_uuid__ref_dim_menu_items_.b2c69889e6": {"database": "annular-mesh-453913-r6", "schema": "dbt__dbt_test__audit", "name": "relationships_stg_orders_item_uuid__item_uuid__ref_dim_menu_items_", "resource_type": "test", "package_name": "restaurant_data_analytics", "path": "relationships_stg_orders_7e1b1b8a1dbd48d10e0b00fee04ab2ad.sql", "original_file_path": "models\\staging\\stg_restaurant_data.yml", "unique_id": "test.restaurant_data_analytics.relationships_stg_orders_item_uuid__item_uuid__ref_dim_menu_items_.b2c69889e6", "fqn": ["restaurant_data_analytics", "staging", "relationships_stg_orders_item_uuid__item_uuid__ref_dim_menu_items_"], "alias": "relationships_stg_orders_7e1b1b8a1dbd48d10e0b00fee04ab2ad", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_orders_7e1b1b8a1dbd48d10e0b00fee04ab2ad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_stg_orders_7e1b1b8a1dbd48d10e0b00fee04ab2ad"}, "created_at": 1747516851.195712, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_orders_7e1b1b8a1dbd48d10e0b00fee04ab2ad\") }}", "language": "sql", "refs": [{"name": "dim_menu_items", "package": null, "version": null}, {"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.restaurant_data_analytics.dim_menu_items", "model.restaurant_data_analytics.stg_orders"]}, "compiled_path": "target\\compiled\\restaurant_data_analytics\\models\\staging\\stg_restaurant_data.yml\\relationships_stg_orders_7e1b1b8a1dbd48d10e0b00fee04ab2ad.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select item_uuid as from_field\n    from `annular-mesh-453913-r6`.`dbt_`.`stg_orders`\n    where item_uuid is not null\n),\n\nparent as (\n    select item_uuid as to_field\n    from `annular-mesh-453913-r6`.`dbt_`.`dim_menu_items`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_uuid", "file_key_name": "models.stg_orders", "attached_node": "model.restaurant_data_analytics.stg_orders", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_menu_items')", "field": "item_uuid", "column_name": "item_uuid", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}}}, "sources": {"source.restaurant_data_analytics.restaurant_data.orders": {"database": "annular-mesh-453913-r6", "schema": "restaurant_data", "name": "orders", "resource_type": "source", "package_name": "restaurant_data_analytics", "path": "models\\staging\\src_restaurant_data.yml", "original_file_path": "models\\staging\\src_restaurant_data.yml", "unique_id": "source.restaurant_data_analytics.restaurant_data.orders", "fqn": ["restaurant_data_analytics", "staging", "restaurant_data", "orders"], "source_name": "restaurant_data", "source_description": "", "loader": "", "identifier": "orders", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each row represents an item ordered.", "columns": {"table_no": {"name": "table_no", "description": "The table number that placed the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_uuid": {"name": "item_uuid", "description": "The ID of the menu item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "datetime_ordered": {"name": "datetime_ordered", "description": "The timestamp when the order was placed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dep": {"name": "dep", "description": "The production department.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "order_uuid": {"name": "order_uuid", "description": "The ID for the group order (items ordered together).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`annular-mesh-453913-r6`.`restaurant_data`.`orders`", "created_at": 1747516851.2077234, "unrendered_database": "annular-mesh-453913-r6", "unrendered_schema": null}, "source.restaurant_data_analytics.restaurant_data.a_la_carte_menu": {"database": "annular-mesh-453913-r6", "schema": "restaurant_data", "name": "a_la_carte_menu", "resource_type": "source", "package_name": "restaurant_data_analytics", "path": "models\\staging\\src_restaurant_data.yml", "original_file_path": "models\\staging\\src_restaurant_data.yml", "unique_id": "source.restaurant_data_analytics.restaurant_data.a_la_carte_menu", "fqn": ["restaurant_data_analytics", "staging", "restaurant_data", "a_la_carte_menu"], "source_name": "restaurant_data", "source_description": "", "loader": "", "identifier": "a_la_carte_menu", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Menu table containing a la carte items.", "columns": {"item_uuid": {"name": "item_uuid", "description": "Unique identifier for the item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_name": {"name": "item_name", "description": "Name of the menu item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "category": {"name": "category", "description": "Category of the menu item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "desc": {"name": "desc", "description": "Description of the menu item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "Price of the item, stored as a string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_priced_per_weight": {"name": "is_priced_per_weight", "description": "Boolean flag indicating if the item is priced per weight.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`annular-mesh-453913-r6`.`restaurant_data`.`a_la_carte_menu`", "created_at": 1747516851.2097247, "unrendered_database": "annular-mesh-453913-r6", "unrendered_schema": null}, "source.restaurant_data_analytics.restaurant_data.cocktails_and_beer_menu": {"database": "annular-mesh-453913-r6", "schema": "restaurant_data", "name": "cocktails_and_beer_menu", "resource_type": "source", "package_name": "restaurant_data_analytics", "path": "models\\staging\\src_restaurant_data.yml", "original_file_path": "models\\staging\\src_restaurant_data.yml", "unique_id": "source.restaurant_data_analytics.restaurant_data.cocktails_and_beer_menu", "fqn": ["restaurant_data_analytics", "staging", "restaurant_data", "cocktails_and_beer_menu"], "source_name": "restaurant_data", "source_description": "", "loader": "", "identifier": "cocktails_and_beer_menu", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Menu table for cocktails and beer.", "columns": {"item_uuid": {"name": "item_uuid", "description": "Unique identifier for the item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_name": {"name": "item_name", "description": "Name of the menu item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "category": {"name": "category", "description": "Category of the menu item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "desc": {"name": "desc", "description": "Description of the menu item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "Price of the item as a float.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`annular-mesh-453913-r6`.`restaurant_data`.`cocktails_and_beer_menu`", "created_at": 1747516851.2097247, "unrendered_database": "annular-mesh-453913-r6", "unrendered_schema": null}, "source.restaurant_data_analytics.restaurant_data.dessert_menu": {"database": "annular-mesh-453913-r6", "schema": "restaurant_data", "name": "dessert_menu", "resource_type": "source", "package_name": "restaurant_data_analytics", "path": "models\\staging\\src_restaurant_data.yml", "original_file_path": "models\\staging\\src_restaurant_data.yml", "unique_id": "source.restaurant_data_analytics.restaurant_data.dessert_menu", "fqn": ["restaurant_data_analytics", "staging", "restaurant_data", "dessert_menu"], "source_name": "restaurant_data", "source_description": "", "loader": "", "identifier": "dessert_menu", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Menu table for desserts.", "columns": {"item_uuid": {"name": "item_uuid", "description": "Unique identifier for the dessert item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_name": {"name": "item_name", "description": "Name of the dessert item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "category": {"name": "category", "description": "Category of the dessert.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "desc": {"name": "desc", "description": "Description of the dessert.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "Price of the dessert as a float.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`annular-mesh-453913-r6`.`restaurant_data`.`dessert_menu`", "created_at": 1747516851.2097247, "unrendered_database": "annular-mesh-453913-r6", "unrendered_schema": null}, "source.restaurant_data_analytics.restaurant_data.wine_menu": {"database": "annular-mesh-453913-r6", "schema": "restaurant_data", "name": "wine_menu", "resource_type": "source", "package_name": "restaurant_data_analytics", "path": "models\\staging\\src_restaurant_data.yml", "original_file_path": "models\\staging\\src_restaurant_data.yml", "unique_id": "source.restaurant_data_analytics.restaurant_data.wine_menu", "fqn": ["restaurant_data_analytics", "staging", "restaurant_data", "wine_menu"], "source_name": "restaurant_data", "source_description": "", "loader": "", "identifier": "wine_menu", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Menu table for wines.", "columns": {"item_uuid": {"name": "item_uuid", "description": "Unique identifier for the wine item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "item_name": {"name": "item_name", "description": "Name of the wine item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "category": {"name": "category", "description": "Category of the wine.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "origin_region": {"name": "origin_region", "description": "The region where the wine originates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "origin_country": {"name": "origin_country", "description": "The country where the wine originates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "serving_size": {"name": "serving_size", "description": "Serving size for the wine.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "price": {"name": "price", "description": "Price of the wine as an integer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "`annular-mesh-453913-r6`.`restaurant_data`.`wine_menu`", "created_at": 1747516851.2097247, "unrendered_database": "annular-mesh-453913-r6", "unrendered_schema": null}}, "macros": {"macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1584983, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1594994, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1594994, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1594994, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1605003, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1605003, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1605003, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.161501, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.161501, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1625018, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.163503, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1645045, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1655047, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1655047, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\etc.sql", "original_file_path": "macros\\etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1665065, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\etc.sql", "original_file_path": "macros\\etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1665065, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\etc.sql", "original_file_path": "macros\\etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1675076, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1685073, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1685073, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1695092, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_subquery_sql": {"name": "bigquery__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_subquery_sql", "macro_sql": "{% macro bigquery__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false and current_timestamp() = current_timestamp()\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1705093, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog_relations": {"name": "bigquery__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog\\by_relation.sql", "original_file_path": "macros\\catalog\\by_relation.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog_relations", "macro_sql": "{% macro bigquery__get_catalog_relations(information_schema, relations) -%}\n\n    {%- if (relations | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards_stage as ({{ _bigquery__get_table_shards_sql(information_schema) }}),\n                table_shards as (\n                    select * from table_shards_stage\n                    where (\n                        {%- for relation in relations -%}\n                            (\n                                upper(table_schema) = upper('{{ relation.schema }}')\n                            and upper(table_name) = upper('{{ relation.identifier }}')\n                            )\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1715102, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog\\by_schema.sql", "original_file_path": "macros\\catalog\\by_schema.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n    {%- if (schemas | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards as (\n                    {{ _bigquery__get_table_shards_sql(information_schema) }}\n                    where (\n                        {%- for schema in schemas -%}\n                            upper(tables.dataset_id) = upper('{{ schema }}')\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.173512, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_shards_sql": {"name": "_bigquery__get_table_shards_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog\\catalog.sql", "original_file_path": "macros\\catalog\\catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro_sql": "{% macro _bigquery__get_table_shards_sql(information_schema) %}\n    select\n        tables.project_id as table_catalog,\n        tables.dataset_id as table_schema,\n        coalesce(REGEXP_EXTRACT(tables.table_id, '^(.+)[0-9]{8}$'), tables.table_id) as table_name,\n        tables.table_id as shard_name,\n        REGEXP_EXTRACT(tables.table_id, '^.+([0-9]{8})$') as shard_index,\n        REGEXP_CONTAINS(tables.table_id, '^.+[0-9]{8}$') and tables.type = 1 as is_date_shard,\n        case\n            when materialized_views.table_name is not null then 'materialized view'\n            when tables.type = 1 then 'table'\n            when tables.type = 2 then 'view'\n            else 'external'\n        end as table_type,\n        tables.type = 1 as is_table,\n        JSON_VALUE(table_description.option_value) as table_comment,\n        tables.size_bytes,\n        tables.row_count\n    from {{ information_schema.replace(information_schema_view='__TABLES__') }} tables\n    left join {{ information_schema.replace(information_schema_view='MATERIALIZED_VIEWS') }} materialized_views\n        on materialized_views.table_catalog = tables.project_id\n        and materialized_views.table_schema = tables.dataset_id\n        and materialized_views.table_name = tables.table_id\n    left join {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }} table_description\n        on table_description.table_catalog = tables.project_id\n        and table_description.table_schema = tables.dataset_id\n        and table_description.table_name = tables.table_id\n        and table_description.option_name = 'description'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1755137, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_tables_sql": {"name": "_bigquery__get_tables_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog\\catalog.sql", "original_file_path": "macros\\catalog\\catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_tables_sql", "macro_sql": "{% macro _bigquery__get_tables_sql() %}\n    select distinct\n        table_catalog,\n        table_schema,\n        table_name,\n        is_date_shard,\n        table_type,\n        is_table,\n        table_comment\n    from table_shards\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1755137, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_stats_sql": {"name": "_bigquery__get_table_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog\\catalog.sql", "original_file_path": "macros\\catalog\\catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro_sql": "{% macro _bigquery__get_table_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        table_name,\n        max(shard_name) as latest_shard_name,\n        min(shard_index) as shard_min,\n        max(shard_index) as shard_max,\n        count(shard_index) as shard_count,\n        sum(size_bytes) as size_bytes,\n        sum(row_count) as row_count\n    from table_shards\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1755137, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_columns_sql": {"name": "_bigquery__get_columns_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog\\catalog.sql", "original_file_path": "macros\\catalog\\catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_columns_sql", "macro_sql": "{% macro _bigquery__get_columns_sql(information_schema) %}\n    select\n        columns.table_catalog,\n        columns.table_schema,\n        columns.table_name as shard_name,\n        coalesce(paths.field_path, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields\n        -- BQ does not treat these nested properties as independent fields\n        row_number() over (\n            partition by\n                columns.table_catalog,\n                columns.table_schema,\n                columns.table_name\n            order by\n                columns.ordinal_position,\n                paths.field_path\n        ) as column_index,\n        coalesce(paths.data_type, '<unknown>') as column_type,\n        paths.description as column_comment,\n        case when columns.is_partitioning_column = 'YES' then 1 else 0 end as is_partitioning_column,\n        case when columns.is_partitioning_column = 'YES' then paths.field_path end as partition_column,\n        case when columns.clustering_ordinal_position is not null then 1 else 0 end as is_clustering_column,\n        case when columns.clustering_ordinal_position is not null then paths.field_path end as cluster_column,\n        columns.clustering_ordinal_position\n    from {{ information_schema.replace(information_schema_view='COLUMNS') }} columns\n    join {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }} paths\n        on paths.table_catalog = columns.table_catalog\n        and paths.table_schema = columns.table_schema\n        and paths.table_name = columns.table_name\n        and paths.column_name = columns.column_name\n    where columns.ordinal_position is not null\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1765149, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_column_stats_sql": {"name": "_bigquery__get_column_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog\\catalog.sql", "original_file_path": "macros\\catalog\\catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro_sql": "{% macro _bigquery__get_column_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        shard_name,\n        max(is_partitioning_column) = 1 as is_partitioned,\n        max(partition_column) as partition_column,\n        max(is_clustering_column) = 1 as is_clustered,\n        array_to_string(\n            array_agg(\n                cluster_column ignore nulls\n                order by clustering_ordinal_position\n            ), ', '\n        ) as clustering_columns\n    from columns\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1765149, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_extended_catalog_sql": {"name": "_bigquery__get_extended_catalog_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog\\catalog.sql", "original_file_path": "macros\\catalog\\catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro_sql": "{% macro _bigquery__get_extended_catalog_sql() %}\n    select\n        tables.table_catalog as table_database,\n        tables.table_schema,\n        case\n            when tables.is_date_shard then concat(tables.table_name, '*')\n            else tables.table_name\n        end as table_name,\n        tables.table_type,\n        tables.table_comment,\n        -- coalesce column metadata fields to ensure they are non-null for catalog generation\n        -- external table columns are not present in COLUMN_FIELD_PATHS\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        coalesce(columns.column_index, 1) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        coalesce(columns.column_comment, '') as column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_stats.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        tables.is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_stats.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        tables.is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_stats.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        tables.is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        table_stats.row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        tables.is_table as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        table_stats.size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        tables.is_table as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        column_stats.partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        column_stats.is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        column_stats.clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        column_stats.is_clustered as `stats__clustering_fields__include`\n\n    from tables\n    join table_stats\n        on table_stats.table_catalog = tables.table_catalog\n        and table_stats.table_schema = tables.table_schema\n        and table_stats.table_name = tables.table_name\n    left join column_stats\n        on column_stats.table_catalog = tables.table_catalog\n        and column_stats.table_schema = tables.table_schema\n        and column_stats.shard_name = table_stats.latest_shard_name\n    left join columns\n        on columns.table_catalog = tables.table_catalog\n        and columns.table_schema = tables.table_schema\n        and columns.shard_name = table_stats.latest_shard_name\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1765149, "supported_languages": null}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\clone.sql", "original_file_path": "macros\\materializations\\clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1775157, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\clone.sql", "original_file_path": "macros\\materializations\\clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1775157, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\copy.sql", "original_file_path": "macros\\materializations\\copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(ref_table.get('package'), ref_table.name, version=ref_table.get('version'))) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1795177, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite', 'microbatch'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite', 'microbatch'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% if strategy == 'microbatch' %}\n    {% do bq_validate_microbatch_config(config) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_validate_microbatch_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1835222, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1835222, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1855237, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% elif strategy == 'microbatch' %}\n\n    {% set build_sql = bq_generate_microbatch_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_microbatch_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1875262, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy not in ['insert_overwrite', 'microbatch'] %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite' or 'microbatch'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {%- if tmp_relation_exists -%}\n    {{ adapter.drop_relation(tmp_relation) }}\n  {%- endif -%}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.195532, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.196533, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.196533, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override, model['config']['delimiter']) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.198535, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.198535, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1995368, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.1995368, "supported_languages": null}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2045405, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n{%- set raw_partition_by = config.get('partition_by', none) -%}\n{%- set raw_cluster_by = config.get('cluster_by', none) -%}\n{%- set enable_list_inference = config.get('enable_list_inference', true) -%}\n{%- set intermediate_format = config.get('intermediate_format', none) -%}\n\n{%- set partition_config = adapter.parse_partition_by(raw_partition_by) %}\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\nspark.conf.set(\"enableListInference\", \"{{ enable_list_inference }}\")\n{% if intermediate_format %}\nspark.conf.set(\"intermediateFormat\", \"{{ intermediate_format }}\")\n{% endif %}\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\n# For writeMethod we need to use \"indirect\" if materializing a partitioned table\n# otherwise we can use \"direct\". Note that indirect will fail if the GCS bucket has a retention policy set on it.\n{%- if partition_config %}\n      {%- set write_method = 'indirect' -%}\n{%- else %}\n      {% set write_method = 'direct' -%}\n{%- endif %}\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"{{ write_method }}\") \\\n  .option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  {%- if partition_config is not none %}\n  {%- if partition_config.data_type | lower in ('date','timestamp','datetime') %}\n  .option(\"partitionField\", \"{{- partition_config.field -}}\") \\\n  {%- if partition_config.granularity is not none %}\n  .option(\"partitionType\", \"{{- partition_config.granularity| upper -}}\") \\\n  {%- endif %}\n  {%- endif %}\n  {%- endif %}\n  {%- if raw_cluster_by is not none %}\n  .option(\"clusteredFields\", \"{{- raw_cluster_by | join(',') -}}\") \\\n  {%- endif %}\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.206542, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.207544, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = bigquery__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2095451, "supported_languages": ["sql"]}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\common.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2105458, "supported_languages": null}, "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter": {"name": "predicate_for_avoid_require_partition_filter", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\common.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\common.sql", "unique_id": "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter", "macro_sql": "{% macro predicate_for_avoid_require_partition_filter(target='DBT_INTERNAL_DEST') %}\n\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- set predicate = none -%}\n\n    {% if partition_config and config.get('require_partition_filter') -%}\n        {%- set partition_field = partition_config.time_partitioning_field() if partition_config.time_ingestion_partitioning else partition_config.field -%}\n        {% set predicate %}\n            (\n                `{{ target }}`.`{{ partition_field }}` is null\n                or `{{ target }}`.`{{ partition_field }}` is not null\n            )\n        {% endset %}\n    {%- endif -%}\n\n    {{ return(predicate) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2115467, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2145493, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.data_type == 'int64' %}\n      {% set partition = partition | as_text %}\n    {% elif partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2185533, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.219555, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif %}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.221557, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {%- if tmp_relation_exists is false -%}\n  {# We run temp table creation in a separated script to move to partitions copy if it doesn't already exist #}\n    {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n      {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n    }}\n    {%- endcall %}\n  {%- endif -%}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.223558, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2255595, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\merge.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set avoid_require_partition_filter = predicate_for_avoid_require_partition_filter() -%}\n    {%- if avoid_require_partition_filter is not none -%}\n        {% do predicates.append(avoid_require_partition_filter) %}\n    {%- endif -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2275624, "supported_languages": null}, "macro.dbt_bigquery.bq_validate_microbatch_config": {"name": "bq_validate_microbatch_config", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\microbatch.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\microbatch.sql", "unique_id": "macro.dbt_bigquery.bq_validate_microbatch_config", "macro_sql": "{% macro bq_validate_microbatch_config(config) %}\n  {% if config.get(\"partition_by\") is none %}\n    {% set missing_partition_msg -%}\n    The 'microbatch' strategy requires a `partition_by` config.\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n  {% endif %}\n\n  {% if config.get(\"partition_by\").granularity != config.get('batch_size') %}\n    {% set invalid_partition_by_granularity_msg -%}\n    The 'microbatch' strategy requires a `partition_by` config with the same granularity as its configured `batch_size`.\n    Got:\n      `batch_size`: {{ config.get('batch_size') }}\n      `partition_by.granularity`: {{ config.get(\"partition_by\").granularity }}\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(invalid_partition_by_granularity_msg) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2295635, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_microbatch_build_sql": {"name": "bq_generate_microbatch_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\microbatch.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\microbatch.sql", "unique_id": "macro.dbt_bigquery.bq_generate_microbatch_build_sql", "macro_sql": "{% macro bq_generate_microbatch_build_sql(\n      tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.230564, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2315648, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.232566, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.233568, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2345679, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.235569, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.235569, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\cluster.sql", "original_file_path": "macros\\relations\\cluster.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.23657, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n    {% do adapter.drop_relation(relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2375705, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\options.sql", "original_file_path": "macros\\relations\\options.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2385721, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\partition.sql", "original_file_path": "macros\\relations\\partition.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2395728, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2405732, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql": {"name": "bigquery__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n    {% else %}\n\n        alter materialized view {{ relation }}\n            set {{ bigquery_options(configuration_changes.options.context.as_ddl_dict()) }}\n\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2415743, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes": {"name": "bigquery__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes", "macro_sql": "{% macro bigquery__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = adapter.describe_relation(existing_relation) %}\n    {% set _configuration_changes = existing_relation.materialized_view_config_changeset(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2415743, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql": {"name": "bigquery__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_create_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2425752, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_materialized_view": {"name": "bigquery__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_materialized_view", "macro_sql": "{% macro bigquery__drop_materialized_view(relation) %}\n    drop materialized view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.243576, "supported_languages": null}, "macro.dbt_bigquery.bigquery__refresh_materialized_view": {"name": "bigquery__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt_bigquery.bigquery__refresh_materialized_view", "macro_sql": "{% macro bigquery__refresh_materialized_view(relation) %}\n    call bq.refresh_materialized_view('{{ relation.database }}.{{ relation.schema }}.{{ relation.identifier }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.243576, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql": {"name": "bigquery__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_replace_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create or replace materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.244577, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_table": {"name": "bigquery__drop_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_table", "macro_sql": "{% macro bigquery__drop_table(relation) %}\n    drop table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.244577, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\table\\options.sql", "original_file_path": "macros\\relations\\table\\options.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.245578, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_table_sql": {"name": "bigquery__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_table_sql", "macro_sql": "{%- macro bigquery__get_rename_table_sql(relation, new_name) -%}\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.245578, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_view": {"name": "bigquery__drop_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_view", "macro_sql": "{% macro bigquery__drop_view(relation) %}\n    drop view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.246579, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\view\\options.sql", "original_file_path": "macros\\relations\\view\\options.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.246579, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_view_sql": {"name": "bigquery__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_view_sql", "macro_sql": "{%- macro bigquery__get_rename_view_sql(relation, new_name) -%}\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2475805, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_view": {"name": "bigquery__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_view", "macro_sql": "{% macro bigquery__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt_bigquery.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2505834, "supported_languages": null}, "macro.dbt_bigquery.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt_bigquery.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2505834, "supported_languages": null}, "macro.dbt_bigquery.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt_bigquery.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2505834, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2515836, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2515836, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2525842, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2525842, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date": {"name": "bigquery__date", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\date.sql", "original_file_path": "macros\\utils\\date.sql", "unique_id": "macro.dbt_bigquery.bigquery__date", "macro_sql": "{% macro bigquery__date(year, month, day) -%}\n    date({{ year }}, {{ month }}, {{ day }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.253585, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.253585, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2545867, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2545867, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.255587, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.255587, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\get_columns_spec_ddl.sql", "original_file_path": "macros\\utils\\get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2565877, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\get_columns_spec_ddl.sql", "original_file_path": "macros\\utils\\get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2575898, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\get_columns_spec_ddl.sql", "original_file_path": "macros\\utils\\get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2585897, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\get_columns_spec_ddl.sql", "original_file_path": "macros\\utils\\get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2595909, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2595909, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2595909, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2605915, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2605915, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2615926, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n{%- if type.lower().startswith('array') and field is iterable and (field is not string and field is not mapping) and field | length > 0 -%}\n    {#-- Extract nested type from 'array<nested_type>' --#}\n    {% set nested_type = type.lower()[6:-1] %}\n    {#-- BigQuery does not support direct casts to arrays. instead, each element must be cast individually + reaggregated into an array --#}\n    {%- if cast_from_string_unsupported_for(nested_type)  %}\n        (select array_agg(safe_cast(i as {{ nested_type }})) from unnest([\n            {%- for nested_field in field %}\n                {{ nested_field.strip('\"').strip(\"'\") }}{{ ',' if not loop.last }}\n            {%- endfor %}\n        ]) i)\n    {%- else -%}\n        (select array_agg(safe_cast(i as {{nested_type}})) from unnest({{field}}) i)\n    {%- endif -%}\n\n{%- elif type.lower() == 'json' and field is mapping -%}\n    safe_cast(json {{ dbt.string_literal(tojson(field)) }} as json)\n{%- elif cast_from_string_unsupported_for(type) and field is string -%}\n    safe_cast({{field.strip('\"').strip(\"'\")}} as {{type}})\n{%- else -%}\n    safe_cast({{field}} as {{type}})\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.cast_from_string_unsupported_for", "macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2645953, "supported_languages": null}, "macro.dbt_bigquery.cast_from_string_unsupported_for": {"name": "cast_from_string_unsupported_for", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt_bigquery.cast_from_string_unsupported_for", "macro_sql": "{% macro cast_from_string_unsupported_for(type) %}\n    {{ return(type.lower().startswith('struct') or type.lower() == 'geography') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2645953, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2655966, "supported_languages": null}, "macro.dbt_bigquery.bigquery__string_literal": {"name": "bigquery__string_literal", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\string_literal.sql", "original_file_path": "macros\\utils\\string_literal.sql", "unique_id": "macro.dbt_bigquery.bigquery__string_literal", "macro_sql": "{%- macro bigquery__string_literal(value) -%}\n    '''{{ value }}'''\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2655966, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.266598, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.266598, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.266598, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2685988, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2695997, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2695997, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2695997, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2706008, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2706008, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2716017, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2716017, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2726023, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2726023, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2736034, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2736034, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2746043, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2756066, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2756066, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.276607, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2786083, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2806108, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2816105, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2816105, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2826123, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2826123, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2836127, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.285614, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2866156, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2866156, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2876174, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2876174, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.289618, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.289618, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2916198, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.292621, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2936215, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2936215, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2946227, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2956235, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2956235, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.296625, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.296625, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2976258, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2976258, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2976258, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.298626, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.2996278, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3006282, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3006282, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3016298, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3016298, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3016298, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3026304, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3026304, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3036318, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3036318, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3046315, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3046315, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3046315, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3056326, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3056326, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3066335, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3066335, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3066335, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3076355, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3086352, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3086352, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3086352, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.309637, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3106372, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3116384, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3126402, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3136399, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3136399, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3146405, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3146405, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3156424, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3156424, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3166444, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3176463, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3176463, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3186467, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3186467, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.319647, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.319647, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.319647, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3206482, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.321649, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3226504, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3226504, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3236508, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3236508, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3236508, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.default__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3246522, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3246522, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3256533, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3256533, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3256533, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\validate_sql.sql", "original_file_path": "macros\\adapters\\validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3266535, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\validate_sql.sql", "original_file_path": "macros\\adapters\\validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3266535, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.328654, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.330657, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3326573, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.333661, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3366616, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3376625, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3386629, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.339664, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.339664, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3406646, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3416655, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.3416655, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.430747, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4317482, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4317482, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.432749, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.433749, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.434751, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.435751, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.435751, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4367526, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4387543, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4387543, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4397552, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4397552, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4397552, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4437582, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4447598, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4447598, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.448763, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.448763, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4507668, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table.sql", "original_file_path": "macros\\materializations\\models\\table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4557698, "supported_languages": ["sql"]}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view.sql", "original_file_path": "macros\\materializations\\models\\view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4607737, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4607737, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.461775, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4667802, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4677842, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.468784, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4697824, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4707828, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4727855, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4727855, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4747868, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4847968, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.485797, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4888005, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.492803, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4938042, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.494805, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.495807, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4968069, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.4988086, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5018127, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5048144, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5068161, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5078177, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5088177, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5088177, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.509819, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.509819, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5108194, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5108194, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5108194, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5118203, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5118203, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5128214, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5128214, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5128214, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5148232, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5168278, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.51783, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5188303, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5198302, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5198302, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5198302, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5208297, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5208297, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5208297, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5218341, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5228317, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.525834, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5318394, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.535844, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5368457, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5368457, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5378442, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5378442, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5378442, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5378442, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5388453, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and ({{ strategy.row_changed }})\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5468524, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5468524, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.548854, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5498579, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.551858, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.552858, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.552858, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5538585, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5548608, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5558605, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5558605, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5648687, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5658693, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5678766, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.572876, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.572876, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5738766, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5758784, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5758784, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5758784, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.578881, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.582885, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.584888, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.584888, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5858886, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5868893, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5918925, "supported_languages": ["sql"]}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\unit.sql", "original_file_path": "macros\\materializations\\tests\\unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5958965, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5968978, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5978987, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5999033, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.5999033, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.601904, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6029034, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6049058, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6059062, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6059062, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6069067, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6079078, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_backup.sql", "original_file_path": "macros\\relations\\create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6079078, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_backup.sql", "original_file_path": "macros\\relations\\create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.608909, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_intermediate.sql", "original_file_path": "macros\\relations\\create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.608909, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_intermediate.sql", "original_file_path": "macros\\relations\\create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.60991, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6109107, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6119118, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6119118, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6119118, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.612913, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop_backup.sql", "original_file_path": "macros\\relations\\drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6139135, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop_backup.sql", "original_file_path": "macros\\relations\\drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6139135, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.614914, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6159148, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6169162, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6169162, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename_intermediate.sql", "original_file_path": "macros\\relations\\rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6179173, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename_intermediate.sql", "original_file_path": "macros\\relations\\rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.618918, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6199195, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6219208, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\schema.sql", "original_file_path": "macros\\relations\\schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6229212, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\schema.sql", "original_file_path": "macros\\relations\\schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6229212, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.624923, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.624923, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6259243, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6259243, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.626925, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.628927, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6299276, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6309283, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.63193, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6329308, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6329308, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6339316, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6339316, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6349325, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6349325, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6349325, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6359339, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6359339, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\rename.sql", "original_file_path": "macros\\relations\\materialized_view\\rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6369352, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\rename.sql", "original_file_path": "macros\\relations\\materialized_view\\rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6369352, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6379356, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6379356, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.638936, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.638936, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.639937, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6419387, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6429396, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6429396, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6439407, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6439407, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6439407, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6449413, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6449413, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6459422, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6459422, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6469436, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6469436, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6469436, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.647945, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.648945, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6499467, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6499467, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6499467, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6509476, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6519485, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6539495, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6539495, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.654951, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6599548, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6609554, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.663959, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6649594, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6649594, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6649594, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6659598, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6659598, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6659598, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.666962, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.666962, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.667963, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.668964, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.668964, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.668964, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast.sql", "original_file_path": "macros\\utils\\cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6699643, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast.sql", "original_file_path": "macros\\utils\\cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6699643, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.670965, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.670965, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6719658, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6719658, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6739678, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6739678, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6749685, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6749685, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6749685, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6749685, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6759694, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6759694, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6769705, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6769705, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6769705, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6769705, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6779714, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6779714, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date.sql", "original_file_path": "macros\\utils\\date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6789727, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date.sql", "original_file_path": "macros\\utils\\date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6789727, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6799738, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6799738, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.680974, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.680974, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.681975, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6839767, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6839767, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6849778, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6859794, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6859794, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\equals.sql", "original_file_path": "macros\\utils\\equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.686981, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\equals.sql", "original_file_path": "macros\\utils\\equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.686981, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6879811, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6879811, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6879811, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6889822, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6889822, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6899822, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6909835, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6919844, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6919844, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6929848, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6929848, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6929848, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.693986, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.693986, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6949875, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6959875, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6959875, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6969888, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6979892, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6979892, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6979892, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6989906, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6989906, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6999924, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.6999924, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7009926, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7009926, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7019932, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7019932, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.702994, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.702994, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7039952, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7049966, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7049966, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7059975, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7059975, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7069986, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7079995, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7089996, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      {% if group_by_columns|length() == 0 %}\n        where {{ column_name }} is not null\n        limit 1\n      {% endif %}\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7110014, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.712003, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7130039, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.715005, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.724013, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.725014, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7280166, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7280166, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7290182, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7300186, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7330217, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7350242, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7380261, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7390273, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.740028, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7410288, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.74203, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_empty_string.sql", "original_file_path": "macros\\generic_tests\\not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.74203, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_empty_string.sql", "original_file_path": "macros\\generic_tests\\not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7430305, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7440314, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as {{ dbt.type_numeric() }}) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7460334, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7470343, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7480369, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7500374, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7500374, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.752039, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7540405, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7550423, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7560425, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7570434, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7570434, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7580445, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7580445, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7590458, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7590458, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\slugify.sql", "original_file_path": "macros\\jinja_helpers\\slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{% if not string %}\n{{ return('') }}\n{% endif %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7610471, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\_is_ephemeral.sql", "original_file_path": "macros\\jinja_helpers\\_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.763049, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\_is_relation.sql", "original_file_path": "macros\\jinja_helpers\\_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.76405, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7650506, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7660515, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7670531, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7670531, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7690544, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7690544, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7690544, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.770055, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.770055, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.770055, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7710562, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.772057, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.773058, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.773058, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.774059, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_surrogate_key.sql", "original_file_path": "macros\\sql\\generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7750597, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_surrogate_key.sql", "original_file_path": "macros\\sql\\generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7770627, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7780626, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.782066, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7830675, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7840679, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7850685, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7860694, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7870708, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7890728, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7900734, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7920752, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_single_value.sql", "original_file_path": "macros\\sql\\get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7930758, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_single_value.sql", "original_file_path": "macros\\sql\\get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7950778, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.796079, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7970798, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.7990825, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8000824, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.801083, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8020847, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8030853, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8030853, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.804086, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.804086, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.804086, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8050873, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8050873, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8060877, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8070884, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8080902, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8100915, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8110921, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8120933, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8120933, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8130944, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8140948, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8170984, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8170984, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8191009, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_divide.sql", "original_file_path": "macros\\sql\\safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8191009, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_divide.sql", "original_file_path": "macros\\sql\\safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8201013, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_subtract.sql", "original_file_path": "macros\\sql\\safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8201013, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_subtract.sql", "original_file_path": "macros\\sql\\safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8221035, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8231034, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8271067, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8271067, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.828109, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8301103, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.838119, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, quote_identifiers)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.84112, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    {%- set current_col_name = adapter.quote(col.column) if quote_identifiers else col.column -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ adapter.quote(exclude_col) if quote_identifiers else exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ adapter.quote(field_name) if quote_identifiers else field_name  }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(current_col_name) }}\n             {% else %}\n           {{ current_col_name }}\n             {% endif %}\n           as {{ cast_to }}) as {{ adapter.quote(value_name) if quote_identifiers else value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8451233, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.846124, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.847125, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8481271, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8491275, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8501291, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.851131, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.851131, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8521311, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1747516847.8541327, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs\\overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.restaurant_data_analytics.dim_menu_items": ["model.restaurant_data_analytics.stg_a_la_carte_menu", "model.restaurant_data_analytics.stg_cocktails_and_beer_menu", "model.restaurant_data_analytics.stg_dessert_menu", "model.restaurant_data_analytics.stg_wine_menu"], "model.restaurant_data_analytics.fct_orders": ["model.restaurant_data_analytics.dim_menu_items", "model.restaurant_data_analytics.stg_orders"], "model.restaurant_data_analytics.agg_customer_counts": ["model.restaurant_data_analytics.fct_orders"], "model.restaurant_data_analytics.agg_category_performance": ["model.restaurant_data_analytics.dim_menu_items", "model.restaurant_data_analytics.fct_orders"], "model.restaurant_data_analytics.agg_item_performance_mo": ["model.restaurant_data_analytics.dim_menu_items", "model.restaurant_data_analytics.fct_orders"], "model.restaurant_data_analytics.agg_item_performance_total": ["model.restaurant_data_analytics.dim_menu_items", "model.restaurant_data_analytics.fct_orders"], "model.restaurant_data_analytics.agg_item_performance_wk": ["model.restaurant_data_analytics.dim_menu_items", "model.restaurant_data_analytics.fct_orders"], "model.restaurant_data_analytics.agg_daily_drink_sales": ["model.restaurant_data_analytics.agg_daily_metadata", "model.restaurant_data_analytics.agg_hourly_drink_sales"], "model.restaurant_data_analytics.agg_daily_food_sales": ["model.restaurant_data_analytics.agg_daily_metadata", "model.restaurant_data_analytics.agg_hourly_food_sales"], "model.restaurant_data_analytics.agg_daily_total_sales": ["model.restaurant_data_analytics.agg_daily_drink_sales", "model.restaurant_data_analytics.agg_daily_food_sales", "model.restaurant_data_analytics.agg_daily_metadata"], "model.restaurant_data_analytics.agg_hourly_drink_sales": ["model.restaurant_data_analytics.agg_customer_counts", "model.restaurant_data_analytics.fct_orders"], "model.restaurant_data_analytics.agg_hourly_food_sales": ["model.restaurant_data_analytics.agg_customer_counts", "model.restaurant_data_analytics.fct_orders"], "model.restaurant_data_analytics.agg_hourly_total_sales": ["model.restaurant_data_analytics.agg_hourly_drink_sales", "model.restaurant_data_analytics.agg_hourly_food_sales"], "model.restaurant_data_analytics.agg_monthly_drink_sales": ["model.restaurant_data_analytics.agg_daily_drink_sales", "model.restaurant_data_analytics.agg_monthly_metadata"], "model.restaurant_data_analytics.agg_monthly_food_sales": ["model.restaurant_data_analytics.agg_daily_food_sales", "model.restaurant_data_analytics.agg_monthly_metadata"], "model.restaurant_data_analytics.agg_monthly_total_sales": ["model.restaurant_data_analytics.agg_monthly_drink_sales", "model.restaurant_data_analytics.agg_monthly_food_sales", "model.restaurant_data_analytics.agg_monthly_metadata"], "model.restaurant_data_analytics.agg_weekly_drink_sales": ["model.restaurant_data_analytics.agg_daily_drink_sales", "model.restaurant_data_analytics.agg_weekly_metadata"], "model.restaurant_data_analytics.agg_weekly_food_sales": ["model.restaurant_data_analytics.agg_daily_food_sales", "model.restaurant_data_analytics.agg_weekly_metadata"], "model.restaurant_data_analytics.agg_weekly_total_sales": ["model.restaurant_data_analytics.agg_weekly_drink_sales", "model.restaurant_data_analytics.agg_weekly_food_sales"], "model.restaurant_data_analytics.agg_daily_metadata": ["model.restaurant_data_analytics.fct_orders"], "model.restaurant_data_analytics.agg_monthly_metadata": ["model.restaurant_data_analytics.fct_orders"], "model.restaurant_data_analytics.agg_weekly_metadata": ["model.restaurant_data_analytics.fct_orders"], "model.restaurant_data_analytics.dim_time": ["model.restaurant_data_analytics.fct_orders"], "model.restaurant_data_analytics.stg_a_la_carte_menu": ["source.restaurant_data_analytics.restaurant_data.a_la_carte_menu"], "model.restaurant_data_analytics.stg_cocktails_and_beer_menu": ["source.restaurant_data_analytics.restaurant_data.cocktails_and_beer_menu"], "model.restaurant_data_analytics.stg_dessert_menu": ["source.restaurant_data_analytics.restaurant_data.dessert_menu"], "model.restaurant_data_analytics.stg_orders": ["source.restaurant_data_analytics.restaurant_data.orders"], "model.restaurant_data_analytics.stg_wine_menu": ["source.restaurant_data_analytics.restaurant_data.wine_menu"], "test.restaurant_data_analytics.not_null_dim_menu_items_item_uuid.774c582c18": ["model.restaurant_data_analytics.dim_menu_items"], "test.restaurant_data_analytics.unique_dim_menu_items_item_uuid.bd08cb1ca7": ["model.restaurant_data_analytics.dim_menu_items"], "test.restaurant_data_analytics.not_null_dim_menu_items_item_name.5271b11418": ["model.restaurant_data_analytics.dim_menu_items"], "test.restaurant_data_analytics.not_null_dim_menu_items_category.69523848c3": ["model.restaurant_data_analytics.dim_menu_items"], "test.restaurant_data_analytics.accepted_values_dim_menu_items_category__Bordeaux__Champagne_Sparkling__Dessert_Wines__Port_Sherry__Rarities__Red_Wines__Rose_Wines__White_Wines__Cheese__The_Sacred_Six__Ultimate_Steakhouse_Cocktails__Time_A_Place__Lo_No_Alc__Beers_Cider__Starters__Mains__Large_Cuts__Steaks__Sauces__Extras__Sides__Burgundy__Magnums__Puddings__Ice_Cream_Sorbet__Chocolates.cf6c12d38a": ["model.restaurant_data_analytics.dim_menu_items"], "test.restaurant_data_analytics.not_null_dim_menu_items_price.1ac5d639c4": ["model.restaurant_data_analytics.dim_menu_items"], "test.restaurant_data_analytics.not_null_dim_menu_items_is_priced_per_weight.d487175596": ["model.restaurant_data_analytics.dim_menu_items"], "test.restaurant_data_analytics.not_null_dim_menu_items_menu_source.e5d551a7f0": ["model.restaurant_data_analytics.dim_menu_items"], "test.restaurant_data_analytics.not_null_fct_orders_item_ordered_id.1a48e4de0a": ["model.restaurant_data_analytics.fct_orders"], "test.restaurant_data_analytics.unique_fct_orders_item_ordered_id.43ff115a40": ["model.restaurant_data_analytics.fct_orders"], "test.restaurant_data_analytics.not_null_fct_orders_table_no.d78c6ee39c": ["model.restaurant_data_analytics.fct_orders"], "test.restaurant_data_analytics.not_null_fct_orders_item_uuid.145ea3a0c1": ["model.restaurant_data_analytics.fct_orders"], "test.restaurant_data_analytics.relationships_fct_orders_item_uuid__item_uuid__ref_dim_menu_items_.f9ec88fbee": ["model.restaurant_data_analytics.dim_menu_items", "model.restaurant_data_analytics.fct_orders"], "test.restaurant_data_analytics.not_null_fct_orders_datetime_ordered.aacf1c2eea": ["model.restaurant_data_analytics.fct_orders"], "test.restaurant_data_analytics.not_null_fct_orders_production_department.6b5c746240": ["model.restaurant_data_analytics.fct_orders"], "test.restaurant_data_analytics.accepted_values_fct_orders_production_department__kitchen__bar.60bb7e44ff": ["model.restaurant_data_analytics.fct_orders"], "test.restaurant_data_analytics.not_null_fct_orders_order_uuid.9e38b191ab": ["model.restaurant_data_analytics.fct_orders"], "test.restaurant_data_analytics.not_null_fct_orders_quantity.f754434156": ["model.restaurant_data_analytics.fct_orders"], "test.restaurant_data_analytics.dbt_utils_accepted_range_fct_orders_quantity__50__1.2dc70d2c12": ["model.restaurant_data_analytics.fct_orders"], "test.restaurant_data_analytics.not_null_fct_orders_order_date.84f0a76362": ["model.restaurant_data_analytics.fct_orders"], "test.restaurant_data_analytics.not_null_fct_orders_order_hour.385ba97c83": ["model.restaurant_data_analytics.fct_orders"], "test.restaurant_data_analytics.dbt_utils_accepted_range_fct_orders_order_hour__23__0.3dddbd9d13": ["model.restaurant_data_analytics.fct_orders"], "test.restaurant_data_analytics.not_null_fct_orders_order_weekday.d374011ab1": ["model.restaurant_data_analytics.fct_orders"], "test.restaurant_data_analytics.accepted_values_fct_orders_order_weekday__Monday__Tuesday__Wednesday__Thursday__Friday__Saturday__Sunday.14d53fa665": ["model.restaurant_data_analytics.fct_orders"], "test.restaurant_data_analytics.not_null_fct_orders_item_name.b425bb9ffe": ["model.restaurant_data_analytics.fct_orders"], "test.restaurant_data_analytics.not_null_fct_orders_category.0a620c476d": ["model.restaurant_data_analytics.fct_orders"], "test.restaurant_data_analytics.not_null_fct_orders_price.5983e7e539": ["model.restaurant_data_analytics.fct_orders"], "test.restaurant_data_analytics.not_null_fct_orders_menu_source.ab9cf8e7bc": ["model.restaurant_data_analytics.fct_orders"], "test.restaurant_data_analytics.accepted_values_fct_orders_menu_source__a_la_carte__wine__dessert__cocktails_and_beer.f09ddd97a4": ["model.restaurant_data_analytics.fct_orders"], "test.restaurant_data_analytics.not_null_fct_orders_total_item_revenue.eb686692f4": ["model.restaurant_data_analytics.fct_orders"], "test.restaurant_data_analytics.not_null_agg_item_performance_total_item_uuid.d59af4ffe7": ["model.restaurant_data_analytics.agg_item_performance_total"], "test.restaurant_data_analytics.relationships_agg_item_performance_total_item_uuid__item_uuid__ref_dim_menu_items_.ec00fe5960": ["model.restaurant_data_analytics.agg_item_performance_total", "model.restaurant_data_analytics.dim_menu_items"], "test.restaurant_data_analytics.not_null_agg_item_performance_total_item_name.09051f6158": ["model.restaurant_data_analytics.agg_item_performance_total"], "test.restaurant_data_analytics.not_null_agg_item_performance_total_menu_source.fdb34fbd23": ["model.restaurant_data_analytics.agg_item_performance_total"], "test.restaurant_data_analytics.accepted_values_agg_item_performance_total_menu_source__a_la_carte__wine__dessert__cocktails_and_beer.4e060d3546": ["model.restaurant_data_analytics.agg_item_performance_total"], "test.restaurant_data_analytics.not_null_agg_item_performance_total_item_category.bd180f74c3": ["model.restaurant_data_analytics.agg_item_performance_total"], "test.restaurant_data_analytics.not_null_agg_item_performance_total_total_units_sold.411c818a19": ["model.restaurant_data_analytics.agg_item_performance_total"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_item_performance_total_total_units_sold___0_.aaffeb542c": ["model.restaurant_data_analytics.agg_item_performance_total"], "test.restaurant_data_analytics.not_null_agg_item_performance_total_total_revenue.210bfcd51f": ["model.restaurant_data_analytics.agg_item_performance_total"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_item_performance_total_total_revenue___0_.8157fc0670": ["model.restaurant_data_analytics.agg_item_performance_total"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_item_performance_total_avg_order_hour__24__0.181d79d065": ["model.restaurant_data_analytics.agg_item_performance_total"], "test.restaurant_data_analytics.not_null_agg_item_performance_total_percent_of_total_sales.a03d3d8905": ["model.restaurant_data_analytics.agg_item_performance_total"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_item_performance_total_percent_of_total_sales__100__0.4490803867": ["model.restaurant_data_analytics.agg_item_performance_total"], "test.restaurant_data_analytics.not_null_agg_category_performance_category.a23d4da1b4": ["model.restaurant_data_analytics.agg_category_performance"], "test.restaurant_data_analytics.not_null_agg_category_performance_menu_source.1bad3d7d85": ["model.restaurant_data_analytics.agg_category_performance"], "test.restaurant_data_analytics.not_null_agg_category_performance_avg_price.51b124e7fa": ["model.restaurant_data_analytics.agg_category_performance"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_avg_price___0_.073766ce7d": ["model.restaurant_data_analytics.agg_category_performance"], "test.restaurant_data_analytics.not_null_agg_category_performance_avg_price_per_unit.d1c50d715f": ["model.restaurant_data_analytics.agg_category_performance"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_avg_price_per_unit___0_.05c884321e": ["model.restaurant_data_analytics.agg_category_performance"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_total_units_sold_30d___0_.8f3fe48be0": ["model.restaurant_data_analytics.agg_category_performance"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_total_revenue_30d___0_.c315b16e27": ["model.restaurant_data_analytics.agg_category_performance"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_total_units_sold_7d___0_.2adb4a1d35": ["model.restaurant_data_analytics.agg_category_performance"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_total_revenue_7d___0.bba097983c": ["model.restaurant_data_analytics.agg_category_performance"], "test.restaurant_data_analytics.not_null_agg_hourly_drink_sales_order_hour_dt.261b9a4fe9": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.unique_agg_hourly_drink_sales_order_hour_dt.4361589091": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.not_null_agg_hourly_drink_sales_order_date.0de88677a0": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.not_null_agg_hourly_drink_sales_hour_of_day.2583d9df37": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_drink_sales_hour_of_day__23__0.3e29f6efcf": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_total_drink_items_ordered_per_hour___0.3450c2e2d6": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_total_drink_revenue_per_hour___0.573915afdc": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_item_per_hour___0.023de2042a": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_item_per_hour___total_drink_revenue_per_hour.afdadd8a60": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.accepted_values_agg_hourly_drink_sales_top_drink_category_name_per_hour__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy.261d498c1b": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_top_drink_category_revenue_per_hour___0.786b3bbdfa": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_top_drink_category_revenue_per_hour___total_drink_revenue_per_hour.65074ddea5": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_drink_sales_pct_top_drink_cat_of_drink_revenue_per_hour__1__0.e57c775c7b": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_distinct_drink_tables_per_hour___0.7e82d1f7eb": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_distinct_drink_tables_per_hour___50.46da344194": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_total_drink_orders_per_hour___0.5ad7584efe": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_order_per_hour___0.3fed9674e6": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_order_per_hour___total_drink_revenue_per_hour.93e1f9af63": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_items_per_drink_order_per_hour___1.d4e4c2e2a0": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_items_per_drink_order_per_hour___total_drink_items_ordered_per_hour.f3e179be57": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_unique_drink_items_ordered_per_hour___0.9462412e98": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_drink_category_diversity_per_hour___0.5fdb5ba869": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.accepted_values_agg_hourly_drink_sales_is_bar_peak_hour__False__True__False.af5c5a9a75": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_items_per_head_per_hour___0.dfaaa0fa7a": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_items_per_head_per_hour___total_drink_items_ordered_per_hour.812f1ef606": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_revenue_per_head_per_hour___0.cc50bd090d": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_revenue_per_head_per_hour___total_drink_revenue_per_hour.8ee23b6bc6": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.accepted_values_agg_hourly_drink_sales_is_weekend__False__True__False.8f4747307c": ["model.restaurant_data_analytics.agg_hourly_drink_sales"], "test.restaurant_data_analytics.not_null_agg_hourly_food_sales_order_hour_dt.60db913355": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.unique_agg_hourly_food_sales_order_hour_dt.7d0717c959": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.not_null_agg_hourly_food_sales_order_date.b7c06f6f07": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.not_null_agg_hourly_food_sales_hour_of_day.0b52be9331": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_food_sales_hour_of_day__23__0.6b8c470f7f": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_total_food_items_ordered_per_hour___0.7e2b9a6fb4": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_total_food_revenue_per_hour___0.f48f0defae": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_item_per_hour___0.c64ad51169": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_item_per_hour___total_food_revenue_per_hour.d707b49bc0": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.accepted_values_agg_hourly_food_sales_top_food_category_name_per_hour__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters.7e80c0ef85": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_top_food_category_revenue_per_hour___0.0421d21b43": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_top_food_category_revenue_per_hour___total_food_revenue_per_hour.c04bf973b7": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_food_sales_pct_top_food_cat_of_food_revenue_per_hour__1__0.882cffd670": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_distinct_food_tables_per_hour___0.62c5da7a03": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_distinct_food_tables_per_hour___50.2b0d3c2512": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_total_mains_ordered_per_hour___0.a8d70207b0": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_food_revenue_per_head_per_hour___0.b99e787c27": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_food_items_per_head_per_hour___0.b363014e6d": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_total_food_orders_per_hour___0.51dd4b1e73": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_order_per_hour___0.c7f011b15f": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_order_per_hour___total_food_revenue_per_hour.a2c4407d85": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_items_per_food_order_per_hour___1.2864290ce4": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_items_per_food_order_per_hour___total_food_items_ordered_per_hour.4940f6a78f": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_unique_food_items_ordered_per_hour___0.0432836dff": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_food_category_diversity_per_hour___1.41c806a20a": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.accepted_values_agg_hourly_food_sales_is_weekend__False__True__False.1e07b9297e": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.accepted_values_agg_hourly_food_sales_is_kitchen_peak_hour__False__True__False.8f523c339e": ["model.restaurant_data_analytics.agg_hourly_food_sales"], "test.restaurant_data_analytics.not_null_agg_hourly_total_sales_order_hour_dt.97b59b9388": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.unique_agg_hourly_total_sales_order_hour_dt.e9ebac77c1": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.not_null_agg_hourly_total_sales_order_date.3f19fbb9cc": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.not_null_agg_hourly_total_sales_hour_of_day.1d078c6715": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_total_sales_hour_of_day__23__0.a164d43343": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_total_items_ordered_per_hour___0.a6ec55afbf": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_total_revenue_per_hour___0.b50fc0b8bb": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_item_per_hour___0.2da1f4aa0c": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_item_per_hour___total_revenue_per_hour.92ca689742": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_total_sales_pct_food_revenue_per_hour__1__0.d3cf0985ff": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_total_sales_pct_drink_revenue_per_hour__1__0.6205b4143a": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_top_category_revenue_per_hour___0.6b3387f990": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_top_category_revenue_per_hour___total_revenue_per_hour.a785668cfe": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_total_sales_pct_top_cat_of_total_revenue_per_hour__1__0.e9c1cb9011": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_distinct_tables_per_hour___0.7b7e4b646d": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_distinct_tables_per_hour___50.0ba73e9b1e": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_total_new_customers_per_hour___0.05f359783c": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_head_per_hour___0.d9780ac8b5": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_items_ordered_per_head_per_hour___0.9e7dc2a3af": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_total_orders_per_hour___0.dbaea66183": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_order_per_hour___0.6291f71cf1": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_order_per_hour___total_revenue_per_hour.25d1529a32": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_items_per_order_per_hour___1.c414496d06": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_items_per_order_per_hour___total_items_ordered_per_hour.f026e27c1b": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_unique_items_ordered_per_hour___0.b1f25f6421": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_category_diversity_per_hour___1.e51151b9dc": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.accepted_values_agg_hourly_total_sales_is_weekend__False__True__False.c8919b8fab": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.accepted_values_agg_hourly_total_sales_is_peak_hour__False__True__False.a383e22e95": ["model.restaurant_data_analytics.agg_hourly_total_sales"], "test.restaurant_data_analytics.not_null_agg_daily_food_sales_order_date.1329693b01": ["model.restaurant_data_analytics.agg_daily_food_sales"], "test.restaurant_data_analytics.unique_agg_daily_food_sales_order_date.e87d78ab38": ["model.restaurant_data_analytics.agg_daily_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_total_food_items_sold_all_day___0.e94072a7cb": ["model.restaurant_data_analytics.agg_daily_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_total_daily_food_revenue___0.675f634dc2": ["model.restaurant_data_analytics.agg_daily_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_daily_revenue_per_food_item___0.0a2459d06e": ["model.restaurant_data_analytics.agg_daily_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_food_category_diversity_all_day___0.b5412e1e33": ["model.restaurant_data_analytics.agg_daily_food_sales"], "test.restaurant_data_analytics.accepted_values_agg_daily_food_sales_top_daily_food_category_name__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters.b33fb8893d": ["model.restaurant_data_analytics.agg_daily_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_top_daily_food_category_revenue___0.f8dcedd1db": ["model.restaurant_data_analytics.agg_daily_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_top_daily_food_category_revenue___total_daily_food_revenue.0cd87cbf08": ["model.restaurant_data_analytics.agg_daily_food_sales"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_food_sales_pct_top_food_cat_from_daily_food_revenue__1__0.794f2beb78": ["model.restaurant_data_analytics.agg_daily_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_distinct_food_tables_all_day___0.d18f978716": ["model.restaurant_data_analytics.agg_daily_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_total_food_orders_all_day___0.6ef55829f2": ["model.restaurant_data_analytics.agg_daily_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_revenue_per_food_order_all_day___0.2e1f57b14e": ["model.restaurant_data_analytics.agg_daily_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_revenue_per_food_order_all_day___total_daily_food_revenue.f0b464756f": ["model.restaurant_data_analytics.agg_daily_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_items_per_food_order_all_day___1.aa27ff7b31": ["model.restaurant_data_analytics.agg_daily_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_items_per_food_order_all_day___total_food_items_sold_all_day.0ddf9da8c2": ["model.restaurant_data_analytics.agg_daily_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_total_customers_all_day___0.839c694190": ["model.restaurant_data_analytics.agg_daily_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_revenue_per_head_all_day___0.91a6d5c72f": ["model.restaurant_data_analytics.agg_daily_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_revenue_per_head_all_day___total_daily_food_revenue.a81083db0e": ["model.restaurant_data_analytics.agg_daily_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_items_per_head_all_day___0.1013ce16d7": ["model.restaurant_data_analytics.agg_daily_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_items_per_head_all_day___total_food_items_sold_all_day.5655082675": ["model.restaurant_data_analytics.agg_daily_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_unique_food_items_ordered_all_day___0.3716d579f5": ["model.restaurant_data_analytics.agg_daily_food_sales"], "test.restaurant_data_analytics.accepted_values_agg_daily_food_sales_is_weekend__False__True__False.4a2a5dc77c": ["model.restaurant_data_analytics.agg_daily_food_sales"], "test.restaurant_data_analytics.not_null_agg_daily_drink_sales_order_date.a15b02f884": ["model.restaurant_data_analytics.agg_daily_drink_sales"], "test.restaurant_data_analytics.unique_agg_daily_drink_sales_order_date.37388b3ec8": ["model.restaurant_data_analytics.agg_daily_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_total_drink_items_ordered_all_day___0.0a862aa1bf": ["model.restaurant_data_analytics.agg_daily_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_total_daily_drink_revenue___0.999b27f967": ["model.restaurant_data_analytics.agg_daily_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_daily_revenue_per_drink_item___0.64a7e65dd8": ["model.restaurant_data_analytics.agg_daily_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_drink_category_diversity_all_day___0.841422b2c0": ["model.restaurant_data_analytics.agg_daily_drink_sales"], "test.restaurant_data_analytics.accepted_values_agg_daily_drink_sales_top_daily_drink_category_name__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy.947a6cc3bc": ["model.restaurant_data_analytics.agg_daily_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_top_daily_drink_category_revenue___0.10b8e32fdf": ["model.restaurant_data_analytics.agg_daily_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_top_daily_drink_category_revenue___total_daily_drink_revenue.f566520520": ["model.restaurant_data_analytics.agg_daily_drink_sales"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_drink_sales_pct_top_drink_cat_from_daily_drink_revenue__1__0.d43351dfda": ["model.restaurant_data_analytics.agg_daily_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_distinct_drink_tables_all_day___0.2f1ed6c9dd": ["model.restaurant_data_analytics.agg_daily_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_total_drink_orders_all_day___0.0a5caa04e6": ["model.restaurant_data_analytics.agg_daily_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_revenue_per_drink_order_all_day___0.f3b66c426d": ["model.restaurant_data_analytics.agg_daily_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_revenue_per_drink_order_all_day___total_daily_drink_revenue.9cec8cd318": ["model.restaurant_data_analytics.agg_daily_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_items_per_drink_order_all_day___1.55f81a3337": ["model.restaurant_data_analytics.agg_daily_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_items_per_drink_order_all_day___total_drink_items_ordered_all_day.616d1ab7c6": ["model.restaurant_data_analytics.agg_daily_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_total_customers_all_day___0.3614fd7ba9": ["model.restaurant_data_analytics.agg_daily_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_revenue_per_head_all_day___0.730a042cc8": ["model.restaurant_data_analytics.agg_daily_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_revenue_per_head_all_day___total_daily_drink_revenue.603e0aaab5": ["model.restaurant_data_analytics.agg_daily_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_items_per_head_all_day___0.6dbb5186b7": ["model.restaurant_data_analytics.agg_daily_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_items_per_head_all_day___total_drink_items_ordered_all_day.acc5590b4b": ["model.restaurant_data_analytics.agg_daily_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_unique_drink_items_ordered_all_day___0.9c7b482cea": ["model.restaurant_data_analytics.agg_daily_drink_sales"], "test.restaurant_data_analytics.accepted_values_agg_daily_drink_sales_is_weekend__False__True__False.b218e14f76": ["model.restaurant_data_analytics.agg_daily_drink_sales"], "test.restaurant_data_analytics.not_null_agg_daily_total_sales_order_date.30f5911338": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.unique_agg_daily_total_sales_order_date.25284edde9": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_total_sales_day_of_week__7__1.2a85a6b60a": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_total_items_ordered_all_day___0.a9751926bd": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_total_daily_revenue___0.97f8e801b5": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_revenue_per_item_daily___0.0a799e5a02": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_total_sales_pct_food_from_daily_revenue__1__0.7d0a52baea": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_total_sales_pct_drink_from_daily_revenue__1__0.2b7a44dd8f": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_top_daily_category_revenue___0.fd396355d4": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_top_daily_category_revenue___total_daily_revenue.df013c83bf": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_total_sales_pct_top_cat_of_total_daily_revenue__1__0.2ff363d3b5": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_pct_top_cat_of_total_daily_revenue___1.a09bb8f229": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_total_daily_customers___0.80895610fe": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_daily_revenue_per_head___0.243d003451": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_daily_revenue_per_head___total_daily_revenue.414af5654e": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_ordered_per_head_per_day___0.a0dbf27d44": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_ordered_per_head_per_day___total_items_ordered_all_day.7fb1a4a554": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_total_orders_all_day___0.f985e839f1": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_per_order_all_day___0.803711bc28": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_per_order_all_day___total_items_ordered_all_day.5d4e1eff4e": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_revenue_per_order_all_day___0.4f58090e30": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_revenue_per_order_all_day___total_daily_revenue.a17649f776": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_unique_items_ordered_all_day___0.999c2652e5": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_category_diversity_all_day___0.1ca659ed1c": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_distinct_tables_used_all_day___0.05fe3c453a": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.accepted_values_agg_daily_total_sales_is_weekend__False__True__False.3f08010b07": ["model.restaurant_data_analytics.agg_daily_total_sales"], "test.restaurant_data_analytics.not_null_agg_weekly_food_sales_order_week.25a819365a": ["model.restaurant_data_analytics.agg_weekly_food_sales"], "test.restaurant_data_analytics.unique_agg_weekly_food_sales_order_week.f274cc1360": ["model.restaurant_data_analytics.agg_weekly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_total_food_items_sold_weekly___0.d5463b5b57": ["model.restaurant_data_analytics.agg_weekly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_total_weekly_food_revenue___0.d283f147f3": ["model.restaurant_data_analytics.agg_weekly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_weekly_revenue_per_food_item___0.2c5a59df89": ["model.restaurant_data_analytics.agg_weekly_food_sales"], "test.restaurant_data_analytics.accepted_values_agg_weekly_food_sales_top_weekly_food_category_name__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters.64b09e1561": ["model.restaurant_data_analytics.agg_weekly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_top_weekly_food_category_revenue___0.d706ee86c0": ["model.restaurant_data_analytics.agg_weekly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_top_weekly_food_category_revenue___total_weekly_food_revenue.40453a3f2f": ["model.restaurant_data_analytics.agg_weekly_food_sales"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_food_sales_pct_top_food_cat_from_weekly_food_revenue__1__0.365a4895df": ["model.restaurant_data_analytics.agg_weekly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_distinct_food_tables_per_day_weekly___0.c84314490e": ["model.restaurant_data_analytics.agg_weekly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_total_food_orders_weekly___0.58a3404295": ["model.restaurant_data_analytics.agg_weekly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_revenue_per_food_order_weekly___0.0132a4f6c4": ["model.restaurant_data_analytics.agg_weekly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_revenue_per_food_order_weekly___total_weekly_food_revenue.ca3cb0a3a7": ["model.restaurant_data_analytics.agg_weekly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_items_per_food_order_weekly___0.0c61762bec": ["model.restaurant_data_analytics.agg_weekly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_items_per_food_order_weekly___total_food_items_sold_weekly.e2850116ab": ["model.restaurant_data_analytics.agg_weekly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_total_customers_weekly___0.b00ced16e6": ["model.restaurant_data_analytics.agg_weekly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_revenue_per_head_weekly___0.50fa490211": ["model.restaurant_data_analytics.agg_weekly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_revenue_per_head_weekly___total_weekly_food_revenue.e067f7bbb2": ["model.restaurant_data_analytics.agg_weekly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_items_per_head_weekly___0.1d347bf445": ["model.restaurant_data_analytics.agg_weekly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_items_per_head_weekly___total_food_items_sold_weekly.318280b408": ["model.restaurant_data_analytics.agg_weekly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_food_category_diversity_weekly___0.edb6aeaed1": ["model.restaurant_data_analytics.agg_weekly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_unique_food_items_ordered_weekly___0.290f16a81a": ["model.restaurant_data_analytics.agg_weekly_food_sales"], "test.restaurant_data_analytics.not_null_agg_weekly_drink_sales_order_week.5938019729": ["model.restaurant_data_analytics.agg_weekly_drink_sales"], "test.restaurant_data_analytics.unique_agg_weekly_drink_sales_order_week.ca32244b37": ["model.restaurant_data_analytics.agg_weekly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_total_drink_items_sold_weekly___0.029ac1d01c": ["model.restaurant_data_analytics.agg_weekly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_total_weekly_drink_revenue___0.4e8f3101f5": ["model.restaurant_data_analytics.agg_weekly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_weekly_revenue_per_drink_item___0.86d5dfbd30": ["model.restaurant_data_analytics.agg_weekly_drink_sales"], "test.restaurant_data_analytics.accepted_values_agg_weekly_drink_sales_top_weekly_drink_category_name__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy.cdf9d9f4f1": ["model.restaurant_data_analytics.agg_weekly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_top_weekly_drink_category_revenue___0.5a8808ee7f": ["model.restaurant_data_analytics.agg_weekly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_top_weekly_drink_category_revenue___total_weekly_drink_revenue.67fe76cbce": ["model.restaurant_data_analytics.agg_weekly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_drink_sales_pct_top_drink_cat_from_weekly_drink_revenue__1__0.85a532dcc0": ["model.restaurant_data_analytics.agg_weekly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_distinct_drink_tables_per_day_weekly___0.f7d3c3caa8": ["model.restaurant_data_analytics.agg_weekly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_total_drink_orders_weekly___0.89fcff72dc": ["model.restaurant_data_analytics.agg_weekly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_revenue_per_drink_order_weekly___0.9f262fe41f": ["model.restaurant_data_analytics.agg_weekly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_revenue_per_drink_order_weekly___total_weekly_drink_revenue.949dd447b7": ["model.restaurant_data_analytics.agg_weekly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_items_per_drink_order_weekly___0.10253eff42": ["model.restaurant_data_analytics.agg_weekly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_items_per_drink_order_weekly___total_drink_items_sold_weekly.bd03606c80": ["model.restaurant_data_analytics.agg_weekly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_total_customers_weekly___0.95963f5647": ["model.restaurant_data_analytics.agg_weekly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_revenue_per_head_weekly___0.5f892929b2": ["model.restaurant_data_analytics.agg_weekly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_revenue_per_head_weekly___total_weekly_drink_revenue.9631b34c8b": ["model.restaurant_data_analytics.agg_weekly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_items_per_haed_weekly___0.c8cffabb92": ["model.restaurant_data_analytics.agg_weekly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_items_per_haed_weekly___total_drink_items_sold_weekly.6f9c841a8b": ["model.restaurant_data_analytics.agg_weekly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_drink_category_diversity_weekly___0.70f3b4ea29": ["model.restaurant_data_analytics.agg_weekly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_unique_drink_items_ordered_weekly___0.f1407f0393": ["model.restaurant_data_analytics.agg_weekly_drink_sales"], "test.restaurant_data_analytics.not_null_agg_weekly_total_sales_order_week.cdd5ee8945": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.unique_agg_weekly_total_sales_order_week.219fbdfbf9": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_total_items_ordered_weekly___0.73155e1e88": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_total_weekly_revenue___0.ce7b641f73": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_revenue_per_item_weekly___0.ae9684cdd7": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_category_diversity_weekly___0.6c9a732c42": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_top_weekly_category_revenue___0.dc832bb5be": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_top_weekly_category_revenue___total_weekly_revenue.ccb45074c3": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_total_sales_pct_food_from_weekly_revenue__1__0.820b22ed71": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_total_sales_pct_drink_from_weekly_revenue__1__0.5e0fb563eb": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_total_sales_pct_top_cat_of_total_weekly_revenue__1__0.03791cbfec": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_total_weekly_customers___0.b0b75fd34a": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_weekly_revenue_per_head___0.587120d32c": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_weekly_revenue_per_head___total_weekly_revenue.42e91454f3": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_ordered_per_head_weekly___0.07d5dbcd47": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_ordered_per_head_weekly___total_items_ordered_weekly.b2b0a0e409": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_total_orders_weekly___0.5ae1a4f6b8": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_per_order_weekly___0.c79e705419": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_per_order_weekly___total_items_ordered_weekly.d9cd7feced": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_revenue_per_order_weekly___0.5379b62377": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_revenue_per_order_weekly___total_weekly_revenue.df8ba52941": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_unique_items_ordered_weekly___0.ae03e2fda3": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_distinct_tables_per_day_weekly___0.960810e9aa": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_rolling_avg_revenue_4wk___0.9537536a2c": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_rolling_avg_items_sold_4wk___0.cedc5b3664": ["model.restaurant_data_analytics.agg_weekly_total_sales"], "test.restaurant_data_analytics.not_null_agg_monthly_food_sales_order_month.ba9fc09f09": ["model.restaurant_data_analytics.agg_monthly_food_sales"], "test.restaurant_data_analytics.unique_agg_monthly_food_sales_order_month.3bf0bfe60d": ["model.restaurant_data_analytics.agg_monthly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_total_food_items_sold_monthly___0.1ff43b23e7": ["model.restaurant_data_analytics.agg_monthly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_total_monthly_food_revenue___0.d89576f612": ["model.restaurant_data_analytics.agg_monthly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_monthly_revenue_per_food_item___0.68a278a88b": ["model.restaurant_data_analytics.agg_monthly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_monthly_revenue_per_food_item___total_monthly_food_revenue.81fdd42b50": ["model.restaurant_data_analytics.agg_monthly_food_sales"], "test.restaurant_data_analytics.accepted_values_agg_monthly_food_sales_top_monthly_food_category_name__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters.46f9cd5b81": ["model.restaurant_data_analytics.agg_monthly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_top_monthly_food_category_revenue___0.14bcbe442c": ["model.restaurant_data_analytics.agg_monthly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_top_monthly_food_category_revenue___total_monthly_food_revenue.c8d1ffb00c": ["model.restaurant_data_analytics.agg_monthly_food_sales"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_food_sales_pct_top_food_cat_from_monthly_food_revenue__1__0.07c126e482": ["model.restaurant_data_analytics.agg_monthly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_distinct_food_tables_per_day_monthly___0.b84988c81d": ["model.restaurant_data_analytics.agg_monthly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_total_food_orders_monthly___0.844f753d49": ["model.restaurant_data_analytics.agg_monthly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_revenue_per_food_order_monthly___0.750879b3d1": ["model.restaurant_data_analytics.agg_monthly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_revenue_per_food_order_monthly___total_monthly_food_revenue.b123784a03": ["model.restaurant_data_analytics.agg_monthly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_items_per_food_order_monthly___0.298cecd64a": ["model.restaurant_data_analytics.agg_monthly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_items_per_food_order_monthly___total_food_items_sold_monthly.2f74bd8c9e": ["model.restaurant_data_analytics.agg_monthly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_total_customers_monthly___0.58ca7d7d9e": ["model.restaurant_data_analytics.agg_monthly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_revenue_per_head_monthly___0.7ee2c7cf05": ["model.restaurant_data_analytics.agg_monthly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_revenue_per_head_monthly___total_monthly_food_revenue.174e9defe0": ["model.restaurant_data_analytics.agg_monthly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_items_per_head_monthly___0.2461b1d63c": ["model.restaurant_data_analytics.agg_monthly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_items_per_head_monthly___total_food_items_sold_monthly.477a6a2fca": ["model.restaurant_data_analytics.agg_monthly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_food_category_diversity_monthly___0.b74e692065": ["model.restaurant_data_analytics.agg_monthly_food_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_unique_food_items_ordered_monthly___0.a0c517fb3e": ["model.restaurant_data_analytics.agg_monthly_food_sales"], "test.restaurant_data_analytics.not_null_agg_monthly_drink_sales_order_month.d637a64958": ["model.restaurant_data_analytics.agg_monthly_drink_sales"], "test.restaurant_data_analytics.unique_agg_monthly_drink_sales_order_month.319cf0cf13": ["model.restaurant_data_analytics.agg_monthly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_total_drink_items_sold_monthly___0.a0a68903fd": ["model.restaurant_data_analytics.agg_monthly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_total_monthly_drink_revenue___0.29fee5e19e": ["model.restaurant_data_analytics.agg_monthly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_monthly_revenue_per_drink_item___0.ae46762f96": ["model.restaurant_data_analytics.agg_monthly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_monthly_revenue_per_drink_item___total_monthly_drink_revenue.0b375d7a1a": ["model.restaurant_data_analytics.agg_monthly_drink_sales"], "test.restaurant_data_analytics.accepted_values_agg_monthly_drink_sales_top_monthly_drink_category_name__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy.e9ff30fcb1": ["model.restaurant_data_analytics.agg_monthly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_top_monthly_drink_category_revenue___0.544c494439": ["model.restaurant_data_analytics.agg_monthly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_top_monthly_drink_category_revenue___total_monthly_drink_revenue.f7ff55af58": ["model.restaurant_data_analytics.agg_monthly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_drink_sales_pct_top_drink_cat_from_monthly_drinks_revenue__1__0.8a660dc628": ["model.restaurant_data_analytics.agg_monthly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_distinct_drink_tables_per_day_monthly___0.d7cb5d4d53": ["model.restaurant_data_analytics.agg_monthly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_total_drink_orders_monthly___0.aba693124d": ["model.restaurant_data_analytics.agg_monthly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_revenue_per_drinks_order_monthly___0.437465dbf8": ["model.restaurant_data_analytics.agg_monthly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_revenue_per_drinks_order_monthly___total_monthly_drink_revenue.358e708571": ["model.restaurant_data_analytics.agg_monthly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_items_per_drinks_order_monthly___1.f0b829bc3b": ["model.restaurant_data_analytics.agg_monthly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_items_per_drinks_order_monthly___total_drink_items_sold_monthly.ff447dc7ce": ["model.restaurant_data_analytics.agg_monthly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_total_customers_monthly___0.a585e5c44e": ["model.restaurant_data_analytics.agg_monthly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drinks_revenue_per_head_monthly___0.bc9852b7ff": ["model.restaurant_data_analytics.agg_monthly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drinks_revenue_per_head_monthly___total_monthly_drink_revenue.239e569194": ["model.restaurant_data_analytics.agg_monthly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drink_items_per_head_monthly___0.566b981669": ["model.restaurant_data_analytics.agg_monthly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drink_items_per_head_monthly___total_drink_items_sold_monthly.1c96391e40": ["model.restaurant_data_analytics.agg_monthly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_drink_category_diversity_monthly___0.6fd0308aab": ["model.restaurant_data_analytics.agg_monthly_drink_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_unique_drink_items_ordered_monthly___0.709e843536": ["model.restaurant_data_analytics.agg_monthly_drink_sales"], "test.restaurant_data_analytics.not_null_agg_monthly_total_sales_order_month.4a7866b528": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.unique_agg_monthly_total_sales_order_month.3393fa5406": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_total_items_ordered_monthly___0.a682889021": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_total_monthly_revenue___0.99855eb949": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_item_monthly___0.4811754c19": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_item_monthly___total_monthly_revenue.5a8878dc6b": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_category_diversity_monthly___0.c1414dac5f": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_top_monthly_category_revenue___0.bf12b281dc": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_top_monthly_category_revenue___total_monthly_revenue.43f14c9bbd": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_total_sales_pct_food_from_monthly_revenue__1__0.23ed9482de": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_total_sales_pct_drink_from_monthly_revenue__1__0.878750343a": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_total_sales_pct_top_cat_of_total_monthly_revenue__1__0.2218cb4677": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_total_monthly_customers___0.e29c7f5803": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_monthly_revenue_per_head___0.446f45d0be": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_monthly_revenue_per_head___total_monthly_revenue.8bef2fada4": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_ordered_per_head_monthly___0.e1cfa72b9c": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_ordered_per_head_monthly___total_items_ordered_monthly.a1e1950805": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_total_orders_monthly___0.dcfb1f4451": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_per_order_monthly___1.9c95b67c0e": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_per_order_monthly___total_items_ordered_monthly.9838ff2afb": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_order_monthly___0.f7303eda9e": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_order_monthly___total_monthly_revenue.7b2f552b61": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_unique_items_ordered_monthly___0.f9b73669ce": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_distinct_tables_per_day_monthly___0.f0590f7000": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_rolling_avg_revenue_3mo___0.e9be1783bc": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_rolling_avg_items_sold_3mo___0.9ea6bec03b": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_weekend_days_in_month___0.562dbe12a0": ["model.restaurant_data_analytics.agg_monthly_total_sales"], "test.restaurant_data_analytics.not_null_dim_time_datetime_ordered.cbec1c07f1": ["model.restaurant_data_analytics.dim_time"], "test.restaurant_data_analytics.unique_dim_time_datetime_ordered.177af51b2a": ["model.restaurant_data_analytics.dim_time"], "test.restaurant_data_analytics.not_null_stg_a_la_carte_menu_item_uuid.bc2025dfa2": ["model.restaurant_data_analytics.stg_a_la_carte_menu"], "test.restaurant_data_analytics.unique_stg_a_la_carte_menu_item_uuid.a16abef12e": ["model.restaurant_data_analytics.stg_a_la_carte_menu"], "test.restaurant_data_analytics.not_null_stg_a_la_carte_menu_item_name.36ae67ce39": ["model.restaurant_data_analytics.stg_a_la_carte_menu"], "test.restaurant_data_analytics.not_null_stg_a_la_carte_menu_category.37817551cf": ["model.restaurant_data_analytics.stg_a_la_carte_menu"], "test.restaurant_data_analytics.not_null_stg_cocktails_and_beer_menu_item_uuid.69972c6fe3": ["model.restaurant_data_analytics.stg_cocktails_and_beer_menu"], "test.restaurant_data_analytics.unique_stg_cocktails_and_beer_menu_item_uuid.1036d05d9f": ["model.restaurant_data_analytics.stg_cocktails_and_beer_menu"], "test.restaurant_data_analytics.not_null_stg_cocktails_and_beer_menu_item_name.b14f64b4a7": ["model.restaurant_data_analytics.stg_cocktails_and_beer_menu"], "test.restaurant_data_analytics.not_null_stg_cocktails_and_beer_menu_category.59e7e90b4d": ["model.restaurant_data_analytics.stg_cocktails_and_beer_menu"], "test.restaurant_data_analytics.not_null_stg_dessert_menu_item_uuid.5100194b40": ["model.restaurant_data_analytics.stg_dessert_menu"], "test.restaurant_data_analytics.unique_stg_dessert_menu_item_uuid.a3fb86a75b": ["model.restaurant_data_analytics.stg_dessert_menu"], "test.restaurant_data_analytics.not_null_stg_dessert_menu_item_name.bc9a182538": ["model.restaurant_data_analytics.stg_dessert_menu"], "test.restaurant_data_analytics.not_null_stg_dessert_menu_category.84e31519c2": ["model.restaurant_data_analytics.stg_dessert_menu"], "test.restaurant_data_analytics.not_null_stg_wine_menu_item_uuid.141c870ced": ["model.restaurant_data_analytics.stg_wine_menu"], "test.restaurant_data_analytics.unique_stg_wine_menu_item_uuid.ddca70a303": ["model.restaurant_data_analytics.stg_wine_menu"], "test.restaurant_data_analytics.not_null_stg_wine_menu_item_name.275c234874": ["model.restaurant_data_analytics.stg_wine_menu"], "test.restaurant_data_analytics.not_null_stg_wine_menu_category.dea98b2bd0": ["model.restaurant_data_analytics.stg_wine_menu"], "test.restaurant_data_analytics.not_null_stg_orders_item_ordered_id.abffa82b2b": ["model.restaurant_data_analytics.stg_orders"], "test.restaurant_data_analytics.unique_stg_orders_item_ordered_id.371219fd6d": ["model.restaurant_data_analytics.stg_orders"], "test.restaurant_data_analytics.not_null_stg_orders_item_uuid.954a22771b": ["model.restaurant_data_analytics.stg_orders"], "test.restaurant_data_analytics.relationships_stg_orders_item_uuid__item_uuid__ref_dim_menu_items_.b2c69889e6": ["model.restaurant_data_analytics.dim_menu_items", "model.restaurant_data_analytics.stg_orders"], "source.restaurant_data_analytics.restaurant_data.orders": [], "source.restaurant_data_analytics.restaurant_data.a_la_carte_menu": [], "source.restaurant_data_analytics.restaurant_data.cocktails_and_beer_menu": [], "source.restaurant_data_analytics.restaurant_data.dessert_menu": [], "source.restaurant_data_analytics.restaurant_data.wine_menu": []}, "child_map": {"model.restaurant_data_analytics.dim_menu_items": ["model.restaurant_data_analytics.agg_category_performance", "model.restaurant_data_analytics.agg_item_performance_mo", "model.restaurant_data_analytics.agg_item_performance_total", "model.restaurant_data_analytics.agg_item_performance_wk", "model.restaurant_data_analytics.fct_orders", "test.restaurant_data_analytics.accepted_values_dim_menu_items_category__Bordeaux__Champagne_Sparkling__Dessert_Wines__Port_Sherry__Rarities__Red_Wines__Rose_Wines__White_Wines__Cheese__The_Sacred_Six__Ultimate_Steakhouse_Cocktails__Time_A_Place__Lo_No_Alc__Beers_Cider__Starters__Mains__Large_Cuts__Steaks__Sauces__Extras__Sides__Burgundy__Magnums__Puddings__Ice_Cream_Sorbet__Chocolates.cf6c12d38a", "test.restaurant_data_analytics.not_null_dim_menu_items_category.69523848c3", "test.restaurant_data_analytics.not_null_dim_menu_items_is_priced_per_weight.d487175596", "test.restaurant_data_analytics.not_null_dim_menu_items_item_name.5271b11418", "test.restaurant_data_analytics.not_null_dim_menu_items_item_uuid.774c582c18", "test.restaurant_data_analytics.not_null_dim_menu_items_menu_source.e5d551a7f0", "test.restaurant_data_analytics.not_null_dim_menu_items_price.1ac5d639c4", "test.restaurant_data_analytics.relationships_agg_item_performance_total_item_uuid__item_uuid__ref_dim_menu_items_.ec00fe5960", "test.restaurant_data_analytics.relationships_fct_orders_item_uuid__item_uuid__ref_dim_menu_items_.f9ec88fbee", "test.restaurant_data_analytics.relationships_stg_orders_item_uuid__item_uuid__ref_dim_menu_items_.b2c69889e6", "test.restaurant_data_analytics.unique_dim_menu_items_item_uuid.bd08cb1ca7"], "model.restaurant_data_analytics.fct_orders": ["model.restaurant_data_analytics.agg_category_performance", "model.restaurant_data_analytics.agg_customer_counts", "model.restaurant_data_analytics.agg_daily_metadata", "model.restaurant_data_analytics.agg_hourly_drink_sales", "model.restaurant_data_analytics.agg_hourly_food_sales", "model.restaurant_data_analytics.agg_item_performance_mo", "model.restaurant_data_analytics.agg_item_performance_total", "model.restaurant_data_analytics.agg_item_performance_wk", "model.restaurant_data_analytics.agg_monthly_metadata", "model.restaurant_data_analytics.agg_weekly_metadata", "model.restaurant_data_analytics.dim_time", "test.restaurant_data_analytics.accepted_values_fct_orders_menu_source__a_la_carte__wine__dessert__cocktails_and_beer.f09ddd97a4", "test.restaurant_data_analytics.accepted_values_fct_orders_order_weekday__Monday__Tuesday__Wednesday__Thursday__Friday__Saturday__Sunday.14d53fa665", "test.restaurant_data_analytics.accepted_values_fct_orders_production_department__kitchen__bar.60bb7e44ff", "test.restaurant_data_analytics.dbt_utils_accepted_range_fct_orders_order_hour__23__0.3dddbd9d13", "test.restaurant_data_analytics.dbt_utils_accepted_range_fct_orders_quantity__50__1.2dc70d2c12", "test.restaurant_data_analytics.not_null_fct_orders_category.0a620c476d", "test.restaurant_data_analytics.not_null_fct_orders_datetime_ordered.aacf1c2eea", "test.restaurant_data_analytics.not_null_fct_orders_item_name.b425bb9ffe", "test.restaurant_data_analytics.not_null_fct_orders_item_ordered_id.1a48e4de0a", "test.restaurant_data_analytics.not_null_fct_orders_item_uuid.145ea3a0c1", "test.restaurant_data_analytics.not_null_fct_orders_menu_source.ab9cf8e7bc", "test.restaurant_data_analytics.not_null_fct_orders_order_date.84f0a76362", "test.restaurant_data_analytics.not_null_fct_orders_order_hour.385ba97c83", "test.restaurant_data_analytics.not_null_fct_orders_order_uuid.9e38b191ab", "test.restaurant_data_analytics.not_null_fct_orders_order_weekday.d374011ab1", "test.restaurant_data_analytics.not_null_fct_orders_price.5983e7e539", "test.restaurant_data_analytics.not_null_fct_orders_production_department.6b5c746240", "test.restaurant_data_analytics.not_null_fct_orders_quantity.f754434156", "test.restaurant_data_analytics.not_null_fct_orders_table_no.d78c6ee39c", "test.restaurant_data_analytics.not_null_fct_orders_total_item_revenue.eb686692f4", "test.restaurant_data_analytics.relationships_fct_orders_item_uuid__item_uuid__ref_dim_menu_items_.f9ec88fbee", "test.restaurant_data_analytics.unique_fct_orders_item_ordered_id.43ff115a40"], "model.restaurant_data_analytics.agg_customer_counts": ["model.restaurant_data_analytics.agg_hourly_drink_sales", "model.restaurant_data_analytics.agg_hourly_food_sales"], "model.restaurant_data_analytics.agg_category_performance": ["test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_avg_price___0_.073766ce7d", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_avg_price_per_unit___0_.05c884321e", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_total_revenue_30d___0_.c315b16e27", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_total_revenue_7d___0.bba097983c", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_total_units_sold_30d___0_.8f3fe48be0", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_total_units_sold_7d___0_.2adb4a1d35", "test.restaurant_data_analytics.not_null_agg_category_performance_avg_price.51b124e7fa", "test.restaurant_data_analytics.not_null_agg_category_performance_avg_price_per_unit.d1c50d715f", "test.restaurant_data_analytics.not_null_agg_category_performance_category.a23d4da1b4", "test.restaurant_data_analytics.not_null_agg_category_performance_menu_source.1bad3d7d85"], "model.restaurant_data_analytics.agg_item_performance_mo": [], "model.restaurant_data_analytics.agg_item_performance_total": ["test.restaurant_data_analytics.accepted_values_agg_item_performance_total_menu_source__a_la_carte__wine__dessert__cocktails_and_beer.4e060d3546", "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_item_performance_total_avg_order_hour__24__0.181d79d065", "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_item_performance_total_percent_of_total_sales__100__0.4490803867", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_item_performance_total_total_revenue___0_.8157fc0670", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_item_performance_total_total_units_sold___0_.aaffeb542c", "test.restaurant_data_analytics.not_null_agg_item_performance_total_item_category.bd180f74c3", "test.restaurant_data_analytics.not_null_agg_item_performance_total_item_name.09051f6158", "test.restaurant_data_analytics.not_null_agg_item_performance_total_item_uuid.d59af4ffe7", "test.restaurant_data_analytics.not_null_agg_item_performance_total_menu_source.fdb34fbd23", "test.restaurant_data_analytics.not_null_agg_item_performance_total_percent_of_total_sales.a03d3d8905", "test.restaurant_data_analytics.not_null_agg_item_performance_total_total_revenue.210bfcd51f", "test.restaurant_data_analytics.not_null_agg_item_performance_total_total_units_sold.411c818a19", "test.restaurant_data_analytics.relationships_agg_item_performance_total_item_uuid__item_uuid__ref_dim_menu_items_.ec00fe5960"], "model.restaurant_data_analytics.agg_item_performance_wk": [], "model.restaurant_data_analytics.agg_daily_drink_sales": ["model.restaurant_data_analytics.agg_daily_total_sales", "model.restaurant_data_analytics.agg_monthly_drink_sales", "model.restaurant_data_analytics.agg_weekly_drink_sales", "test.restaurant_data_analytics.accepted_values_agg_daily_drink_sales_is_weekend__False__True__False.b218e14f76", "test.restaurant_data_analytics.accepted_values_agg_daily_drink_sales_top_daily_drink_category_name__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy.947a6cc3bc", "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_drink_sales_pct_top_drink_cat_from_daily_drink_revenue__1__0.d43351dfda", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_daily_revenue_per_drink_item___0.64a7e65dd8", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_items_per_head_all_day___0.6dbb5186b7", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_items_per_head_all_day___total_drink_items_ordered_all_day.acc5590b4b", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_revenue_per_head_all_day___0.730a042cc8", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_revenue_per_head_all_day___total_daily_drink_revenue.603e0aaab5", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_items_per_drink_order_all_day___1.55f81a3337", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_items_per_drink_order_all_day___total_drink_items_ordered_all_day.616d1ab7c6", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_revenue_per_drink_order_all_day___0.f3b66c426d", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_revenue_per_drink_order_all_day___total_daily_drink_revenue.9cec8cd318", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_distinct_drink_tables_all_day___0.2f1ed6c9dd", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_drink_category_diversity_all_day___0.841422b2c0", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_top_daily_drink_category_revenue___0.10b8e32fdf", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_top_daily_drink_category_revenue___total_daily_drink_revenue.f566520520", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_total_customers_all_day___0.3614fd7ba9", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_total_daily_drink_revenue___0.999b27f967", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_total_drink_items_ordered_all_day___0.0a862aa1bf", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_total_drink_orders_all_day___0.0a5caa04e6", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_unique_drink_items_ordered_all_day___0.9c7b482cea", "test.restaurant_data_analytics.not_null_agg_daily_drink_sales_order_date.a15b02f884", "test.restaurant_data_analytics.unique_agg_daily_drink_sales_order_date.37388b3ec8"], "model.restaurant_data_analytics.agg_daily_food_sales": ["model.restaurant_data_analytics.agg_daily_total_sales", "model.restaurant_data_analytics.agg_monthly_food_sales", "model.restaurant_data_analytics.agg_weekly_food_sales", "test.restaurant_data_analytics.accepted_values_agg_daily_food_sales_is_weekend__False__True__False.4a2a5dc77c", "test.restaurant_data_analytics.accepted_values_agg_daily_food_sales_top_daily_food_category_name__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters.b33fb8893d", "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_food_sales_pct_top_food_cat_from_daily_food_revenue__1__0.794f2beb78", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_daily_revenue_per_food_item___0.0a2459d06e", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_items_per_head_all_day___0.1013ce16d7", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_items_per_head_all_day___total_food_items_sold_all_day.5655082675", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_revenue_per_head_all_day___0.91a6d5c72f", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_revenue_per_head_all_day___total_daily_food_revenue.a81083db0e", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_items_per_food_order_all_day___1.aa27ff7b31", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_items_per_food_order_all_day___total_food_items_sold_all_day.0ddf9da8c2", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_revenue_per_food_order_all_day___0.2e1f57b14e", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_revenue_per_food_order_all_day___total_daily_food_revenue.f0b464756f", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_distinct_food_tables_all_day___0.d18f978716", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_food_category_diversity_all_day___0.b5412e1e33", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_top_daily_food_category_revenue___0.f8dcedd1db", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_top_daily_food_category_revenue___total_daily_food_revenue.0cd87cbf08", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_total_customers_all_day___0.839c694190", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_total_daily_food_revenue___0.675f634dc2", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_total_food_items_sold_all_day___0.e94072a7cb", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_total_food_orders_all_day___0.6ef55829f2", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_unique_food_items_ordered_all_day___0.3716d579f5", "test.restaurant_data_analytics.not_null_agg_daily_food_sales_order_date.1329693b01", "test.restaurant_data_analytics.unique_agg_daily_food_sales_order_date.e87d78ab38"], "model.restaurant_data_analytics.agg_daily_total_sales": ["test.restaurant_data_analytics.accepted_values_agg_daily_total_sales_is_weekend__False__True__False.3f08010b07", "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_total_sales_day_of_week__7__1.2a85a6b60a", "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_total_sales_pct_drink_from_daily_revenue__1__0.2b7a44dd8f", "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_total_sales_pct_food_from_daily_revenue__1__0.7d0a52baea", "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_total_sales_pct_top_cat_of_total_daily_revenue__1__0.2ff363d3b5", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_daily_revenue_per_head___0.243d003451", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_daily_revenue_per_head___total_daily_revenue.414af5654e", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_ordered_per_head_per_day___0.a0dbf27d44", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_ordered_per_head_per_day___total_items_ordered_all_day.7fb1a4a554", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_per_order_all_day___0.803711bc28", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_per_order_all_day___total_items_ordered_all_day.5d4e1eff4e", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_revenue_per_item_daily___0.0a799e5a02", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_revenue_per_order_all_day___0.4f58090e30", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_revenue_per_order_all_day___total_daily_revenue.a17649f776", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_category_diversity_all_day___0.1ca659ed1c", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_distinct_tables_used_all_day___0.05fe3c453a", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_pct_top_cat_of_total_daily_revenue___1.a09bb8f229", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_top_daily_category_revenue___0.fd396355d4", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_top_daily_category_revenue___total_daily_revenue.df013c83bf", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_total_daily_customers___0.80895610fe", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_total_daily_revenue___0.97f8e801b5", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_total_items_ordered_all_day___0.a9751926bd", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_total_orders_all_day___0.f985e839f1", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_unique_items_ordered_all_day___0.999c2652e5", "test.restaurant_data_analytics.not_null_agg_daily_total_sales_order_date.30f5911338", "test.restaurant_data_analytics.unique_agg_daily_total_sales_order_date.25284edde9"], "model.restaurant_data_analytics.agg_hourly_drink_sales": ["model.restaurant_data_analytics.agg_daily_drink_sales", "model.restaurant_data_analytics.agg_hourly_total_sales", "test.restaurant_data_analytics.accepted_values_agg_hourly_drink_sales_is_bar_peak_hour__False__True__False.af5c5a9a75", "test.restaurant_data_analytics.accepted_values_agg_hourly_drink_sales_is_weekend__False__True__False.8f4747307c", "test.restaurant_data_analytics.accepted_values_agg_hourly_drink_sales_top_drink_category_name_per_hour__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy.261d498c1b", "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_drink_sales_hour_of_day__23__0.3e29f6efcf", "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_drink_sales_pct_top_drink_cat_of_drink_revenue_per_hour__1__0.e57c775c7b", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_items_per_head_per_hour___0.dfaaa0fa7a", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_items_per_head_per_hour___total_drink_items_ordered_per_hour.812f1ef606", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_revenue_per_head_per_hour___0.cc50bd090d", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_revenue_per_head_per_hour___total_drink_revenue_per_hour.8ee23b6bc6", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_items_per_drink_order_per_hour___1.d4e4c2e2a0", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_items_per_drink_order_per_hour___total_drink_items_ordered_per_hour.f3e179be57", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_item_per_hour___0.023de2042a", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_item_per_hour___total_drink_revenue_per_hour.afdadd8a60", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_order_per_hour___0.3fed9674e6", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_order_per_hour___total_drink_revenue_per_hour.93e1f9af63", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_distinct_drink_tables_per_hour___0.7e82d1f7eb", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_distinct_drink_tables_per_hour___50.46da344194", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_drink_category_diversity_per_hour___0.5fdb5ba869", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_top_drink_category_revenue_per_hour___0.786b3bbdfa", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_top_drink_category_revenue_per_hour___total_drink_revenue_per_hour.65074ddea5", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_total_drink_items_ordered_per_hour___0.3450c2e2d6", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_total_drink_orders_per_hour___0.5ad7584efe", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_total_drink_revenue_per_hour___0.573915afdc", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_unique_drink_items_ordered_per_hour___0.9462412e98", "test.restaurant_data_analytics.not_null_agg_hourly_drink_sales_hour_of_day.2583d9df37", "test.restaurant_data_analytics.not_null_agg_hourly_drink_sales_order_date.0de88677a0", "test.restaurant_data_analytics.not_null_agg_hourly_drink_sales_order_hour_dt.261b9a4fe9", "test.restaurant_data_analytics.unique_agg_hourly_drink_sales_order_hour_dt.4361589091"], "model.restaurant_data_analytics.agg_hourly_food_sales": ["model.restaurant_data_analytics.agg_daily_food_sales", "model.restaurant_data_analytics.agg_hourly_total_sales", "test.restaurant_data_analytics.accepted_values_agg_hourly_food_sales_is_kitchen_peak_hour__False__True__False.8f523c339e", "test.restaurant_data_analytics.accepted_values_agg_hourly_food_sales_is_weekend__False__True__False.1e07b9297e", "test.restaurant_data_analytics.accepted_values_agg_hourly_food_sales_top_food_category_name_per_hour__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters.7e80c0ef85", "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_food_sales_hour_of_day__23__0.6b8c470f7f", "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_food_sales_pct_top_food_cat_of_food_revenue_per_hour__1__0.882cffd670", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_food_items_per_head_per_hour___0.b363014e6d", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_food_revenue_per_head_per_hour___0.b99e787c27", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_items_per_food_order_per_hour___1.2864290ce4", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_items_per_food_order_per_hour___total_food_items_ordered_per_hour.4940f6a78f", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_item_per_hour___0.c64ad51169", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_item_per_hour___total_food_revenue_per_hour.d707b49bc0", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_order_per_hour___0.c7f011b15f", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_order_per_hour___total_food_revenue_per_hour.a2c4407d85", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_distinct_food_tables_per_hour___0.62c5da7a03", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_distinct_food_tables_per_hour___50.2b0d3c2512", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_food_category_diversity_per_hour___1.41c806a20a", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_top_food_category_revenue_per_hour___0.0421d21b43", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_top_food_category_revenue_per_hour___total_food_revenue_per_hour.c04bf973b7", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_total_food_items_ordered_per_hour___0.7e2b9a6fb4", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_total_food_orders_per_hour___0.51dd4b1e73", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_total_food_revenue_per_hour___0.f48f0defae", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_total_mains_ordered_per_hour___0.a8d70207b0", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_unique_food_items_ordered_per_hour___0.0432836dff", "test.restaurant_data_analytics.not_null_agg_hourly_food_sales_hour_of_day.0b52be9331", "test.restaurant_data_analytics.not_null_agg_hourly_food_sales_order_date.b7c06f6f07", "test.restaurant_data_analytics.not_null_agg_hourly_food_sales_order_hour_dt.60db913355", "test.restaurant_data_analytics.unique_agg_hourly_food_sales_order_hour_dt.7d0717c959"], "model.restaurant_data_analytics.agg_hourly_total_sales": ["test.restaurant_data_analytics.accepted_values_agg_hourly_total_sales_is_peak_hour__False__True__False.a383e22e95", "test.restaurant_data_analytics.accepted_values_agg_hourly_total_sales_is_weekend__False__True__False.c8919b8fab", "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_total_sales_hour_of_day__23__0.a164d43343", "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_total_sales_pct_drink_revenue_per_hour__1__0.6205b4143a", "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_total_sales_pct_food_revenue_per_hour__1__0.d3cf0985ff", "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_total_sales_pct_top_cat_of_total_revenue_per_hour__1__0.e9c1cb9011", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_items_ordered_per_head_per_hour___0.9e7dc2a3af", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_items_per_order_per_hour___1.c414496d06", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_items_per_order_per_hour___total_items_ordered_per_hour.f026e27c1b", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_head_per_hour___0.d9780ac8b5", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_item_per_hour___0.2da1f4aa0c", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_item_per_hour___total_revenue_per_hour.92ca689742", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_order_per_hour___0.6291f71cf1", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_order_per_hour___total_revenue_per_hour.25d1529a32", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_category_diversity_per_hour___1.e51151b9dc", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_distinct_tables_per_hour___0.7b7e4b646d", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_distinct_tables_per_hour___50.0ba73e9b1e", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_top_category_revenue_per_hour___0.6b3387f990", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_top_category_revenue_per_hour___total_revenue_per_hour.a785668cfe", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_total_items_ordered_per_hour___0.a6ec55afbf", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_total_new_customers_per_hour___0.05f359783c", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_total_orders_per_hour___0.dbaea66183", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_total_revenue_per_hour___0.b50fc0b8bb", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_unique_items_ordered_per_hour___0.b1f25f6421", "test.restaurant_data_analytics.not_null_agg_hourly_total_sales_hour_of_day.1d078c6715", "test.restaurant_data_analytics.not_null_agg_hourly_total_sales_order_date.3f19fbb9cc", "test.restaurant_data_analytics.not_null_agg_hourly_total_sales_order_hour_dt.97b59b9388", "test.restaurant_data_analytics.unique_agg_hourly_total_sales_order_hour_dt.e9ebac77c1"], "model.restaurant_data_analytics.agg_monthly_drink_sales": ["model.restaurant_data_analytics.agg_monthly_total_sales", "test.restaurant_data_analytics.accepted_values_agg_monthly_drink_sales_top_monthly_drink_category_name__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy.e9ff30fcb1", "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_drink_sales_pct_top_drink_cat_from_monthly_drinks_revenue__1__0.8a660dc628", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_distinct_drink_tables_per_day_monthly___0.d7cb5d4d53", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drink_items_per_head_monthly___0.566b981669", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drink_items_per_head_monthly___total_drink_items_sold_monthly.1c96391e40", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drinks_revenue_per_head_monthly___0.bc9852b7ff", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drinks_revenue_per_head_monthly___total_monthly_drink_revenue.239e569194", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_items_per_drinks_order_monthly___1.f0b829bc3b", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_items_per_drinks_order_monthly___total_drink_items_sold_monthly.ff447dc7ce", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_monthly_revenue_per_drink_item___0.ae46762f96", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_monthly_revenue_per_drink_item___total_monthly_drink_revenue.0b375d7a1a", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_revenue_per_drinks_order_monthly___0.437465dbf8", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_revenue_per_drinks_order_monthly___total_monthly_drink_revenue.358e708571", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_drink_category_diversity_monthly___0.6fd0308aab", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_top_monthly_drink_category_revenue___0.544c494439", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_top_monthly_drink_category_revenue___total_monthly_drink_revenue.f7ff55af58", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_total_customers_monthly___0.a585e5c44e", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_total_drink_items_sold_monthly___0.a0a68903fd", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_total_drink_orders_monthly___0.aba693124d", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_total_monthly_drink_revenue___0.29fee5e19e", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_unique_drink_items_ordered_monthly___0.709e843536", "test.restaurant_data_analytics.not_null_agg_monthly_drink_sales_order_month.d637a64958", "test.restaurant_data_analytics.unique_agg_monthly_drink_sales_order_month.319cf0cf13"], "model.restaurant_data_analytics.agg_monthly_food_sales": ["model.restaurant_data_analytics.agg_monthly_total_sales", "test.restaurant_data_analytics.accepted_values_agg_monthly_food_sales_top_monthly_food_category_name__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters.46f9cd5b81", "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_food_sales_pct_top_food_cat_from_monthly_food_revenue__1__0.07c126e482", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_distinct_food_tables_per_day_monthly___0.b84988c81d", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_items_per_head_monthly___0.2461b1d63c", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_items_per_head_monthly___total_food_items_sold_monthly.477a6a2fca", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_revenue_per_head_monthly___0.7ee2c7cf05", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_revenue_per_head_monthly___total_monthly_food_revenue.174e9defe0", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_items_per_food_order_monthly___0.298cecd64a", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_items_per_food_order_monthly___total_food_items_sold_monthly.2f74bd8c9e", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_monthly_revenue_per_food_item___0.68a278a88b", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_monthly_revenue_per_food_item___total_monthly_food_revenue.81fdd42b50", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_revenue_per_food_order_monthly___0.750879b3d1", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_revenue_per_food_order_monthly___total_monthly_food_revenue.b123784a03", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_food_category_diversity_monthly___0.b74e692065", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_top_monthly_food_category_revenue___0.14bcbe442c", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_top_monthly_food_category_revenue___total_monthly_food_revenue.c8d1ffb00c", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_total_customers_monthly___0.58ca7d7d9e", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_total_food_items_sold_monthly___0.1ff43b23e7", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_total_food_orders_monthly___0.844f753d49", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_total_monthly_food_revenue___0.d89576f612", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_unique_food_items_ordered_monthly___0.a0c517fb3e", "test.restaurant_data_analytics.not_null_agg_monthly_food_sales_order_month.ba9fc09f09", "test.restaurant_data_analytics.unique_agg_monthly_food_sales_order_month.3bf0bfe60d"], "model.restaurant_data_analytics.agg_monthly_total_sales": ["test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_total_sales_pct_drink_from_monthly_revenue__1__0.878750343a", "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_total_sales_pct_food_from_monthly_revenue__1__0.23ed9482de", "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_total_sales_pct_top_cat_of_total_monthly_revenue__1__0.2218cb4677", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_distinct_tables_per_day_monthly___0.f0590f7000", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_ordered_per_head_monthly___0.e1cfa72b9c", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_ordered_per_head_monthly___total_items_ordered_monthly.a1e1950805", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_per_order_monthly___1.9c95b67c0e", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_per_order_monthly___total_items_ordered_monthly.9838ff2afb", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_monthly_revenue_per_head___0.446f45d0be", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_monthly_revenue_per_head___total_monthly_revenue.8bef2fada4", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_item_monthly___0.4811754c19", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_item_monthly___total_monthly_revenue.5a8878dc6b", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_order_monthly___0.f7303eda9e", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_order_monthly___total_monthly_revenue.7b2f552b61", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_category_diversity_monthly___0.c1414dac5f", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_rolling_avg_items_sold_3mo___0.9ea6bec03b", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_rolling_avg_revenue_3mo___0.e9be1783bc", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_top_monthly_category_revenue___0.bf12b281dc", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_top_monthly_category_revenue___total_monthly_revenue.43f14c9bbd", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_total_items_ordered_monthly___0.a682889021", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_total_monthly_customers___0.e29c7f5803", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_total_monthly_revenue___0.99855eb949", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_total_orders_monthly___0.dcfb1f4451", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_unique_items_ordered_monthly___0.f9b73669ce", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_weekend_days_in_month___0.562dbe12a0", "test.restaurant_data_analytics.not_null_agg_monthly_total_sales_order_month.4a7866b528", "test.restaurant_data_analytics.unique_agg_monthly_total_sales_order_month.3393fa5406"], "model.restaurant_data_analytics.agg_weekly_drink_sales": ["model.restaurant_data_analytics.agg_weekly_total_sales", "test.restaurant_data_analytics.accepted_values_agg_weekly_drink_sales_top_weekly_drink_category_name__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy.cdf9d9f4f1", "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_drink_sales_pct_top_drink_cat_from_weekly_drink_revenue__1__0.85a532dcc0", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_distinct_drink_tables_per_day_weekly___0.f7d3c3caa8", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_items_per_haed_weekly___0.c8cffabb92", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_items_per_haed_weekly___total_drink_items_sold_weekly.6f9c841a8b", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_revenue_per_head_weekly___0.5f892929b2", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_revenue_per_head_weekly___total_weekly_drink_revenue.9631b34c8b", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_items_per_drink_order_weekly___0.10253eff42", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_items_per_drink_order_weekly___total_drink_items_sold_weekly.bd03606c80", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_revenue_per_drink_order_weekly___0.9f262fe41f", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_revenue_per_drink_order_weekly___total_weekly_drink_revenue.949dd447b7", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_weekly_revenue_per_drink_item___0.86d5dfbd30", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_drink_category_diversity_weekly___0.70f3b4ea29", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_top_weekly_drink_category_revenue___0.5a8808ee7f", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_top_weekly_drink_category_revenue___total_weekly_drink_revenue.67fe76cbce", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_total_customers_weekly___0.95963f5647", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_total_drink_items_sold_weekly___0.029ac1d01c", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_total_drink_orders_weekly___0.89fcff72dc", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_total_weekly_drink_revenue___0.4e8f3101f5", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_unique_drink_items_ordered_weekly___0.f1407f0393", "test.restaurant_data_analytics.not_null_agg_weekly_drink_sales_order_week.5938019729", "test.restaurant_data_analytics.unique_agg_weekly_drink_sales_order_week.ca32244b37"], "model.restaurant_data_analytics.agg_weekly_food_sales": ["model.restaurant_data_analytics.agg_weekly_total_sales", "test.restaurant_data_analytics.accepted_values_agg_weekly_food_sales_top_weekly_food_category_name__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters.64b09e1561", "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_food_sales_pct_top_food_cat_from_weekly_food_revenue__1__0.365a4895df", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_distinct_food_tables_per_day_weekly___0.c84314490e", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_items_per_head_weekly___0.1d347bf445", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_items_per_head_weekly___total_food_items_sold_weekly.318280b408", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_revenue_per_head_weekly___0.50fa490211", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_revenue_per_head_weekly___total_weekly_food_revenue.e067f7bbb2", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_items_per_food_order_weekly___0.0c61762bec", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_items_per_food_order_weekly___total_food_items_sold_weekly.e2850116ab", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_revenue_per_food_order_weekly___0.0132a4f6c4", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_revenue_per_food_order_weekly___total_weekly_food_revenue.ca3cb0a3a7", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_weekly_revenue_per_food_item___0.2c5a59df89", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_food_category_diversity_weekly___0.edb6aeaed1", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_top_weekly_food_category_revenue___0.d706ee86c0", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_top_weekly_food_category_revenue___total_weekly_food_revenue.40453a3f2f", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_total_customers_weekly___0.b00ced16e6", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_total_food_items_sold_weekly___0.d5463b5b57", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_total_food_orders_weekly___0.58a3404295", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_total_weekly_food_revenue___0.d283f147f3", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_unique_food_items_ordered_weekly___0.290f16a81a", "test.restaurant_data_analytics.not_null_agg_weekly_food_sales_order_week.25a819365a", "test.restaurant_data_analytics.unique_agg_weekly_food_sales_order_week.f274cc1360"], "model.restaurant_data_analytics.agg_weekly_total_sales": ["test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_total_sales_pct_drink_from_weekly_revenue__1__0.5e0fb563eb", "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_total_sales_pct_food_from_weekly_revenue__1__0.820b22ed71", "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_total_sales_pct_top_cat_of_total_weekly_revenue__1__0.03791cbfec", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_distinct_tables_per_day_weekly___0.960810e9aa", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_ordered_per_head_weekly___0.07d5dbcd47", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_ordered_per_head_weekly___total_items_ordered_weekly.b2b0a0e409", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_per_order_weekly___0.c79e705419", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_per_order_weekly___total_items_ordered_weekly.d9cd7feced", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_revenue_per_item_weekly___0.ae9684cdd7", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_revenue_per_order_weekly___0.5379b62377", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_revenue_per_order_weekly___total_weekly_revenue.df8ba52941", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_weekly_revenue_per_head___0.587120d32c", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_weekly_revenue_per_head___total_weekly_revenue.42e91454f3", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_category_diversity_weekly___0.6c9a732c42", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_rolling_avg_items_sold_4wk___0.cedc5b3664", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_rolling_avg_revenue_4wk___0.9537536a2c", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_top_weekly_category_revenue___0.dc832bb5be", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_top_weekly_category_revenue___total_weekly_revenue.ccb45074c3", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_total_items_ordered_weekly___0.73155e1e88", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_total_orders_weekly___0.5ae1a4f6b8", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_total_weekly_customers___0.b0b75fd34a", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_total_weekly_revenue___0.ce7b641f73", "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_unique_items_ordered_weekly___0.ae03e2fda3", "test.restaurant_data_analytics.not_null_agg_weekly_total_sales_order_week.cdd5ee8945", "test.restaurant_data_analytics.unique_agg_weekly_total_sales_order_week.219fbdfbf9"], "model.restaurant_data_analytics.agg_daily_metadata": ["model.restaurant_data_analytics.agg_daily_drink_sales", "model.restaurant_data_analytics.agg_daily_food_sales", "model.restaurant_data_analytics.agg_daily_total_sales"], "model.restaurant_data_analytics.agg_monthly_metadata": ["model.restaurant_data_analytics.agg_monthly_drink_sales", "model.restaurant_data_analytics.agg_monthly_food_sales", "model.restaurant_data_analytics.agg_monthly_total_sales"], "model.restaurant_data_analytics.agg_weekly_metadata": ["model.restaurant_data_analytics.agg_weekly_drink_sales", "model.restaurant_data_analytics.agg_weekly_food_sales"], "model.restaurant_data_analytics.dim_time": ["test.restaurant_data_analytics.not_null_dim_time_datetime_ordered.cbec1c07f1", "test.restaurant_data_analytics.unique_dim_time_datetime_ordered.177af51b2a"], "model.restaurant_data_analytics.stg_a_la_carte_menu": ["model.restaurant_data_analytics.dim_menu_items", "test.restaurant_data_analytics.not_null_stg_a_la_carte_menu_category.37817551cf", "test.restaurant_data_analytics.not_null_stg_a_la_carte_menu_item_name.36ae67ce39", "test.restaurant_data_analytics.not_null_stg_a_la_carte_menu_item_uuid.bc2025dfa2", "test.restaurant_data_analytics.unique_stg_a_la_carte_menu_item_uuid.a16abef12e"], "model.restaurant_data_analytics.stg_cocktails_and_beer_menu": ["model.restaurant_data_analytics.dim_menu_items", "test.restaurant_data_analytics.not_null_stg_cocktails_and_beer_menu_category.59e7e90b4d", "test.restaurant_data_analytics.not_null_stg_cocktails_and_beer_menu_item_name.b14f64b4a7", "test.restaurant_data_analytics.not_null_stg_cocktails_and_beer_menu_item_uuid.69972c6fe3", "test.restaurant_data_analytics.unique_stg_cocktails_and_beer_menu_item_uuid.1036d05d9f"], "model.restaurant_data_analytics.stg_dessert_menu": ["model.restaurant_data_analytics.dim_menu_items", "test.restaurant_data_analytics.not_null_stg_dessert_menu_category.84e31519c2", "test.restaurant_data_analytics.not_null_stg_dessert_menu_item_name.bc9a182538", "test.restaurant_data_analytics.not_null_stg_dessert_menu_item_uuid.5100194b40", "test.restaurant_data_analytics.unique_stg_dessert_menu_item_uuid.a3fb86a75b"], "model.restaurant_data_analytics.stg_orders": ["model.restaurant_data_analytics.fct_orders", "test.restaurant_data_analytics.not_null_stg_orders_item_ordered_id.abffa82b2b", "test.restaurant_data_analytics.not_null_stg_orders_item_uuid.954a22771b", "test.restaurant_data_analytics.relationships_stg_orders_item_uuid__item_uuid__ref_dim_menu_items_.b2c69889e6", "test.restaurant_data_analytics.unique_stg_orders_item_ordered_id.371219fd6d"], "model.restaurant_data_analytics.stg_wine_menu": ["model.restaurant_data_analytics.dim_menu_items", "test.restaurant_data_analytics.not_null_stg_wine_menu_category.dea98b2bd0", "test.restaurant_data_analytics.not_null_stg_wine_menu_item_name.275c234874", "test.restaurant_data_analytics.not_null_stg_wine_menu_item_uuid.141c870ced", "test.restaurant_data_analytics.unique_stg_wine_menu_item_uuid.ddca70a303"], "test.restaurant_data_analytics.not_null_dim_menu_items_item_uuid.774c582c18": [], "test.restaurant_data_analytics.unique_dim_menu_items_item_uuid.bd08cb1ca7": [], "test.restaurant_data_analytics.not_null_dim_menu_items_item_name.5271b11418": [], "test.restaurant_data_analytics.not_null_dim_menu_items_category.69523848c3": [], "test.restaurant_data_analytics.accepted_values_dim_menu_items_category__Bordeaux__Champagne_Sparkling__Dessert_Wines__Port_Sherry__Rarities__Red_Wines__Rose_Wines__White_Wines__Cheese__The_Sacred_Six__Ultimate_Steakhouse_Cocktails__Time_A_Place__Lo_No_Alc__Beers_Cider__Starters__Mains__Large_Cuts__Steaks__Sauces__Extras__Sides__Burgundy__Magnums__Puddings__Ice_Cream_Sorbet__Chocolates.cf6c12d38a": [], "test.restaurant_data_analytics.not_null_dim_menu_items_price.1ac5d639c4": [], "test.restaurant_data_analytics.not_null_dim_menu_items_is_priced_per_weight.d487175596": [], "test.restaurant_data_analytics.not_null_dim_menu_items_menu_source.e5d551a7f0": [], "test.restaurant_data_analytics.not_null_fct_orders_item_ordered_id.1a48e4de0a": [], "test.restaurant_data_analytics.unique_fct_orders_item_ordered_id.43ff115a40": [], "test.restaurant_data_analytics.not_null_fct_orders_table_no.d78c6ee39c": [], "test.restaurant_data_analytics.not_null_fct_orders_item_uuid.145ea3a0c1": [], "test.restaurant_data_analytics.relationships_fct_orders_item_uuid__item_uuid__ref_dim_menu_items_.f9ec88fbee": [], "test.restaurant_data_analytics.not_null_fct_orders_datetime_ordered.aacf1c2eea": [], "test.restaurant_data_analytics.not_null_fct_orders_production_department.6b5c746240": [], "test.restaurant_data_analytics.accepted_values_fct_orders_production_department__kitchen__bar.60bb7e44ff": [], "test.restaurant_data_analytics.not_null_fct_orders_order_uuid.9e38b191ab": [], "test.restaurant_data_analytics.not_null_fct_orders_quantity.f754434156": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_fct_orders_quantity__50__1.2dc70d2c12": [], "test.restaurant_data_analytics.not_null_fct_orders_order_date.84f0a76362": [], "test.restaurant_data_analytics.not_null_fct_orders_order_hour.385ba97c83": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_fct_orders_order_hour__23__0.3dddbd9d13": [], "test.restaurant_data_analytics.not_null_fct_orders_order_weekday.d374011ab1": [], "test.restaurant_data_analytics.accepted_values_fct_orders_order_weekday__Monday__Tuesday__Wednesday__Thursday__Friday__Saturday__Sunday.14d53fa665": [], "test.restaurant_data_analytics.not_null_fct_orders_item_name.b425bb9ffe": [], "test.restaurant_data_analytics.not_null_fct_orders_category.0a620c476d": [], "test.restaurant_data_analytics.not_null_fct_orders_price.5983e7e539": [], "test.restaurant_data_analytics.not_null_fct_orders_menu_source.ab9cf8e7bc": [], "test.restaurant_data_analytics.accepted_values_fct_orders_menu_source__a_la_carte__wine__dessert__cocktails_and_beer.f09ddd97a4": [], "test.restaurant_data_analytics.not_null_fct_orders_total_item_revenue.eb686692f4": [], "test.restaurant_data_analytics.not_null_agg_item_performance_total_item_uuid.d59af4ffe7": [], "test.restaurant_data_analytics.relationships_agg_item_performance_total_item_uuid__item_uuid__ref_dim_menu_items_.ec00fe5960": [], "test.restaurant_data_analytics.not_null_agg_item_performance_total_item_name.09051f6158": [], "test.restaurant_data_analytics.not_null_agg_item_performance_total_menu_source.fdb34fbd23": [], "test.restaurant_data_analytics.accepted_values_agg_item_performance_total_menu_source__a_la_carte__wine__dessert__cocktails_and_beer.4e060d3546": [], "test.restaurant_data_analytics.not_null_agg_item_performance_total_item_category.bd180f74c3": [], "test.restaurant_data_analytics.not_null_agg_item_performance_total_total_units_sold.411c818a19": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_item_performance_total_total_units_sold___0_.aaffeb542c": [], "test.restaurant_data_analytics.not_null_agg_item_performance_total_total_revenue.210bfcd51f": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_item_performance_total_total_revenue___0_.8157fc0670": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_item_performance_total_avg_order_hour__24__0.181d79d065": [], "test.restaurant_data_analytics.not_null_agg_item_performance_total_percent_of_total_sales.a03d3d8905": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_item_performance_total_percent_of_total_sales__100__0.4490803867": [], "test.restaurant_data_analytics.not_null_agg_category_performance_category.a23d4da1b4": [], "test.restaurant_data_analytics.not_null_agg_category_performance_menu_source.1bad3d7d85": [], "test.restaurant_data_analytics.not_null_agg_category_performance_avg_price.51b124e7fa": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_avg_price___0_.073766ce7d": [], "test.restaurant_data_analytics.not_null_agg_category_performance_avg_price_per_unit.d1c50d715f": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_avg_price_per_unit___0_.05c884321e": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_total_units_sold_30d___0_.8f3fe48be0": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_total_revenue_30d___0_.c315b16e27": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_total_units_sold_7d___0_.2adb4a1d35": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_category_performance_total_revenue_7d___0.bba097983c": [], "test.restaurant_data_analytics.not_null_agg_hourly_drink_sales_order_hour_dt.261b9a4fe9": [], "test.restaurant_data_analytics.unique_agg_hourly_drink_sales_order_hour_dt.4361589091": [], "test.restaurant_data_analytics.not_null_agg_hourly_drink_sales_order_date.0de88677a0": [], "test.restaurant_data_analytics.not_null_agg_hourly_drink_sales_hour_of_day.2583d9df37": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_drink_sales_hour_of_day__23__0.3e29f6efcf": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_total_drink_items_ordered_per_hour___0.3450c2e2d6": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_total_drink_revenue_per_hour___0.573915afdc": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_item_per_hour___0.023de2042a": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_item_per_hour___total_drink_revenue_per_hour.afdadd8a60": [], "test.restaurant_data_analytics.accepted_values_agg_hourly_drink_sales_top_drink_category_name_per_hour__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy.261d498c1b": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_top_drink_category_revenue_per_hour___0.786b3bbdfa": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_top_drink_category_revenue_per_hour___total_drink_revenue_per_hour.65074ddea5": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_drink_sales_pct_top_drink_cat_of_drink_revenue_per_hour__1__0.e57c775c7b": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_distinct_drink_tables_per_hour___0.7e82d1f7eb": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_distinct_drink_tables_per_hour___50.46da344194": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_total_drink_orders_per_hour___0.5ad7584efe": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_order_per_hour___0.3fed9674e6": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_revenue_per_drink_order_per_hour___total_drink_revenue_per_hour.93e1f9af63": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_items_per_drink_order_per_hour___1.d4e4c2e2a0": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_items_per_drink_order_per_hour___total_drink_items_ordered_per_hour.f3e179be57": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_unique_drink_items_ordered_per_hour___0.9462412e98": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_drink_category_diversity_per_hour___0.5fdb5ba869": [], "test.restaurant_data_analytics.accepted_values_agg_hourly_drink_sales_is_bar_peak_hour__False__True__False.af5c5a9a75": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_items_per_head_per_hour___0.dfaaa0fa7a": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_items_per_head_per_hour___total_drink_items_ordered_per_hour.812f1ef606": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_revenue_per_head_per_hour___0.cc50bd090d": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_drink_sales_avg_drink_revenue_per_head_per_hour___total_drink_revenue_per_hour.8ee23b6bc6": [], "test.restaurant_data_analytics.accepted_values_agg_hourly_drink_sales_is_weekend__False__True__False.8f4747307c": [], "test.restaurant_data_analytics.not_null_agg_hourly_food_sales_order_hour_dt.60db913355": [], "test.restaurant_data_analytics.unique_agg_hourly_food_sales_order_hour_dt.7d0717c959": [], "test.restaurant_data_analytics.not_null_agg_hourly_food_sales_order_date.b7c06f6f07": [], "test.restaurant_data_analytics.not_null_agg_hourly_food_sales_hour_of_day.0b52be9331": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_food_sales_hour_of_day__23__0.6b8c470f7f": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_total_food_items_ordered_per_hour___0.7e2b9a6fb4": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_total_food_revenue_per_hour___0.f48f0defae": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_item_per_hour___0.c64ad51169": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_item_per_hour___total_food_revenue_per_hour.d707b49bc0": [], "test.restaurant_data_analytics.accepted_values_agg_hourly_food_sales_top_food_category_name_per_hour__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters.7e80c0ef85": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_top_food_category_revenue_per_hour___0.0421d21b43": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_top_food_category_revenue_per_hour___total_food_revenue_per_hour.c04bf973b7": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_food_sales_pct_top_food_cat_of_food_revenue_per_hour__1__0.882cffd670": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_distinct_food_tables_per_hour___0.62c5da7a03": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_distinct_food_tables_per_hour___50.2b0d3c2512": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_total_mains_ordered_per_hour___0.a8d70207b0": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_food_revenue_per_head_per_hour___0.b99e787c27": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_food_items_per_head_per_hour___0.b363014e6d": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_total_food_orders_per_hour___0.51dd4b1e73": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_order_per_hour___0.c7f011b15f": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_revenue_per_food_order_per_hour___total_food_revenue_per_hour.a2c4407d85": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_items_per_food_order_per_hour___1.2864290ce4": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_avg_items_per_food_order_per_hour___total_food_items_ordered_per_hour.4940f6a78f": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_unique_food_items_ordered_per_hour___0.0432836dff": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_food_sales_food_category_diversity_per_hour___1.41c806a20a": [], "test.restaurant_data_analytics.accepted_values_agg_hourly_food_sales_is_weekend__False__True__False.1e07b9297e": [], "test.restaurant_data_analytics.accepted_values_agg_hourly_food_sales_is_kitchen_peak_hour__False__True__False.8f523c339e": [], "test.restaurant_data_analytics.not_null_agg_hourly_total_sales_order_hour_dt.97b59b9388": [], "test.restaurant_data_analytics.unique_agg_hourly_total_sales_order_hour_dt.e9ebac77c1": [], "test.restaurant_data_analytics.not_null_agg_hourly_total_sales_order_date.3f19fbb9cc": [], "test.restaurant_data_analytics.not_null_agg_hourly_total_sales_hour_of_day.1d078c6715": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_total_sales_hour_of_day__23__0.a164d43343": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_total_items_ordered_per_hour___0.a6ec55afbf": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_total_revenue_per_hour___0.b50fc0b8bb": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_item_per_hour___0.2da1f4aa0c": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_item_per_hour___total_revenue_per_hour.92ca689742": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_total_sales_pct_food_revenue_per_hour__1__0.d3cf0985ff": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_total_sales_pct_drink_revenue_per_hour__1__0.6205b4143a": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_top_category_revenue_per_hour___0.6b3387f990": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_top_category_revenue_per_hour___total_revenue_per_hour.a785668cfe": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_hourly_total_sales_pct_top_cat_of_total_revenue_per_hour__1__0.e9c1cb9011": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_distinct_tables_per_hour___0.7b7e4b646d": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_distinct_tables_per_hour___50.0ba73e9b1e": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_total_new_customers_per_hour___0.05f359783c": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_head_per_hour___0.d9780ac8b5": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_items_ordered_per_head_per_hour___0.9e7dc2a3af": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_total_orders_per_hour___0.dbaea66183": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_order_per_hour___0.6291f71cf1": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_revenue_per_order_per_hour___total_revenue_per_hour.25d1529a32": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_items_per_order_per_hour___1.c414496d06": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_avg_items_per_order_per_hour___total_items_ordered_per_hour.f026e27c1b": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_unique_items_ordered_per_hour___0.b1f25f6421": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_hourly_total_sales_category_diversity_per_hour___1.e51151b9dc": [], "test.restaurant_data_analytics.accepted_values_agg_hourly_total_sales_is_weekend__False__True__False.c8919b8fab": [], "test.restaurant_data_analytics.accepted_values_agg_hourly_total_sales_is_peak_hour__False__True__False.a383e22e95": [], "test.restaurant_data_analytics.not_null_agg_daily_food_sales_order_date.1329693b01": [], "test.restaurant_data_analytics.unique_agg_daily_food_sales_order_date.e87d78ab38": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_total_food_items_sold_all_day___0.e94072a7cb": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_total_daily_food_revenue___0.675f634dc2": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_daily_revenue_per_food_item___0.0a2459d06e": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_food_category_diversity_all_day___0.b5412e1e33": [], "test.restaurant_data_analytics.accepted_values_agg_daily_food_sales_top_daily_food_category_name__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters.b33fb8893d": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_top_daily_food_category_revenue___0.f8dcedd1db": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_top_daily_food_category_revenue___total_daily_food_revenue.0cd87cbf08": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_food_sales_pct_top_food_cat_from_daily_food_revenue__1__0.794f2beb78": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_distinct_food_tables_all_day___0.d18f978716": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_total_food_orders_all_day___0.6ef55829f2": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_revenue_per_food_order_all_day___0.2e1f57b14e": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_revenue_per_food_order_all_day___total_daily_food_revenue.f0b464756f": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_items_per_food_order_all_day___1.aa27ff7b31": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_items_per_food_order_all_day___total_food_items_sold_all_day.0ddf9da8c2": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_total_customers_all_day___0.839c694190": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_revenue_per_head_all_day___0.91a6d5c72f": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_revenue_per_head_all_day___total_daily_food_revenue.a81083db0e": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_items_per_head_all_day___0.1013ce16d7": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_avg_food_items_per_head_all_day___total_food_items_sold_all_day.5655082675": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_food_sales_unique_food_items_ordered_all_day___0.3716d579f5": [], "test.restaurant_data_analytics.accepted_values_agg_daily_food_sales_is_weekend__False__True__False.4a2a5dc77c": [], "test.restaurant_data_analytics.not_null_agg_daily_drink_sales_order_date.a15b02f884": [], "test.restaurant_data_analytics.unique_agg_daily_drink_sales_order_date.37388b3ec8": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_total_drink_items_ordered_all_day___0.0a862aa1bf": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_total_daily_drink_revenue___0.999b27f967": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_daily_revenue_per_drink_item___0.64a7e65dd8": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_drink_category_diversity_all_day___0.841422b2c0": [], "test.restaurant_data_analytics.accepted_values_agg_daily_drink_sales_top_daily_drink_category_name__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy.947a6cc3bc": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_top_daily_drink_category_revenue___0.10b8e32fdf": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_top_daily_drink_category_revenue___total_daily_drink_revenue.f566520520": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_drink_sales_pct_top_drink_cat_from_daily_drink_revenue__1__0.d43351dfda": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_distinct_drink_tables_all_day___0.2f1ed6c9dd": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_total_drink_orders_all_day___0.0a5caa04e6": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_revenue_per_drink_order_all_day___0.f3b66c426d": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_revenue_per_drink_order_all_day___total_daily_drink_revenue.9cec8cd318": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_items_per_drink_order_all_day___1.55f81a3337": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_items_per_drink_order_all_day___total_drink_items_ordered_all_day.616d1ab7c6": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_total_customers_all_day___0.3614fd7ba9": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_revenue_per_head_all_day___0.730a042cc8": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_revenue_per_head_all_day___total_daily_drink_revenue.603e0aaab5": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_items_per_head_all_day___0.6dbb5186b7": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_avg_drink_items_per_head_all_day___total_drink_items_ordered_all_day.acc5590b4b": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_drink_sales_unique_drink_items_ordered_all_day___0.9c7b482cea": [], "test.restaurant_data_analytics.accepted_values_agg_daily_drink_sales_is_weekend__False__True__False.b218e14f76": [], "test.restaurant_data_analytics.not_null_agg_daily_total_sales_order_date.30f5911338": [], "test.restaurant_data_analytics.unique_agg_daily_total_sales_order_date.25284edde9": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_total_sales_day_of_week__7__1.2a85a6b60a": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_total_items_ordered_all_day___0.a9751926bd": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_total_daily_revenue___0.97f8e801b5": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_revenue_per_item_daily___0.0a799e5a02": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_total_sales_pct_food_from_daily_revenue__1__0.7d0a52baea": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_total_sales_pct_drink_from_daily_revenue__1__0.2b7a44dd8f": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_top_daily_category_revenue___0.fd396355d4": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_top_daily_category_revenue___total_daily_revenue.df013c83bf": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_daily_total_sales_pct_top_cat_of_total_daily_revenue__1__0.2ff363d3b5": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_pct_top_cat_of_total_daily_revenue___1.a09bb8f229": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_total_daily_customers___0.80895610fe": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_daily_revenue_per_head___0.243d003451": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_daily_revenue_per_head___total_daily_revenue.414af5654e": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_ordered_per_head_per_day___0.a0dbf27d44": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_ordered_per_head_per_day___total_items_ordered_all_day.7fb1a4a554": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_total_orders_all_day___0.f985e839f1": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_per_order_all_day___0.803711bc28": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_items_per_order_all_day___total_items_ordered_all_day.5d4e1eff4e": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_revenue_per_order_all_day___0.4f58090e30": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_avg_revenue_per_order_all_day___total_daily_revenue.a17649f776": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_unique_items_ordered_all_day___0.999c2652e5": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_category_diversity_all_day___0.1ca659ed1c": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_daily_total_sales_distinct_tables_used_all_day___0.05fe3c453a": [], "test.restaurant_data_analytics.accepted_values_agg_daily_total_sales_is_weekend__False__True__False.3f08010b07": [], "test.restaurant_data_analytics.not_null_agg_weekly_food_sales_order_week.25a819365a": [], "test.restaurant_data_analytics.unique_agg_weekly_food_sales_order_week.f274cc1360": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_total_food_items_sold_weekly___0.d5463b5b57": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_total_weekly_food_revenue___0.d283f147f3": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_weekly_revenue_per_food_item___0.2c5a59df89": [], "test.restaurant_data_analytics.accepted_values_agg_weekly_food_sales_top_weekly_food_category_name__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters.64b09e1561": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_top_weekly_food_category_revenue___0.d706ee86c0": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_top_weekly_food_category_revenue___total_weekly_food_revenue.40453a3f2f": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_food_sales_pct_top_food_cat_from_weekly_food_revenue__1__0.365a4895df": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_distinct_food_tables_per_day_weekly___0.c84314490e": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_total_food_orders_weekly___0.58a3404295": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_revenue_per_food_order_weekly___0.0132a4f6c4": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_revenue_per_food_order_weekly___total_weekly_food_revenue.ca3cb0a3a7": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_items_per_food_order_weekly___0.0c61762bec": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_items_per_food_order_weekly___total_food_items_sold_weekly.e2850116ab": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_total_customers_weekly___0.b00ced16e6": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_revenue_per_head_weekly___0.50fa490211": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_revenue_per_head_weekly___total_weekly_food_revenue.e067f7bbb2": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_items_per_head_weekly___0.1d347bf445": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_avg_food_items_per_head_weekly___total_food_items_sold_weekly.318280b408": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_food_category_diversity_weekly___0.edb6aeaed1": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_food_sales_unique_food_items_ordered_weekly___0.290f16a81a": [], "test.restaurant_data_analytics.not_null_agg_weekly_drink_sales_order_week.5938019729": [], "test.restaurant_data_analytics.unique_agg_weekly_drink_sales_order_week.ca32244b37": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_total_drink_items_sold_weekly___0.029ac1d01c": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_total_weekly_drink_revenue___0.4e8f3101f5": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_weekly_revenue_per_drink_item___0.86d5dfbd30": [], "test.restaurant_data_analytics.accepted_values_agg_weekly_drink_sales_top_weekly_drink_category_name__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy.cdf9d9f4f1": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_top_weekly_drink_category_revenue___0.5a8808ee7f": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_top_weekly_drink_category_revenue___total_weekly_drink_revenue.67fe76cbce": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_drink_sales_pct_top_drink_cat_from_weekly_drink_revenue__1__0.85a532dcc0": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_distinct_drink_tables_per_day_weekly___0.f7d3c3caa8": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_total_drink_orders_weekly___0.89fcff72dc": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_revenue_per_drink_order_weekly___0.9f262fe41f": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_revenue_per_drink_order_weekly___total_weekly_drink_revenue.949dd447b7": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_items_per_drink_order_weekly___0.10253eff42": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_items_per_drink_order_weekly___total_drink_items_sold_weekly.bd03606c80": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_total_customers_weekly___0.95963f5647": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_revenue_per_head_weekly___0.5f892929b2": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_revenue_per_head_weekly___total_weekly_drink_revenue.9631b34c8b": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_items_per_haed_weekly___0.c8cffabb92": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_avg_drink_items_per_haed_weekly___total_drink_items_sold_weekly.6f9c841a8b": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_drink_category_diversity_weekly___0.70f3b4ea29": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_drink_sales_unique_drink_items_ordered_weekly___0.f1407f0393": [], "test.restaurant_data_analytics.not_null_agg_weekly_total_sales_order_week.cdd5ee8945": [], "test.restaurant_data_analytics.unique_agg_weekly_total_sales_order_week.219fbdfbf9": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_total_items_ordered_weekly___0.73155e1e88": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_total_weekly_revenue___0.ce7b641f73": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_revenue_per_item_weekly___0.ae9684cdd7": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_category_diversity_weekly___0.6c9a732c42": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_top_weekly_category_revenue___0.dc832bb5be": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_top_weekly_category_revenue___total_weekly_revenue.ccb45074c3": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_total_sales_pct_food_from_weekly_revenue__1__0.820b22ed71": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_total_sales_pct_drink_from_weekly_revenue__1__0.5e0fb563eb": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_weekly_total_sales_pct_top_cat_of_total_weekly_revenue__1__0.03791cbfec": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_total_weekly_customers___0.b0b75fd34a": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_weekly_revenue_per_head___0.587120d32c": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_weekly_revenue_per_head___total_weekly_revenue.42e91454f3": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_ordered_per_head_weekly___0.07d5dbcd47": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_ordered_per_head_weekly___total_items_ordered_weekly.b2b0a0e409": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_total_orders_weekly___0.5ae1a4f6b8": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_per_order_weekly___0.c79e705419": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_items_per_order_weekly___total_items_ordered_weekly.d9cd7feced": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_revenue_per_order_weekly___0.5379b62377": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_revenue_per_order_weekly___total_weekly_revenue.df8ba52941": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_unique_items_ordered_weekly___0.ae03e2fda3": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_avg_distinct_tables_per_day_weekly___0.960810e9aa": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_rolling_avg_revenue_4wk___0.9537536a2c": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_weekly_total_sales_rolling_avg_items_sold_4wk___0.cedc5b3664": [], "test.restaurant_data_analytics.not_null_agg_monthly_food_sales_order_month.ba9fc09f09": [], "test.restaurant_data_analytics.unique_agg_monthly_food_sales_order_month.3bf0bfe60d": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_total_food_items_sold_monthly___0.1ff43b23e7": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_total_monthly_food_revenue___0.d89576f612": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_monthly_revenue_per_food_item___0.68a278a88b": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_monthly_revenue_per_food_item___total_monthly_food_revenue.81fdd42b50": [], "test.restaurant_data_analytics.accepted_values_agg_monthly_food_sales_top_monthly_food_category_name__Mains__Large_Cuts__Steaks__Cheese__Sides__Sauces__Puddings__Ice_Cream_Sorbet__Extras__Chocolates__Starters.46f9cd5b81": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_top_monthly_food_category_revenue___0.14bcbe442c": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_top_monthly_food_category_revenue___total_monthly_food_revenue.c8d1ffb00c": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_food_sales_pct_top_food_cat_from_monthly_food_revenue__1__0.07c126e482": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_distinct_food_tables_per_day_monthly___0.b84988c81d": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_total_food_orders_monthly___0.844f753d49": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_revenue_per_food_order_monthly___0.750879b3d1": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_revenue_per_food_order_monthly___total_monthly_food_revenue.b123784a03": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_items_per_food_order_monthly___0.298cecd64a": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_items_per_food_order_monthly___total_food_items_sold_monthly.2f74bd8c9e": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_total_customers_monthly___0.58ca7d7d9e": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_revenue_per_head_monthly___0.7ee2c7cf05": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_revenue_per_head_monthly___total_monthly_food_revenue.174e9defe0": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_items_per_head_monthly___0.2461b1d63c": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_avg_food_items_per_head_monthly___total_food_items_sold_monthly.477a6a2fca": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_food_category_diversity_monthly___0.b74e692065": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_food_sales_unique_food_items_ordered_monthly___0.a0c517fb3e": [], "test.restaurant_data_analytics.not_null_agg_monthly_drink_sales_order_month.d637a64958": [], "test.restaurant_data_analytics.unique_agg_monthly_drink_sales_order_month.319cf0cf13": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_total_drink_items_sold_monthly___0.a0a68903fd": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_total_monthly_drink_revenue___0.29fee5e19e": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_monthly_revenue_per_drink_item___0.ae46762f96": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_monthly_revenue_per_drink_item___total_monthly_drink_revenue.0b375d7a1a": [], "test.restaurant_data_analytics.accepted_values_agg_monthly_drink_sales_top_monthly_drink_category_name__Beers_Cider__Lo_No_Alc__Port_Sherry__Ultimate_Steakhouse_Cocktails__Time_A_Place__Rarities__The_Sacred_Six__Red_Wines__Champagne_Sparkling__Rose_Wines__Dessert_Wines__White_Wines__Magnums__Bordeaux__Burgundy.e9ff30fcb1": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_top_monthly_drink_category_revenue___0.544c494439": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_top_monthly_drink_category_revenue___total_monthly_drink_revenue.f7ff55af58": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_drink_sales_pct_top_drink_cat_from_monthly_drinks_revenue__1__0.8a660dc628": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_distinct_drink_tables_per_day_monthly___0.d7cb5d4d53": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_total_drink_orders_monthly___0.aba693124d": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_revenue_per_drinks_order_monthly___0.437465dbf8": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_revenue_per_drinks_order_monthly___total_monthly_drink_revenue.358e708571": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_items_per_drinks_order_monthly___1.f0b829bc3b": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_items_per_drinks_order_monthly___total_drink_items_sold_monthly.ff447dc7ce": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_total_customers_monthly___0.a585e5c44e": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drinks_revenue_per_head_monthly___0.bc9852b7ff": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drinks_revenue_per_head_monthly___total_monthly_drink_revenue.239e569194": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drink_items_per_head_monthly___0.566b981669": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_avg_drink_items_per_head_monthly___total_drink_items_sold_monthly.1c96391e40": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_drink_category_diversity_monthly___0.6fd0308aab": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_drink_sales_unique_drink_items_ordered_monthly___0.709e843536": [], "test.restaurant_data_analytics.not_null_agg_monthly_total_sales_order_month.4a7866b528": [], "test.restaurant_data_analytics.unique_agg_monthly_total_sales_order_month.3393fa5406": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_total_items_ordered_monthly___0.a682889021": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_total_monthly_revenue___0.99855eb949": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_item_monthly___0.4811754c19": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_item_monthly___total_monthly_revenue.5a8878dc6b": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_category_diversity_monthly___0.c1414dac5f": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_top_monthly_category_revenue___0.bf12b281dc": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_top_monthly_category_revenue___total_monthly_revenue.43f14c9bbd": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_total_sales_pct_food_from_monthly_revenue__1__0.23ed9482de": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_total_sales_pct_drink_from_monthly_revenue__1__0.878750343a": [], "test.restaurant_data_analytics.dbt_utils_accepted_range_agg_monthly_total_sales_pct_top_cat_of_total_monthly_revenue__1__0.2218cb4677": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_total_monthly_customers___0.e29c7f5803": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_monthly_revenue_per_head___0.446f45d0be": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_monthly_revenue_per_head___total_monthly_revenue.8bef2fada4": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_ordered_per_head_monthly___0.e1cfa72b9c": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_ordered_per_head_monthly___total_items_ordered_monthly.a1e1950805": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_total_orders_monthly___0.dcfb1f4451": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_per_order_monthly___1.9c95b67c0e": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_items_per_order_monthly___total_items_ordered_monthly.9838ff2afb": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_order_monthly___0.f7303eda9e": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_revenue_per_order_monthly___total_monthly_revenue.7b2f552b61": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_unique_items_ordered_monthly___0.f9b73669ce": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_avg_distinct_tables_per_day_monthly___0.f0590f7000": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_rolling_avg_revenue_3mo___0.e9be1783bc": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_rolling_avg_items_sold_3mo___0.9ea6bec03b": [], "test.restaurant_data_analytics.dbt_utils_expression_is_true_agg_monthly_total_sales_weekend_days_in_month___0.562dbe12a0": [], "test.restaurant_data_analytics.not_null_dim_time_datetime_ordered.cbec1c07f1": [], "test.restaurant_data_analytics.unique_dim_time_datetime_ordered.177af51b2a": [], "test.restaurant_data_analytics.not_null_stg_a_la_carte_menu_item_uuid.bc2025dfa2": [], "test.restaurant_data_analytics.unique_stg_a_la_carte_menu_item_uuid.a16abef12e": [], "test.restaurant_data_analytics.not_null_stg_a_la_carte_menu_item_name.36ae67ce39": [], "test.restaurant_data_analytics.not_null_stg_a_la_carte_menu_category.37817551cf": [], "test.restaurant_data_analytics.not_null_stg_cocktails_and_beer_menu_item_uuid.69972c6fe3": [], "test.restaurant_data_analytics.unique_stg_cocktails_and_beer_menu_item_uuid.1036d05d9f": [], "test.restaurant_data_analytics.not_null_stg_cocktails_and_beer_menu_item_name.b14f64b4a7": [], "test.restaurant_data_analytics.not_null_stg_cocktails_and_beer_menu_category.59e7e90b4d": [], "test.restaurant_data_analytics.not_null_stg_dessert_menu_item_uuid.5100194b40": [], "test.restaurant_data_analytics.unique_stg_dessert_menu_item_uuid.a3fb86a75b": [], "test.restaurant_data_analytics.not_null_stg_dessert_menu_item_name.bc9a182538": [], "test.restaurant_data_analytics.not_null_stg_dessert_menu_category.84e31519c2": [], "test.restaurant_data_analytics.not_null_stg_wine_menu_item_uuid.141c870ced": [], "test.restaurant_data_analytics.unique_stg_wine_menu_item_uuid.ddca70a303": [], "test.restaurant_data_analytics.not_null_stg_wine_menu_item_name.275c234874": [], "test.restaurant_data_analytics.not_null_stg_wine_menu_category.dea98b2bd0": [], "test.restaurant_data_analytics.not_null_stg_orders_item_ordered_id.abffa82b2b": [], "test.restaurant_data_analytics.unique_stg_orders_item_ordered_id.371219fd6d": [], "test.restaurant_data_analytics.not_null_stg_orders_item_uuid.954a22771b": [], "test.restaurant_data_analytics.relationships_stg_orders_item_uuid__item_uuid__ref_dim_menu_items_.b2c69889e6": [], "source.restaurant_data_analytics.restaurant_data.orders": ["model.restaurant_data_analytics.stg_orders"], "source.restaurant_data_analytics.restaurant_data.a_la_carte_menu": ["model.restaurant_data_analytics.stg_a_la_carte_menu"], "source.restaurant_data_analytics.restaurant_data.cocktails_and_beer_menu": ["model.restaurant_data_analytics.stg_cocktails_and_beer_menu"], "source.restaurant_data_analytics.restaurant_data.dessert_menu": ["model.restaurant_data_analytics.stg_dessert_menu"], "source.restaurant_data_analytics.restaurant_data.wine_menu": ["model.restaurant_data_analytics.stg_wine_menu"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}